{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "79e18b52_bd589227",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 9
      },
      "lineNbr": 2378,
      "author": {
        "id": 307656
      },
      "writtenOn": "2022-12-16T18:38:29Z",
      "side": 0,
      "message": "I see that `sortedByName \u003d null;` is not needed anymore, but for `byName \u003d null;` I don\u0027t see an alternative (was it needed to begin with?)",
      "range": {
        "startLine": 2378,
        "startChar": 2,
        "endLine": 2378,
        "endChar": 16
      },
      "revId": "5c6c374ff660437571369782bfbacea62d2b81a0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cce1ab7f_39e2bc88",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 9
      },
      "lineNbr": 2378,
      "author": {
        "id": 307629
      },
      "writtenOn": "2022-12-16T19:40:02Z",
      "side": 0,
      "message": "It looks like that was added in 2015 to allow the Java garbage collector to garbage collect that field before the method finishes, if it runs during that interval. The Java garbage collector has seen many improvements in the last 7 years, as well as the machines that JGit might be running on. \n\nI ran the IntelliJ Async Profiler (as in https://www.jetbrains.com/help/idea/cpu-and-memory-live-charts.html) on a GC command on the cgit repository (same one as in my long comment above).\n\nIn one profile the baseline implementation, the first call to PackWriter#sortByName (via PackWriter#computeName) allocates 0.04% of the memory allocated during GC#writePack. The call to PackWriter#sortByName then grabs the cached field, so it is so fast that it doesn\u0027t even show up in the profiler\u0027s graph.\n\nIn one profile of this proposed implementation, the first call to PackWriter#getSortedByName allocates 1.02% of the memory allocated during GC#writePack (via PackWriter#computeName). The second call directly to PackWriter#makeSortedByName (via PackWriter#prepareBitmapIndex) allocates 0.60% of the memory allocated during GC#writePack (because it allocates 1.91% of the memory allocated by PackWriter#prepareBitmapIndex).\n\nThese memory allocations are all much smaller than other parts of GC#writePack, such as PackWriter#findObjectsToPack (37%), PackWriter#writeObjects (19%), and BitmapWalker#findObjects (18%); so I\u0027m personally not concerned about the chance that the Java garbage collector collects them a bit later.\n\nLet me know if it\u0027s concerning to you, though!",
      "parentUuid": "79e18b52_bd589227",
      "range": {
        "startLine": 2378,
        "startChar": 2,
        "endLine": 2378,
        "endChar": 16
      },
      "revId": "5c6c374ff660437571369782bfbacea62d2b81a0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d8cc541_bedb43de",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 9
      },
      "lineNbr": 2378,
      "author": {
        "id": 307629
      },
      "writtenOn": "2022-12-16T19:45:20Z",
      "side": 0,
      "message": "Sorry, I just realized I was looking at CPU instead of memory for the proposed implementation\u0027s profile. Let me get back to you with the corrected percentages.",
      "parentUuid": "cce1ab7f_39e2bc88",
      "range": {
        "startLine": 2378,
        "startChar": 2,
        "endLine": 2378,
        "endChar": 16
      },
      "revId": "5c6c374ff660437571369782bfbacea62d2b81a0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb368a1f_0f600468",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 9
      },
      "lineNbr": 2378,
      "author": {
        "id": 307629
      },
      "writtenOn": "2022-12-16T19:53:27Z",
      "side": 0,
      "message": "I should have written the following message -- the numbers look even a bit better!\n\n~~~\nIt looks like that was added in 2015 to allow the Java garbage collector to garbage collect that field before the method finishes, if it runs during that interval. The Java garbage collector has seen many improvements in the last 7 years, as well as the machines that JGit might be running on. \n\nI ran the IntelliJ Async Profiler (as in https://www.jetbrains.com/help/idea/cpu-and-memory-live-charts.html) on a GC command on the cgit repository (same one as in my long comment above).\n\nIn one profile the baseline implementation, the first call to PackWriter#sortByName (via PackWriter#computeName) allocates 0.04% of the memory allocated during GC#writePack. The call to PackWriter#sortByName then grabs the cached field, so it is so fast that it doesn\u0027t even show up in the profiler\u0027s graph.\n\nIn one profile of this proposed implementation, the first call to PackWriter#getSortedByName allocates 0.04% of the memory allocated during GC#writePack (via PackWriter#computeName). The second call directly to PackWriter#makeSortedByName (via PackWriter#prepareBitmapIndex) allocates 0.04% of the memory allocated during GC#writePack (because it allocates 0.15% of the memory allocated by PackWriter#prepareBitmapIndex).\n\nThese memory allocations are all much smaller than other parts of GC#writePack, such as PackWriter#findObjectsToPack (65%), BitmapWalker#findObjects (23%), and PackWriter#writeObjects (6%); so I\u0027m personally not concerned about the chance that the Java garbage collector collects them a bit later.\n\nLet me know if it\u0027s concerning to you, though!\n~~~",
      "parentUuid": "5d8cc541_bedb43de",
      "range": {
        "startLine": 2378,
        "startChar": 2,
        "endLine": 2378,
        "endChar": 16
      },
      "revId": "5c6c374ff660437571369782bfbacea62d2b81a0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "727208c7_25172a50",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 9
      },
      "lineNbr": 2378,
      "author": {
        "id": 201156
      },
      "writtenOn": "2022-12-19T22:50:00Z",
      "side": 0,
      "message": "Bitmap calculation is a very heavy process. I suspect that GC could kick in in the middle and then having this collection marked as \"unreachable\" helps to get rid of it at that moment. Otherwise the memory has a valid pointer and don\u0027t know if GC is clever enough to know that you won\u0027t use it.\n\nMaybe it is not that much memory, but we won\u0027t need it and doesn\u0027t harm telling that to GC. I think we better do not remove the nulls.\n\nCheck the javadoc of this method (because you are making it keep some of the internal state).",
      "parentUuid": "bb368a1f_0f600468",
      "range": {
        "startLine": 2378,
        "startChar": 2,
        "endLine": 2378,
        "endChar": 16
      },
      "revId": "5c6c374ff660437571369782bfbacea62d2b81a0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da5c5935_cfcd1456",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 9
      },
      "lineNbr": 2378,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-12-19T23:12:24Z",
      "side": 0,
      "message": "yes, there is a reason why sortedByName and byName are set null here",
      "parentUuid": "727208c7_25172a50",
      "range": {
        "startLine": 2378,
        "startChar": 2,
        "endLine": 2378,
        "endChar": 16
      },
      "revId": "5c6c374ff660437571369782bfbacea62d2b81a0",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}