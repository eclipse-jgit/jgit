{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "43fcdfec_5bcdf881",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-10-17T09:05:47Z",
      "side": 1,
      "message": "I think this is wrong, the protocol spec says the ls-refs command takes the following arguments [1]:\n- symrefs\n- peel\n- ref-prefix \u003cprefix\u003e\n\nThis means assuming that a prefix not ending with \u0027/\u0027 is to be treated as an exact match is a false assumption.\n\ngit searches for all prefixes given in ls-refs command in one pass which is more efficient than the current jgit implementation using one pass per ref prefix\n\n[1] https://git-scm.com/docs/protocol-v2/#_ls_refs",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aca289eb_a05d6de7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 49
      },
      "writtenOn": "2023-10-17T20:10:49Z",
      "side": 1,
      "message": "yes, the specification is not explicit about the format of `\u003cprefix\u003e` values. But observing what is sent by the cgit clinet and knowing the format of refs, we can _safely_ assume that the prefix without \"/\" at the end is a **potential** exact match. If it isn\u0027t we still fall back to `#getRefsByPrefix`.\n\n\u003e git searches for all prefixes given in ls-refs command in one pass which is more efficient than the current jgit implementation using one pass per ref prefix\n\nthis sounds like a much better approach, especially if stream processing is possible (so that all refs are not loaded into memory). But jgit\u0027s `RefDatabase` was not designed in a way that would make it possible.\n\nI can give a try to `RefDatabase.getRefs()` and filter them in one go. That would definitely reduce the IO, as we only load each ref once, but we still need to do N comparisons.\n\nOr we can go back to the proposal in the Ib340ff0ff0.\n\nWDYT?",
      "parentUuid": "43fcdfec_5bcdf881",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8889ebb3_3cddae0b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-10-17T20:50:49Z",
      "side": 1,
      "message": "I tried with a test repo\n- clone the repo https://github.com/msohn/HelloWorld\n- fetching master yields\n  `$ GIT_TRACE_PACKET\u003d1 git fetch origin master\n  22:42:42.899062 pkt-line.c:85           packet:        fetch\u003c version 2\n  22:42:42.901426 pkt-line.c:85           packet:        fetch\u003c agent\u003dgit/github-cbc05ce31956\n  22:42:42.901443 pkt-line.c:85           packet:        fetch\u003c ls-refs\u003dunborn\n  22:42:42.901450 pkt-line.c:85           packet:        fetch\u003c fetch\u003dshallow wait-for-done filter\n  22:42:42.901456 pkt-line.c:85           packet:        fetch\u003c server-option\n  22:42:42.901462 pkt-line.c:85           packet:        fetch\u003c object-format\u003dsha1\n  22:42:42.901468 pkt-line.c:85           packet:        fetch\u003c 0000\n  22:42:42.901480 pkt-line.c:85           packet:        fetch\u003e command\u003dls-refs\n  22:42:42.901505 pkt-line.c:85           packet:        fetch\u003e agent\u003dgit/2.42.0\n  22:42:42.901514 pkt-line.c:85           packet:        fetch\u003e object-format\u003dsha1\n  22:42:42.901519 pkt-line.c:85           packet:        fetch\u003e 0001\n  22:42:42.901524 pkt-line.c:85           packet:        fetch\u003e peel\n  22:42:42.901530 pkt-line.c:85           packet:        fetch\u003e symrefs\n  22:42:42.901536 pkt-line.c:85           packet:        fetch\u003e unborn\n  22:42:42.902135 pkt-line.c:85           packet:        fetch\u003e ref-prefix master\n  22:42:42.902157 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/master\n  22:42:42.902163 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/tags/master\n  22:42:42.902168 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/heads/master\n  22:42:42.902174 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/remotes/master\n  22:42:42.902179 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/remotes/master/HEAD\n  22:42:42.902184 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/tags/\n  22:42:42.902195 pkt-line.c:85           packet:        fetch\u003e 0000\n  22:42:43.065645 pkt-line.c:85           packet:        fetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master\n  22:42:43.065820 pkt-line.c:85           packet:        fetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master1\n  22:42:43.065836 pkt-line.c:85           packet:        fetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master2\n  22:42:43.065848 pkt-line.c:85           packet:        fetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master3\n  22:42:43.065886 pkt-line.c:85           packet:        fetch\u003c 8a65db4c3b3239b927167e16e5a62f809d96982a refs/tags/1.1.2 peeled:033ccdb24883e06fedaedaee2edb842c53dbdbc2\n  22:42:43.065992 pkt-line.c:85           packet:        fetch\u003c 2a602437d1196f89d93156b8f78ecd9b60bff172 refs/tags/annotated peeled:5bc914e131235a2505c726dc1c0cb459960654b5\n  22:42:43.066062 pkt-line.c:85           packet:        fetch\u003c 5bc914e131235a2505c726dc1c0cb459960654b5 refs/tags/light\n  22:42:43.066079 pkt-line.c:85           packet:        fetch\u003c 099baa4938018fda1c1032e878ecb648fb4f4856 refs/tags/signed peeled:5bc914e131235a2505c726dc1c0cb459960654b5\n  22:42:43.066204 pkt-line.c:85           packet:        fetch\u003c ff929fc60c280f2b179fa7a91f491613b3f18cea refs/tags/tag-to-pin peeled:e2b3854d42066ba1f1ca2e777f882c8fad8f4899\n  22:42:43.066219 pkt-line.c:85           packet:        fetch\u003c 0000\n  From github.com:msohn/HelloWorld\n  * branch            master     -\u003e FETCH_HEAD\n  22:42:43.089090 pkt-line.c:85           packet:        fetch\u003e 0000 \n\nThis shows that github (AFAIK they use libgit2) returns the branches\n- refs/heads/master\n- refs/heads/master1\n- refs/heads/master2\n- refs/heads/master3\n\nI think with your change jgit only returns the branch refs/heads/master",
      "parentUuid": "aca289eb_a05d6de7",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12f54b68_e2b1719f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 49
      },
      "writtenOn": "2023-10-17T21:44:17Z",
      "side": 1,
      "message": "yes, it will only return `master`, but isn\u0027t it exactly what the client and user wanted?\n\nthe fetch was for the `master` branch, and although other branches were included in the response, only the `master` branch was fetched.\n\nthe specification for `ref-prefix` says:\n\u003e  Note that this is purely for optimization; a server MAY show refs not matching the prefix if it chooses, and clients should filter the result themselves.\n\nmeaning that the server can return any arbitrary refs, even those that do not match to requested prefix.\n\nI\u0027d argue, that this implementation is more optimised as it will return only refs that the user is interested in ;)\n\nI got your point, the parameter is called `ref-prefix` and the proposed implementation will not return all matching prefixes when the exact match is present. I\u0027m struggling to find a valid use case where the preference for exact matches would break things for clients. Even in the demonstrated example, we asked for `master` and discarded all of the other master branches, which was what we expected.\n\nYes, this will result in different communication with the git client. But the overall result for the end user will be the same (or even better as the clone and fetch operations will take less time).\n\nIf this is not convincing, then maybe we can get back to the Ib340ff0ff0... or try a different approach.",
      "parentUuid": "8889ebb3_3cddae0b",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e64e041c_c7c6e011",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-10-18T20:27:49Z",
      "side": 1,
      "message": "I don\u0027t know the details why the spec was written this way hence I am not sure if this change would break some use cases.\nMaybe Jonathan Tan, who implemented parts of ls-ref in git can comment on this.",
      "parentUuid": "12f54b68_e2b1719f",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "781fc07b_d2c34bf7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 150123
      },
      "writtenOn": "2023-10-18T20:39:44Z",
      "side": 1,
      "message": "I don\u0027t remember offhand if we ever made a conscious decision to not treat \"/\" specially, but that seems like the obvious thing to do (in the absence of a reason to treat it specially). In particular, \"*\" can be embedded in git refspecs not necessarily after a slash (e.g. \"refs/tags/prefix*:refs/tags/prefix*\"), so to support that use case, it seems natural that the spec (and Git implementation) be like that.\n\nAlso, note that this behavior is specifically tested in Git. See \"fetch supports various ways of have lines\" in t/t5702-protocol-v2.sh in the git.git repo - notice that the line sent to the server is \"ref-prefix refs/tags/prefix\", and what\u0027s returned are prefix1 and prefix2.",
      "parentUuid": "e64e041c_c7c6e011",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c6dc4ea_4cef75ee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-10-20T19:01:21Z",
      "side": 1,
      "message": "tried fetch with refspec using wildcard and this shows why we need to use prefix search also for patterns not ending with \u0027/\u0027:\n\n $ GIT_TRACE_PACKET\u003d1 git fetch origin \n refs/heads/master*:refs/remotes/origin/master*\n 20:57:25.773437 pkt-line.c:85           packet:          git\u003c version 2\n 20:57:25.775897 pkt-line.c:85           packet:          git\u003c version 2\n 20:57:25.775930 pkt-line.c:85           packet:          git\u003c ls-refs\n 20:57:25.775935 pkt-line.c:85           packet:          git\u003c fetch\u003dshallow\n 20:57:25.775940 pkt-line.c:85           packet:          git\u003c server-option\n 20:57:25.775945 pkt-line.c:85           packet:          git\u003c 0000\n 20:57:25.776214 pkt-line.c:85           packet:        fetch\u003c version 2\n 20:57:25.777940 pkt-line.c:85           packet:        fetch\u003c ls-refs\n 20:57:25.777946 pkt-line.c:85           packet:        fetch\u003c fetch\u003dshallow\n 20:57:25.777948 pkt-line.c:85           packet:        fetch\u003c server-option\n 20:57:25.777950 pkt-line.c:85           packet:        fetch\u003c 0000\n 20:57:25.777955 pkt-line.c:85           packet:        fetch\u003e command\u003dls-refs\n 20:57:25.777961 pkt-line.c:85           packet:        fetch\u003e 0001\n 20:57:25.777963 pkt-line.c:85           packet:        fetch\u003e peel\n 20:57:25.777964 pkt-line.c:85           packet:        fetch\u003e symrefs\n 20:57:25.777968 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/heads/master\n 20:57:25.777971 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/tags/\n 20:57:25.777972 pkt-line.c:85           packet:        fetch\u003e 0000\n 20:57:25.777987 pkt-line.c:85           packet:          git\u003c command\u003dls-refs\n ...",
      "parentUuid": "781fc07b_d2c34bf7",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ef659ec_35136f79",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-10-20T19:02:21Z",
      "side": 1,
      "message": "we should add a test for this case",
      "parentUuid": "7c6dc4ea_4cef75ee",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1901e8a7_d9c943ad",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 49
      },
      "writtenOn": "2023-10-20T21:29:18Z",
      "side": 1,
      "message": "I\u0027ve tried it on GitHub:\n```\n$ GIT_TRACE_PACKET\u003d1 git fetch origin \u0027refs/heads/main*:refs/remotes/origin/main*\u0027\n22:22:36.722034 pkt-line.c:85           packet:        fetch\u003c version 2\n22:22:36.724113 pkt-line.c:85           packet:        fetch\u003c agent\u003dgit/github-cbc05ce31956\n22:22:36.724128 pkt-line.c:85           packet:        fetch\u003c ls-refs\u003dunborn\n22:22:36.724134 pkt-line.c:85           packet:        fetch\u003c fetch\u003dshallow wait-for-done filter\n22:22:36.724140 pkt-line.c:85           packet:        fetch\u003c server-option\n22:22:36.724145 pkt-line.c:85           packet:        fetch\u003c object-format\u003dsha1\n22:22:36.724150 pkt-line.c:85           packet:        fetch\u003c 0000\n22:22:36.724158 pkt-line.c:85           packet:        fetch\u003e command\u003dls-refs\n22:22:36.724176 pkt-line.c:85           packet:        fetch\u003e agent\u003dgit/2.42.0\n22:22:36.724183 pkt-line.c:85           packet:        fetch\u003e object-format\u003dsha1\n22:22:36.724187 pkt-line.c:85           packet:        fetch\u003e 0001\n22:22:36.724192 pkt-line.c:85           packet:        fetch\u003e peel\n22:22:36.724197 pkt-line.c:85           packet:        fetch\u003e symrefs\n22:22:36.724234 pkt-line.c:85           packet:        fetch\u003e unborn\n22:22:36.724250 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/heads/main\n22:22:36.724256 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/tags/\n22:22:36.724261 pkt-line.c:85           packet:        fetch\u003e 0000\n22:22:36.883507 pkt-line.c:85           packet:        fetch\u003c af143bc95cd647c70926a28eebd75f07cbf25b0e refs/heads/main\n22:22:36.883606 pkt-line.c:85           packet:        fetch\u003c af143bc95cd647c70926a28eebd75f07cbf25b0e refs/heads/main1\n22:22:36.883631 pkt-line.c:85           packet:        fetch\u003c af143bc95cd647c70926a28eebd75f07cbf25b0e refs/heads/main2\n22:22:36.883642 pkt-line.c:85           packet:        fetch\u003c 0000\n22:22:36.898572 pkt-line.c:85           packet:        fetch\u003e 0000\n```\n\nyou can see that this is GH, as it also includes `agent` in the response ;)\n\nBut going back to `ref-prefix` the client drops the `*` so the server never gets it. I don\u0027t think that we need another test in `UploadPackTest`, as the server doesn\u0027t get the `*`.\n\nAt least from the cgit client perspective, we\u0027re covered.",
      "parentUuid": "5ef659ec_35136f79",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb8b4191_4a8afc4e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-11-04T22:58:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1901e8a7_d9c943ad",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "993da8ec_2a03585b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1541
      },
      "writtenOn": "2023-11-07T22:03:23Z",
      "side": 1,
      "message": "I\u0027m looking at that git.git test Jonathan referenced and I tried adding some more cases to it to understand the expected behavior better. Based on that, I think we should special case a prefix without any `/`. The only \"valid\" (i.e. expected to return any results) ref-prefix without a slash is `HEAD`. If we\u0027re doing `getRefsByPrefix(ALL)` for a __`ls-refs ref-prefix`__ without a slash, I\u0027m pretty sure it\u0027s wrong. And if that\u0027s the source of the performance problem reported in the bug, then we should fix that before making a change like this.\n\n[1] https://github.com/git/git/blob/master/t/t5702-protocol-v2.sh#L576",
      "parentUuid": "cb8b4191_4a8afc4e",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1597c518_58d6e10a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-11-08T00:46:13Z",
      "side": 1,
      "message": "I think we can\u0027t do this without breaking the protocol. The problem is that the protocol handles a refspec like `refs/heads/master:refs/remotes/origin/master` and a similar one using a wildcard at the end of the last segment of the spec `refs/heads/master*:refs/remotes/origin/master*` in the same way. This means on protocol level both these refspecs send a ls-refs command specifying ref-prefixes. And the server (tried with github) sends the same response. Hence we cannot shortcut refspecs which don\u0027t end with a \u0027/\u0027 but always need to do a prefix search.\n\nThis is explicitly mentioned in the protocol spec (https://git-scm.com/docs/protocol-v2/2.23.0#_ls_refs):\n\nls-refs takes in the following arguments:\n\n`symrefs` - In addition to the object pointed by it, show the underlying ref\npointed by it when showing a symbolic ref.\n\n`peel` - Show peeled tags.\n\n`ref-prefix \u003cprefix\u003e` - When specified, only references having a prefix matching one of the provided prefixes are displayed.\n\nHere an example using git 2.42.0 for fetching from a repo which has the branches master, master1, master2, master3 and a couple of tags:\n\nrefspec without wildcard:\n\n```\n$ GIT_TRACE_PACKET\u003d1 git fetch origin refs/heads/master:refs/remotes/origin/master\nfetch\u003c version 2\nfetch\u003c agent\u003dgit/github-cbc05ce31956\nfetch\u003c ls-refs\u003dunborn\nfetch\u003c fetch\u003dshallow wait-for-done filter\nfetch\u003c server-option\nfetch\u003c object-format\u003dsha1\nfetch\u003c 0000\nfetch\u003e command\u003dls-refs\nfetch\u003e agent\u003dgit/2.42.0\nfetch\u003e object-format\u003dsha1\nfetch\u003e 0001\nfetch\u003e peel\nfetch\u003e symrefs\nfetch\u003e unborn\nfetch\u003e ref-prefix refs/heads/master\nfetch\u003e ref-prefix refs/refs/heads/master\nfetch\u003e ref-prefix refs/tags/refs/heads/master\nfetch\u003e ref-prefix refs/heads/refs/heads/master\nfetch\u003e ref-prefix refs/remotes/refs/heads/master\nfetch\u003e ref-prefix refs/remotes/refs/heads/master/HEAD\nfetch\u003e ref-prefix refs/tags/\nfetch\u003e 0000\nfetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master\nfetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master1\nfetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master2\nfetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master3\nfetch\u003c 8a65db4c3b3239b927167e16e5a62f809d96982a refs/tags/1.1.2 peeled:033ccdb24883e06fedaedaee2edb842c53dbdbc2\nfetch\u003c 2a602437d1196f89d93156b8f78ecd9b60bff172 refs/tags/annotated peeled:5bc914e131235a2505c726dc1c0cb459960654b5\nfetch\u003c 5bc914e131235a2505c726dc1c0cb459960654b5 refs/tags/light\nfetch\u003c 099baa4938018fda1c1032e878ecb648fb4f4856 refs/tags/signed peeled:5bc914e131235a2505c726dc1c0cb459960654b5\nfetch\u003c ff929fc60c280f2b179fa7a91f491613b3f18cea refs/tags/tag-to-pin peeled:e2b3854d42066ba1f1ca2e777f882c8fad8f4899\nfetch\u003c 0000\nfetch\u003e 0000\n```\n\nwith wildcard:\n\n```\n$ GIT_TRACE_PACKET\u003d1 git fetch origin refs/heads/master*:refs/remotes/origin/master*\nfetch\u003c version 2\nfetch\u003c agent\u003dgit/github-cbc05ce31956\nfetch\u003c ls-refs\u003dunborn\nfetch\u003c fetch\u003dshallow wait-for-done filter\nfetch\u003c server-option\nfetch\u003c object-format\u003dsha1\nfetch\u003c 0000\nfetch\u003e command\u003dls-refs\nfetch\u003e agent\u003dgit/2.42.0\nfetch\u003e object-format\u003dsha1\nfetch\u003e 0001\nfetch\u003e peel\nfetch\u003e symrefs\nfetch\u003e unborn\nfetch\u003e ref-prefix refs/heads/master\nfetch\u003e ref-prefix refs/tags/\nfetch\u003e 0000\nfetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master\nfetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master1\nfetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master2\nfetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master3\nfetch\u003c 8a65db4c3b3239b927167e16e5a62f809d96982a refs/tags/1.1.2 peeled:033ccdb24883e06fedaedaee2edb842c53dbdbc2\nfetch\u003c 2a602437d1196f89d93156b8f78ecd9b60bff172 refs/tags/annotated peeled:5bc914e131235a2505c726dc1c0cb459960654b5\nfetch\u003c 5bc914e131235a2505c726dc1c0cb459960654b5 refs/tags/light\nfetch\u003c 099baa4938018fda1c1032e878ecb648fb4f4856 refs/tags/signed peeled:5bc914e131235a2505c726dc1c0cb459960654b5\nfetch\u003c ff929fc60c280f2b179fa7a91f491613b3f18cea refs/tags/tag-to-pin peeled:e2b3854d42066ba1f1ca2e777f882c8fad8f4899\nfetch\u003c 0000\nfetch\u003e 0000\n```\n\nInterestingly git sends more ref-prefixes if no wildcard is used:\n\n```\nfetch\u003e ref-prefix refs/heads/master\nfetch\u003e ref-prefix refs/refs/heads/master\nfetch\u003e ref-prefix refs/tags/refs/heads/master\nfetch\u003e ref-prefix refs/heads/refs/heads/master\nfetch\u003e ref-prefix refs/remotes/refs/heads/master\nfetch\u003e ref-prefix refs/remotes/refs/heads/master/HEAD\nfetch\u003e ref-prefix refs/tags/\n```\n\nvs\n\n```\nfetch\u003e ref-prefix refs/heads/master\nfetch\u003e ref-prefix refs/tags/\n```\n\nthe response from the server (https://github.com/msohn/HelloWorld.git) is identical",
      "parentUuid": "993da8ec_2a03585b",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44396bd7_73db07c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-10-17T08:04:23Z",
      "side": 1,
      "message": "rebased onto master to consume fix for downloading eddsa dependency",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}