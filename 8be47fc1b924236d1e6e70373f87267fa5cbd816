{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "43fcdfec_5bcdf881",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-10-17T09:05:47Z",
      "side": 1,
      "message": "I think this is wrong, the protocol spec says the ls-refs command takes the following arguments [1]:\n- symrefs\n- peel\n- ref-prefix \u003cprefix\u003e\n\nThis means assuming that a prefix not ending with \u0027/\u0027 is to be treated as an exact match is a false assumption.\n\ngit searches for all prefixes given in ls-refs command in one pass which is more efficient than the current jgit implementation using one pass per ref prefix\n\n[1] https://git-scm.com/docs/protocol-v2/#_ls_refs",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aca289eb_a05d6de7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 49
      },
      "writtenOn": "2023-10-17T20:10:49Z",
      "side": 1,
      "message": "yes, the specification is not explicit about the format of `\u003cprefix\u003e` values. But observing what is sent by the cgit clinet and knowing the format of refs, we can _safely_ assume that the prefix without \"/\" at the end is a **potential** exact match. If it isn\u0027t we still fall back to `#getRefsByPrefix`.\n\n\u003e git searches for all prefixes given in ls-refs command in one pass which is more efficient than the current jgit implementation using one pass per ref prefix\n\nthis sounds like a much better approach, especially if stream processing is possible (so that all refs are not loaded into memory). But jgit\u0027s `RefDatabase` was not designed in a way that would make it possible.\n\nI can give a try to `RefDatabase.getRefs()` and filter them in one go. That would definitely reduce the IO, as we only load each ref once, but we still need to do N comparisons.\n\nOr we can go back to the proposal in the Ib340ff0ff0.\n\nWDYT?",
      "parentUuid": "43fcdfec_5bcdf881",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8889ebb3_3cddae0b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-10-17T20:50:49Z",
      "side": 1,
      "message": "I tried with a test repo\n- clone the repo https://github.com/msohn/HelloWorld\n- fetching master yields\n  `$ GIT_TRACE_PACKET\u003d1 git fetch origin master\n  22:42:42.899062 pkt-line.c:85           packet:        fetch\u003c version 2\n  22:42:42.901426 pkt-line.c:85           packet:        fetch\u003c agent\u003dgit/github-cbc05ce31956\n  22:42:42.901443 pkt-line.c:85           packet:        fetch\u003c ls-refs\u003dunborn\n  22:42:42.901450 pkt-line.c:85           packet:        fetch\u003c fetch\u003dshallow wait-for-done filter\n  22:42:42.901456 pkt-line.c:85           packet:        fetch\u003c server-option\n  22:42:42.901462 pkt-line.c:85           packet:        fetch\u003c object-format\u003dsha1\n  22:42:42.901468 pkt-line.c:85           packet:        fetch\u003c 0000\n  22:42:42.901480 pkt-line.c:85           packet:        fetch\u003e command\u003dls-refs\n  22:42:42.901505 pkt-line.c:85           packet:        fetch\u003e agent\u003dgit/2.42.0\n  22:42:42.901514 pkt-line.c:85           packet:        fetch\u003e object-format\u003dsha1\n  22:42:42.901519 pkt-line.c:85           packet:        fetch\u003e 0001\n  22:42:42.901524 pkt-line.c:85           packet:        fetch\u003e peel\n  22:42:42.901530 pkt-line.c:85           packet:        fetch\u003e symrefs\n  22:42:42.901536 pkt-line.c:85           packet:        fetch\u003e unborn\n  22:42:42.902135 pkt-line.c:85           packet:        fetch\u003e ref-prefix master\n  22:42:42.902157 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/master\n  22:42:42.902163 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/tags/master\n  22:42:42.902168 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/heads/master\n  22:42:42.902174 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/remotes/master\n  22:42:42.902179 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/remotes/master/HEAD\n  22:42:42.902184 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/tags/\n  22:42:42.902195 pkt-line.c:85           packet:        fetch\u003e 0000\n  22:42:43.065645 pkt-line.c:85           packet:        fetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master\n  22:42:43.065820 pkt-line.c:85           packet:        fetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master1\n  22:42:43.065836 pkt-line.c:85           packet:        fetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master2\n  22:42:43.065848 pkt-line.c:85           packet:        fetch\u003c aae7a87ba960aa29c272b8539f63c079ae341cd8 refs/heads/master3\n  22:42:43.065886 pkt-line.c:85           packet:        fetch\u003c 8a65db4c3b3239b927167e16e5a62f809d96982a refs/tags/1.1.2 peeled:033ccdb24883e06fedaedaee2edb842c53dbdbc2\n  22:42:43.065992 pkt-line.c:85           packet:        fetch\u003c 2a602437d1196f89d93156b8f78ecd9b60bff172 refs/tags/annotated peeled:5bc914e131235a2505c726dc1c0cb459960654b5\n  22:42:43.066062 pkt-line.c:85           packet:        fetch\u003c 5bc914e131235a2505c726dc1c0cb459960654b5 refs/tags/light\n  22:42:43.066079 pkt-line.c:85           packet:        fetch\u003c 099baa4938018fda1c1032e878ecb648fb4f4856 refs/tags/signed peeled:5bc914e131235a2505c726dc1c0cb459960654b5\n  22:42:43.066204 pkt-line.c:85           packet:        fetch\u003c ff929fc60c280f2b179fa7a91f491613b3f18cea refs/tags/tag-to-pin peeled:e2b3854d42066ba1f1ca2e777f882c8fad8f4899\n  22:42:43.066219 pkt-line.c:85           packet:        fetch\u003c 0000\n  From github.com:msohn/HelloWorld\n  * branch            master     -\u003e FETCH_HEAD\n  22:42:43.089090 pkt-line.c:85           packet:        fetch\u003e 0000 \n\nThis shows that github (AFAIK they use libgit2) returns the branches\n- refs/heads/master\n- refs/heads/master1\n- refs/heads/master2\n- refs/heads/master3\n\nI think with your change jgit only returns the branch refs/heads/master",
      "parentUuid": "aca289eb_a05d6de7",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12f54b68_e2b1719f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 49
      },
      "writtenOn": "2023-10-17T21:44:17Z",
      "side": 1,
      "message": "yes, it will only return `master`, but isn\u0027t it exactly what the client and user wanted?\n\nthe fetch was for the `master` branch, and although other branches were included in the response, only the `master` branch was fetched.\n\nthe specification for `ref-prefix` says:\n\u003e  Note that this is purely for optimization; a server MAY show refs not matching the prefix if it chooses, and clients should filter the result themselves.\n\nmeaning that the server can return any arbitrary refs, even those that do not match to requested prefix.\n\nI\u0027d argue, that this implementation is more optimised as it will return only refs that the user is interested in ;)\n\nI got your point, the parameter is called `ref-prefix` and the proposed implementation will not return all matching prefixes when the exact match is present. I\u0027m struggling to find a valid use case where the preference for exact matches would break things for clients. Even in the demonstrated example, we asked for `master` and discarded all of the other master branches, which was what we expected.\n\nYes, this will result in different communication with the git client. But the overall result for the end user will be the same (or even better as the clone and fetch operations will take less time).\n\nIf this is not convincing, then maybe we can get back to the Ib340ff0ff0... or try a different approach.",
      "parentUuid": "8889ebb3_3cddae0b",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e64e041c_c7c6e011",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-10-18T20:27:49Z",
      "side": 1,
      "message": "I don\u0027t know the details why the spec was written this way hence I am not sure if this change would break some use cases.\nMaybe Jonathan Tan, who implemented parts of ls-ref in git can comment on this.",
      "parentUuid": "12f54b68_e2b1719f",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "781fc07b_d2c34bf7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 150123
      },
      "writtenOn": "2023-10-18T20:39:44Z",
      "side": 1,
      "message": "I don\u0027t remember offhand if we ever made a conscious decision to not treat \"/\" specially, but that seems like the obvious thing to do (in the absence of a reason to treat it specially). In particular, \"*\" can be embedded in git refspecs not necessarily after a slash (e.g. \"refs/tags/prefix*:refs/tags/prefix*\"), so to support that use case, it seems natural that the spec (and Git implementation) be like that.\n\nAlso, note that this behavior is specifically tested in Git. See \"fetch supports various ways of have lines\" in t/t5702-protocol-v2.sh in the git.git repo - notice that the line sent to the server is \"ref-prefix refs/tags/prefix\", and what\u0027s returned are prefix1 and prefix2.",
      "parentUuid": "e64e041c_c7c6e011",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c6dc4ea_4cef75ee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-10-20T19:01:21Z",
      "side": 1,
      "message": "tried fetch with refspec using wildcard and this shows why we need to use prefix search also for patterns not ending with \u0027/\u0027:\n\n $ GIT_TRACE_PACKET\u003d1 git fetch origin \n refs/heads/master*:refs/remotes/origin/master*\n 20:57:25.773437 pkt-line.c:85           packet:          git\u003c version 2\n 20:57:25.775897 pkt-line.c:85           packet:          git\u003c version 2\n 20:57:25.775930 pkt-line.c:85           packet:          git\u003c ls-refs\n 20:57:25.775935 pkt-line.c:85           packet:          git\u003c fetch\u003dshallow\n 20:57:25.775940 pkt-line.c:85           packet:          git\u003c server-option\n 20:57:25.775945 pkt-line.c:85           packet:          git\u003c 0000\n 20:57:25.776214 pkt-line.c:85           packet:        fetch\u003c version 2\n 20:57:25.777940 pkt-line.c:85           packet:        fetch\u003c ls-refs\n 20:57:25.777946 pkt-line.c:85           packet:        fetch\u003c fetch\u003dshallow\n 20:57:25.777948 pkt-line.c:85           packet:        fetch\u003c server-option\n 20:57:25.777950 pkt-line.c:85           packet:        fetch\u003c 0000\n 20:57:25.777955 pkt-line.c:85           packet:        fetch\u003e command\u003dls-refs\n 20:57:25.777961 pkt-line.c:85           packet:        fetch\u003e 0001\n 20:57:25.777963 pkt-line.c:85           packet:        fetch\u003e peel\n 20:57:25.777964 pkt-line.c:85           packet:        fetch\u003e symrefs\n 20:57:25.777968 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/heads/master\n 20:57:25.777971 pkt-line.c:85           packet:        fetch\u003e ref-prefix refs/tags/\n 20:57:25.777972 pkt-line.c:85           packet:        fetch\u003e 0000\n 20:57:25.777987 pkt-line.c:85           packet:          git\u003c command\u003dls-refs\n ...",
      "parentUuid": "781fc07b_d2c34bf7",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ef659ec_35136f79",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-10-20T19:02:21Z",
      "side": 1,
      "message": "we should add a test for this case",
      "parentUuid": "7c6dc4ea_4cef75ee",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44396bd7_73db07c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-10-17T08:04:23Z",
      "side": 1,
      "message": "rebased onto master to consume fix for downloading eddsa dependency",
      "revId": "8be47fc1b924236d1e6e70373f87267fa5cbd816",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}