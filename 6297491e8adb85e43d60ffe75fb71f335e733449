{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9e243d21_3041d664",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 227701
      },
      "writtenOn": "2022-08-17T06:16:39Z",
      "side": 1,
      "message": "trigger build",
      "revId": "6297491e8adb85e43d60ffe75fb71f335e733449",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28792c2c_4ca4ca6c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-09-05T22:19:56Z",
      "side": 1,
      "message": "this change and Ie127cb710d004079e9f53a5802130afdb49a7de1 break 16 egit tests, see https://ci.eclipse.org/egit/job/egit-stable.gerrit/352/#showFailuresLink\n\nreverting these two jgit changes fixes this\n\nall tests fail with a similar stacktrace failing when org.eclipse.jgit.revwalk.RevCommitList#fillTo tries to cast a RevCommit to RevCommitList\u0027s type parameter E.\n\nHere one example:\n\njava.lang.ClassCastException: class org.eclipse.jgit.revwalk.FilteredRevCommit cannot be cast to class org.eclipse.egit.core.internal.storage.KidCommit (org.eclipse.jgit.revwalk.FilteredRevCommit is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @472ae60; org.eclipse.egit.core.internal.storage.KidCommit is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @3bfb0e27)\n\tat org.eclipse.egit.core.internal.storage.KidCommitList.enter(KidCommitList.java:1)\n\tat org.eclipse.jgit.revwalk.RevCommitList.fillTo(RevCommitList.java:279)\n\tat org.eclipse.egit.core.internal.storage.GitFileHistory.buildRevisions(GitFileHistory.java:141)\n\tat org.eclipse.egit.core.internal.storage.GitFileHistory.\u003cinit\u003e(GitFileHistory.java:91)\n\tat org.eclipse.egit.core.internal.storage.GitFileHistoryProvider.getFileHistoryFor(GitFileHistoryProvider.java:31)\n\tat org.eclipse.egit.core.storage.GitBlobStorageTest.testGitFileHistorySingleProjectOk(GitBlobStorageTest.java:101)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:93)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)\n\tat org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:74)\n\tat org.eclipse.pde.internal.junit.runtime.CoreTestApplication.start(CoreTestApplication.java:28)\n\tat org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)\n\tat org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)\n\tat org.eclipse.equinox.launcher.Main.run(Main.java:1467)\n\tat org.eclipse.equinox.launcher.Main.main(Main.java:1440)\n\n",
      "revId": "6297491e8adb85e43d60ffe75fb71f335e733449",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "222e9790_00e5f59f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RewriteGenerator.java",
        "patchSetId": 21
      },
      "lineNbr": 43,
      "author": {
        "id": 256613
      },
      "writtenOn": "2022-08-17T23:40:04Z",
      "side": 1,
      "message": "This map keeps all commits and prevent them from GCing. Can we clean it up once we produces all commits?\n\n(Actually I believe we should produce parents before children, so once we produce a commit we can remove it from the map)",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 68
      },
      "revId": "6297491e8adb85e43d60ffe75fb71f335e733449",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48b0d78d_00bca2ce",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RewriteGenerator.java",
        "patchSetId": 21
      },
      "lineNbr": 93,
      "author": {
        "id": 256613
      },
      "writtenOn": "2022-08-17T23:40:04Z",
      "side": 1,
      "message": "This seems to be broken as if oldp is a normal revCommit you will transform it and return transformed one which is not equal to oldp",
      "range": {
        "startLine": 93,
        "startChar": 7,
        "endLine": 93,
        "endChar": 19
      },
      "revId": "6297491e8adb85e43d60ffe75fb71f335e733449",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03dd9d29_da4b0fa8",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RewriteGenerator.java",
        "patchSetId": 21
      },
      "lineNbr": 138,
      "author": {
        "id": 256613
      },
      "writtenOn": "2022-08-17T23:40:04Z",
      "side": 1,
      "message": "Could you please add a test which is specific to this class (so it won\u0027t be removed with other functionality) and which will test existence of each transform call?",
      "range": {
        "startLine": 138,
        "startChar": 7,
        "endLine": 138,
        "endChar": 16
      },
      "revId": "6297491e8adb85e43d60ffe75fb71f335e733449",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ba02c70_ee79526e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RewriteGenerator.java",
        "patchSetId": 21
      },
      "lineNbr": 168,
      "author": {
        "id": 256613
      },
      "writtenOn": "2022-08-17T23:40:04Z",
      "side": 1,
      "message": "transforms in this method applied to all parents in the chain including one which we wouldn\u0027t keep. So we will in fact copy all skipped commits and then discard them (but they will be in transformedCommits collection!). Is it possible to move transformation to lines 143, 150, 157, so only commits which we actually produce would be transformed?",
      "range": {
        "startLine": 168,
        "startChar": 7,
        "endLine": 168,
        "endChar": 16
      },
      "revId": "6297491e8adb85e43d60ffe75fb71f335e733449",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}