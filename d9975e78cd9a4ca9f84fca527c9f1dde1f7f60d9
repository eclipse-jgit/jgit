{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "db469aef_26ef1ad6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-07-26T11:58:39Z",
      "side": 1,
      "message": "I just skim through it. Please split this change in smaller pieces, easier to review.\n\nKeep the existing field as \"generation\" as use \"commitTimestampOffset\" (or something similar) to the new field. Callers are the ones deciding what to use to order the commits.",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ae83712_532c7949",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 307612
      },
      "writtenOn": "2023-07-26T19:18:22Z",
      "side": 1,
      "message": "\u003e\u003ePlease split this change in smaller pieces,\n\nSuggestion? When modifying the loader, I have to modify the Builder and Commit Graph class since the loader depends on them for the read() output. Each of them also have their own test file.",
      "parentUuid": "db469aef_26ef1ad6",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9366d565_ff49c9f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-07-26T22:58:30Z",
      "side": 1,
      "message": "Undo the renaming of generation (then this change touches less files)\n\nThen maybe you could have these changes:\n1. Add the new methods in the interface and CGV1 class (builder sets them to null), so we can discuss the API there\n2. Plug the builder with its test\n3. Make the loader to invoke the builder new methods.",
      "parentUuid": "7ae83712_532c7949",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9d63d35_98e2565b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraph.java",
        "patchSetId": 7
      },
      "lineNbr": 117,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-07-26T11:58:39Z",
      "side": 1,
      "message": "I don\u0027t think this interface can promise any performance. It depends on the data structure used by implementors.",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b80f3f9c_c498f70e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraph.java",
        "patchSetId": 7
      },
      "lineNbr": 117,
      "author": {
        "id": 307612
      },
      "writtenOn": "2023-07-26T19:18:22Z",
      "side": 1,
      "message": "this is copied from `getCommitData(int graphPos);` method. Are you suggesting changing the getCommitData method javadoc as well?",
      "parentUuid": "f9d63d35_98e2565b",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8a065b0_6af4b29e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraph.java",
        "patchSetId": 7
      },
      "lineNbr": 117,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-07-26T22:58:30Z",
      "side": 1,
      "message": "No, just remove it from this javadoc.",
      "parentUuid": "b80f3f9c_c498f70e",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c0655ec_892bd7dc",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraph.java",
        "patchSetId": 7
      },
      "lineNbr": 124,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-07-26T11:58:39Z",
      "side": 1,
      "message": "I don\u0027t understand these two new methods. How am I supposed to use this interface?\n\nif generationVersion is 2 then I can call getGenerationData? otherwise I should use cg#getCommitData()#getGeneration()?\n\nI suspect everything is easier if instead of \"generation v2\" we call this \"fixed commit timestamp\" or \"commit timestamp offset\". It tells what the data is and caller can decide to use it as a generation number or not (note that \"commitData#getGeneration\" IS a generation number).",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5ec0f31_4e3521b1",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraph.java",
        "patchSetId": 7
      },
      "lineNbr": 124,
      "author": {
        "id": 307612
      },
      "writtenOn": "2023-07-26T19:18:22Z",
      "side": 1,
      "message": "\u003e\u003eif generationVersion is 2 then I can call getGenerationData? otherwise I should use cg#getCommitData()#getGeneration()?\n\nyes. if generationVersion is 1, then getGeneration is not supported.\n\n\u003e\u003eI suspect everything is easier if instead of \"generation v2\" we call this \"fixed commit timestamp\" or \"commit timestamp offset\". It tells what the data is and caller can decide to use it as a generation number or not (note that \"commitData#getGeneration\" IS a generation number).\n\nthe naming is done to follow the naming convention of getCommitData() which means get data from the CommitDataChunk. Thus to getGenerationData() is to get data from the GenerationDataChunk.",
      "parentUuid": "5c0655ec_892bd7dc",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44c845c9_cc109e54",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraph.java",
        "patchSetId": 7
      },
      "lineNbr": 124,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-07-26T22:58:30Z",
      "side": 1,
      "message": "\u003e yes. if generationVersion is 1, then getGeneration is not supported.\n\nThen this method should be boolean hasFixedCommitTimestamps(), so the caller knows if the calls to getCommitTimestampOffset() return valid values.\n\nThe int is confusing. If one day the value is 3... what does it mean? is v2 also generated? Also, the compiler cannot help callers to detect that unexpected value.",
      "parentUuid": "e5ec0f31_4e3521b1",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "689a4767_a1c37848",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraph.java",
        "patchSetId": 7
      },
      "lineNbr": 164,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-07-26T11:58:39Z",
      "side": 1,
      "message": "Leave this as generation, because it is a generation. The new field is a \"commit timestamp offset\", so it should be named like that.",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4e4bfaf_6c659fdc",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraph.java",
        "patchSetId": 7
      },
      "lineNbr": 164,
      "author": {
        "id": 307612
      },
      "writtenOn": "2023-07-26T19:18:22Z",
      "side": 1,
      "message": "in Cgit, generation number v1 is actually called topo_levels, generation number v2 is being called generation. I think we should follow the existing convention\n\nhttps://github.com/git/git/blob/master/commit-graph.c#L1538\nhttps://github.com/git/git/blob/master/commit-graph.c#L1571",
      "parentUuid": "689a4767_a1c37848",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99800004_6321592a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraph.java",
        "patchSetId": 7
      },
      "lineNbr": 164,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-07-26T22:58:30Z",
      "side": 1,
      "message": "We haven\u0027t follow cgit code to implement this, and there is no need to if we can make it clearer.\n\nGeneration v1 is truly a generation number (order of the commit) but \"generation v2\" is an offset of the commit timestamp, that you can use to order the commits. That is obvious if we let the old field as \"generation\" and the new one as \"commitTimestampOffset\".",
      "parentUuid": "d4e4bfaf_6c659fdc",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8b2f945_85f43a8a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraph.java",
        "patchSetId": 7
      },
      "lineNbr": 176,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-07-26T11:58:39Z",
      "side": 1,
      "message": "Why an extra interface? Could this just return the value?",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5540ed07_9f482261",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraph.java",
        "patchSetId": 7
      },
      "lineNbr": 176,
      "author": {
        "id": 307612
      },
      "writtenOn": "2023-07-26T19:18:22Z",
      "side": 1,
      "message": "to stay consistent with existing convention of the file that each data chunk gets it own interface.",
      "parentUuid": "b8b2f945_85f43a8a",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0bb75c90_dd5e0300",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraph.java",
        "patchSetId": 7
      },
      "lineNbr": 176,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-07-26T22:58:30Z",
      "side": 1,
      "message": "The interface was because the CommitData chunk had multiple fields. That doesn\u0027t apply here.",
      "parentUuid": "5540ed07_9f482261",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4bb5dab_91d8af5b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphV1.java",
        "patchSetId": 7
      },
      "lineNbr": 31,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-07-26T22:58:30Z",
      "side": 1,
      "message": "This parameter is error-prone: the caller can use an invalid/inconsistent value here and nothing catches the error.\n\nWe can just remove it and do:\n\nboolean hasCommitTimestampOffsets() {\n  return generationData !\u003d null;\n}",
      "range": {
        "startLine": 31,
        "startChar": 15,
        "endLine": 31,
        "endChar": 37
      },
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d00a691c_601891f0",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphV1.java",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-07-26T22:58:30Z",
      "side": 1,
      "message": "AFAIK this is used only by the builder? in that case define only one constructor with a @nullable parameter.",
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce383123_22e42f83",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/GraphGenerationData.java",
        "patchSetId": 7
      },
      "lineNbr": 25,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-07-26T22:58:30Z",
      "side": 1,
      "message": "GraphCommitTimestampOffsetData\n\nSo it is more descriptive about the actual data. The fact that we use it as a \"generation\" is a different issue.",
      "range": {
        "startLine": 25,
        "startChar": 13,
        "endLine": 25,
        "endChar": 32
      },
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}