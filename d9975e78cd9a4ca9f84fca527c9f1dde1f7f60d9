{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "98a51485_97674e94",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 5
      },
      "lineNbr": 555,
      "author": {
        "id": 304466
      },
      "writtenOn": "2023-07-19T02:58:31Z",
      "side": 0,
      "message": "As I said above, only need to change \"int\" to \"long\" here.\n\nThere also has an advantage that the higher version of JGit can also use the lower version of the generation number.",
      "range": {
        "startLine": 555,
        "startChar": 3,
        "endLine": 555,
        "endChar": 39
      },
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d421de3_01a496fc",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 5
      },
      "lineNbr": 555,
      "author": {
        "id": 307612
      },
      "writtenOn": "2023-07-19T20:33:06Z",
      "side": 0,
      "message": "not sure if i follow, are you saying that, in the event of having multiple commit graphs, we default to using topo when calling `getGeneration()`? i.e. store decision logic within the `getGeneration` method itself?",
      "parentUuid": "98a51485_97674e94",
      "range": {
        "startLine": 555,
        "startChar": 3,
        "endLine": 555,
        "endChar": 39
      },
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26942fa6_65472a0d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 5
      },
      "lineNbr": 555,
      "author": {
        "id": 304466
      },
      "writtenOn": "2023-07-20T02:14:59Z",
      "side": 0,
      "message": "What I mean is that if there is only one #getGeneration() instead of \"#getGenerationV1() and #getGenerationV2()\", we only need to change the \"int\" to \"long\" here. Such as:\n    long cutoff \u003d needle.getGeneration();\n\n\u003e There also has an advantage that the higher version of JGit can also use the lower version of the generation number.\n\nThis sentence means that once JGit submit this change, JGit will not be able to use the generation number of the v1 version. \nBut for cgit, even if we don\u0027t generate the generation number of the v2 version, we can still use the v1 version, and the method can still be optimized.\n\nBut I just realized that I seem to understand something wrong. This change use both v1 and v2 versions of the generation number, then maybe it won\u0027t be a problem. Then the code will be more complicated.\nOne more thing, the commit-graph of the repository operated by JGit may also be generated by cgit (like \"git gc\").\n\nWe can continue discuss this issue after the previous patches are merged.",
      "parentUuid": "8d421de3_01a496fc",
      "range": {
        "startLine": 555,
        "startChar": 3,
        "endLine": 555,
        "endChar": 39
      },
      "revId": "d9975e78cd9a4ca9f84fca527c9f1dde1f7f60d9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}