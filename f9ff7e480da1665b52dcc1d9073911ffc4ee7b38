{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "65b99853_d44ccb12",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 150123
      },
      "writtenOn": "2023-05-10T23:02:21Z",
      "side": 1,
      "message": "In this version, changed-path filters are written unconditionally if commit graphs are written; in other words, there is no configuration option. I\u0027m not sure myself if there should be a configuration option - I\u0027m leaning towards including one, but am open to opinions.",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "094c35b0_cc91c9a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 304466
      },
      "writtenOn": "2023-05-11T02:50:44Z",
      "side": 1,
      "message": "\u003e In this version, changed-path filters are written unconditionally if commit graphs are written; in other words, there is no configuration option. I\u0027m not sure myself if there should be a configuration option - I\u0027m leaning towards including one, but am open to opinions.\n\nAFAIK, cgit does not have such a configuration (commitgraph.computeChangedPaths), so I agree with you.\n\nIf users want to generate a commitgraph without bloomfilter, they can choose to call a lower-level interface.\n\nMaybe we can implement a method like CommitGraphWriter#setComputeChangedPaths(boolean)?\nIn this way, we can implement \"jgit commit-graph write --changed-paths\" and CommitGraphCommand based on this in the future.",
      "parentUuid": "65b99853_d44ccb12",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6997cf34_726b5a72",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 304466
      },
      "writtenOn": "2023-05-11T02:50:44Z",
      "side": 1,
      "message": "Thanks for your work!\n\nRegards,\nKyle",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "559df9e2_d2330712",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriterTest.java",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-05-11T21:35:33Z",
      "side": 1,
      "message": "Should we assert here for the new blocks? (Same in following test)",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f7cf149_ce122ccf",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriterTest.java",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 150123
      },
      "writtenOn": "2023-05-23T17:33:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "559df9e2_d2330712",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46a90ac6_1a157fa3",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriterTest.java",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-05-11T21:35:33Z",
      "side": 1,
      "message": "This would be a useful debug tool. I see we have e.g.\norg.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/debug/WriteReftable.java\n\nMaybe this main would fit there.\n\nOptional (it could be a TODO)",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ca0249c_c00bd973",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriterTest.java",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 150123
      },
      "writtenOn": "2023-05-23T17:33:09Z",
      "side": 1,
      "message": "Ah, thanks for the pointer to that. It\u0027s much easier to explain if I follow your suggestion, so I did it.",
      "parentUuid": "46a90ac6_1a157fa3",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "745889aa_2444c7d3",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriterTest.java",
        "patchSetId": 2
      },
      "lineNbr": 273,
      "author": {
        "id": 307612
      },
      "writtenOn": "2023-05-19T19:18:33Z",
      "side": 1,
      "message": "would be helpful for future reader to make the expected 0 or -1 into variables with easy to understanding namings.",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d2b32b8_5e9c45d5",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriterTest.java",
        "patchSetId": 2
      },
      "lineNbr": 273,
      "author": {
        "id": 150123
      },
      "writtenOn": "2023-05-23T17:33:09Z",
      "side": 1,
      "message": "This is raw output from the bloom filter, so I don\u0027t think the user would expect this to have any human-readable meaning.",
      "parentUuid": "745889aa_2444c7d3",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2635821_02a6419e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/ChangedPathFilter.java",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 304466
      },
      "writtenOn": "2023-05-11T02:50:44Z",
      "side": 1,
      "message": "I noticed that this MurmurHash3 class is imported from commons-codec.\nThis is fine, but there is one thing needs attention:\n\nIt couldn\u0027t pass the test case in [1], MurmurHash3Test#testUnseededString3() and MurrmurHash3Test#testUnseededString4() would be failed.\n\nThis is actually a big problem, it means that the bloomFilter generated by JGit cannot be compatible with CGit when the user\u0027s repository paths contain these characters (byte over than 0xff).\n\nI also made such a mistake at the beginning, and after some investigation, I found the reason: Cgit did\u0027t mask the int with 0xff, which made the result of the hash different from ours.\n\nLater I pushed a patch to fix it, you can refer to [2].\n\nI think it\u0027s better to ensure compatibility with cgit without modifying the source code. If you have any good suggestions?\n\n\n[1] https://git.eclipse.org/r/c/jgit/jgit/+/189100/3/org.eclipse.jgit.test/tst/org/eclipse/jgit/util/MurmurHash3Test.java\n[2] https://git.eclipse.org/r/c/jgit/jgit/+/189100/1..2/org.eclipse.jgit/src/org/eclipse/jgit/util/MurmurHash3.java#121",
      "range": {
        "startLine": 61,
        "startChar": 14,
        "endLine": 61,
        "endChar": 36
      },
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3d20bde_f45967bf",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/ChangedPathFilter.java",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 304466
      },
      "writtenOn": "2023-05-11T03:03:54Z",
      "side": 1,
      "message": "\u003e I think it\u0027s better to ensure compatibility with cgit without modifying the source code. If you have any good suggestions?\n\nsource code -\u003e I mean source code of dependency(commons-codec).\nOtherwise, we can only implement a customized murmur3hash.",
      "parentUuid": "a2635821_02a6419e",
      "range": {
        "startLine": 61,
        "startChar": 14,
        "endLine": 61,
        "endChar": 36
      },
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91bb473b_69aa38a5",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/ChangedPathFilter.java",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 307612
      },
      "writtenOn": "2023-05-11T19:19:31Z",
      "side": 1,
      "message": "interesting. looks like cgit maintain their own murmur3 method. do you happen to know the reason why cgit chose to do so? there\u0027s no external library in c for murmur?",
      "parentUuid": "c3d20bde_f45967bf",
      "range": {
        "startLine": 61,
        "startChar": 14,
        "endLine": 61,
        "endChar": 36
      },
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebe3c475_a551e169",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/ChangedPathFilter.java",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 150123
      },
      "writtenOn": "2023-05-11T22:47:36Z",
      "side": 1,
      "message": "I\u0027ll address the other comments later but will reply to this one first.\n\n\u003e Cgit did\u0027t mask the int with 0xff, which made the result of the hash different from ours.\n\nI think the intention was that the widening cast \"(uint32_t)data[4*i]\" in murmur3_seeded() in C Git doesn\u0027t cause sign extension to happen, which is true if char is unsigned, but not when char is signed (whether char is unsigned or signed can be controlled by a compiler flag). So I would say that it\u0027s not that C Git didn\u0027t mask it, but that it didn\u0027t explicitly declare that data is unsigned.\n\nI have brought this matter up to the C Git developer mailing list:\nhttps://lore.kernel.org/git/20230511224101.972442-1-jonathantanmy@google.com/\n\nLet\u0027s see what they say before proceeding with this.\n\n\u003e looks like cgit maintain their own murmur3 method. do you happen to know the reason why cgit chose to do so? there\u0027s no external library in c for murmur?\n\nI don\u0027t know offhand, but in C, it\u0027s harder to introduce external dependencies, which might be why the original author went with writing their own.",
      "parentUuid": "91bb473b_69aa38a5",
      "range": {
        "startLine": 61,
        "startChar": 14,
        "endLine": 61,
        "endChar": 36
      },
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea42b5c5_9a85c47e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/ChangedPathFilter.java",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 307612
      },
      "writtenOn": "2023-05-12T15:43:42Z",
      "side": 1,
      "message": "looks like Junio and Taylor are open to correcting the c git implementation to match the current implementation in this CL, i assume we can proceed with this CL and let c git do their own correction right?",
      "parentUuid": "ebe3c475_a551e169",
      "range": {
        "startLine": 61,
        "startChar": 14,
        "endLine": 61,
        "endChar": 36
      },
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d1613fe_104bee58",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/ChangedPathFilter.java",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 150123
      },
      "writtenOn": "2023-05-23T17:33:09Z",
      "side": 1,
      "message": "I just sent out patches to bump the version to 2: https://lore.kernel.org/git/cover.1684790529.git.jonathantanmy@google.com/\n\nIn the meantime I\u0027ll work on this change as if the patches were already merged, but won\u0027t merge this change until the patches are merged.",
      "parentUuid": "ea42b5c5_9a85c47e",
      "range": {
        "startLine": 61,
        "startChar": 14,
        "endLine": 61,
        "endChar": 36
      },
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3291eeb2_70a1ac28",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-05-11T21:35:33Z",
      "side": 1,
      "message": "What we did with generation numbers was to write here just the chunck header and postpone the calculation until needed. Then the data has a more limited scope and life-span.\n\nIt seems this won\u0027t work for bloom filters because we cannot precalculate the size of the data chunk, is it really so? (double checking)",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c70277b_f8674f51",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 150123
      },
      "writtenOn": "2023-05-23T17:33:09Z",
      "side": 1,
      "message": "Yes, exactly. We can\u0027t precalculate because each commit\u0027s bloom filter might have a different length.",
      "parentUuid": "3291eeb2_70a1ac28",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bfaf0b1_5c61227c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 307612
      },
      "writtenOn": "2023-05-11T19:19:31Z",
      "side": 1,
      "message": "so right now, we are always creating chunks for bloom filters, is there a need for provide an enable to turn the generation off? afaik, the bloom filter data chunk could be the largest chunk by far (if there\u0027s a lot of changed paths).",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e46d5bb_69af6429",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 150123
      },
      "writtenOn": "2023-05-23T17:33:09Z",
      "side": 1,
      "message": "I see that Ronald made a patch on top of this to turn it off - we can review that functionality there.",
      "parentUuid": "8bfaf0b1_5c61227c",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff1be7df_6346eb72",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 127,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-05-11T21:35:33Z",
      "side": 1,
      "message": "Optional is not recommended for parameters. Do we really need to receive these chunks as parameter? they could be calculated inside this function IIUC.",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62944977_373e9c75",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 127,
      "author": {
        "id": 150123
      },
      "writtenOn": "2023-05-23T17:33:09Z",
      "side": 1,
      "message": "Ah good point. I\u0027ll calculate them in the function.",
      "parentUuid": "ff1be7df_6346eb72",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb266cfb_61189901",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-05-11T21:35:33Z",
      "side": 1,
      "message": "could we just add the new chunks as extra cases? The bloom filter data case would look slightly different but it is ok, it makes obvious that this chunk writes precalculated data. Future readers can go back to see where it was populated.\n\ncase CHUNK_ID_BLOOM_FILTER_DATA:\n    // Bloom filter data was calculated on chuck header creation\n    chunk.data.get().writeTo(out)\n    \n    \nMaybe also throwing an IllegalStateException if the options is empty?",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f635f9a0_77b4aaf4",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 176,
      "author": {
        "id": 150123
      },
      "writtenOn": "2023-05-23T17:33:09Z",
      "side": 1,
      "message": "By \"options is empty\" do you mean \"data is empty\"? If yes, that seems reasonable so OK, I\u0027ve done it.",
      "parentUuid": "eb266cfb_61189901",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eaca24e_b0adcb04",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 417,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-05-11T21:35:33Z",
      "side": 1,
      "message": "Optional: Could we do a ChunkHeaderWithData that inherits ChunkHeader (adds the data field and calls super(id, data.size)? \n\nPros:\nIt makes clearer that ChunkHeader is just a pair of (id,size) and there is the special case of \"this chunk has also its data ready\".\n\nCons:\nNew concept in this class to learn. Overengineering?\n\nOn the fence. Again, optional.",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51b3dda6_8dbd65dc",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/CommitGraphWriter.java",
        "patchSetId": 2
      },
      "lineNbr": 417,
      "author": {
        "id": 150123
      },
      "writtenOn": "2023-05-23T17:33:09Z",
      "side": 1,
      "message": "Hmm...inheritance sounds overkill here so since you marked this as optional, I\u0027ll skip this suggestion.",
      "parentUuid": "9eaca24e_b0adcb04",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98c718d5_127f84f0",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/GraphCommits.java",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 307612
      },
      "writtenOn": "2023-05-19T19:18:33Z",
      "side": 1,
      "message": "optional: it\u0027s a bit odd that GraphCommits as class meant to be holding the commits for the commitGraphWriter is also holding the objectReader for the writer to use later. I\u0027m starting to think perhaps it\u0027s better for the writer to hold the reference to the walk similar to the packWriter.preparepack, even having the GraphCommits as a field created within the commitGraphWriter.",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b6ffc35_2d625e6b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/commitgraph/GraphCommits.java",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 150123
      },
      "writtenOn": "2023-05-23T17:33:09Z",
      "side": 1,
      "message": "You\u0027re probably right, but CommitGraphWriter is a public API, so callers already expect it to be instantiable without passing an object reader. If we ever write a new API, we\u0027ll probably do as you suggest.",
      "parentUuid": "98c718d5_127f84f0",
      "revId": "f9ff7e480da1665b52dcc1d9073911ffc4ee7b38",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}