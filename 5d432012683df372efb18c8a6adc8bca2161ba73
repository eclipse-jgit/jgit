{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d6e93825_580eed7a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2024-04-11T19:34:20Z",
      "side": 1,
      "message": "nit: capitalize \"PackIndex\"",
      "revId": "5d432012683df372efb18c8a6adc8bca2161ba73",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf49220d_36a07bdd",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsPackFile.java",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1037542
      },
      "writtenOn": "2024-04-09T22:18:32Z",
      "side": 1,
      "message": "Is atomic needed here if loadedRef is only (optionally) set by a single thread inside getOrLoadRef()?",
      "range": {
        "startLine": 204,
        "startChar": 3,
        "endLine": 204,
        "endChar": 29
      },
      "revId": "5d432012683df372efb18c8a6adc8bca2161ba73",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3dd35d2a_1dfffbcb",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsPackFile.java",
        "patchSetId": 1
      },
      "lineNbr": 204,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2024-04-10T17:41:04Z",
      "side": 1,
      "message": "The lambda requires captured variables to be effectively final. AtomicReference is a wrapper to have a final ref with mutable content.\n\n\"Some people object to the restriction that the value must never be changed, but in practice this is not really a problem because you can always modify the code to use a final reference to a mutable data item,\"",
      "parentUuid": "bf49220d_36a07bdd",
      "range": {
        "startLine": 204,
        "startChar": 3,
        "endLine": 204,
        "endChar": 29
      },
      "revId": "5d432012683df372efb18c8a6adc8bca2161ba73",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d5653ca_fff89d37",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsPackFile.java",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1037542
      },
      "writtenOn": "2024-04-09T22:18:32Z",
      "side": 1,
      "message": "without the lock, index might be assigned twice, that is not harmful right?",
      "range": {
        "startLine": 215,
        "startChar": 3,
        "endLine": 220,
        "endChar": 4
      },
      "revId": "5d432012683df372efb18c8a6adc8bca2161ba73",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3485ad4d_c27a23a5",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsPackFile.java",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2024-04-10T17:41:04Z",
      "side": 1,
      "message": "True! I got confused: The concurrency here is two threads with different DfsPackFile instances reading the index for the first time, not a single DfsPackFile instance used by two threads.",
      "parentUuid": "3d5653ca_fff89d37",
      "range": {
        "startLine": 215,
        "startChar": 3,
        "endLine": 220,
        "endChar": 4
      },
      "revId": "5d432012683df372efb18c8a6adc8bca2161ba73",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64160dcb_e91df541",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsPackFile.java",
        "patchSetId": 1
      },
      "lineNbr": 222,
      "author": {
        "id": 1037542
      },
      "writtenOn": "2024-04-09T22:18:32Z",
      "side": 1,
      "message": "index can still be null here, if getOrLoadRef() is the cache hit so loadedRef is null and the item is evicted before cachedRef.get() is invoked in line 217.",
      "range": {
        "startLine": 222,
        "startChar": 10,
        "endLine": 222,
        "endChar": 15
      },
      "revId": "5d432012683df372efb18c8a6adc8bca2161ba73",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "070cc1a6_263bd567",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsPackFile.java",
        "patchSetId": 1
      },
      "lineNbr": 222,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2024-04-10T17:41:04Z",
      "side": 1,
      "message": "I think this was also happening in the previous code. Maybe we should throw an IOException in that case?",
      "parentUuid": "64160dcb_e91df541",
      "range": {
        "startLine": 222,
        "startChar": 10,
        "endLine": 222,
        "endChar": 15
      },
      "revId": "5d432012683df372efb18c8a6adc8bca2161ba73",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a27e13e_b72b22fc",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsPackFile.java",
        "patchSetId": 1
      },
      "lineNbr": 222,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2024-04-11T19:34:20Z",
      "side": 1,
      "message": "this problem seems to out of scope for this patch, no?\n\nthe patch is trying to solve the problem of \"intermixing\", not solving the problem of \"the item is evicted before cachedRef.get() is invoked\".\n\nmaybe we can do something like:\nif both refs return null, aka Minh\u0027s case, we do another round of load and cache. This scenario should be rare, no?",
      "parentUuid": "070cc1a6_263bd567",
      "range": {
        "startLine": 222,
        "startChar": 10,
        "endLine": 222,
        "endChar": 15
      },
      "revId": "5d432012683df372efb18c8a6adc8bca2161ba73",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bde4ced0_569f9ef8",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsPackFile.java",
        "patchSetId": 1
      },
      "lineNbr": 1457,
      "author": {
        "id": 1037542
      },
      "writtenOn": "2024-04-09T22:18:32Z",
      "side": 1,
      "message": "RefWithSize? (Ref is from DfsBlockCache.Ref)\notherwise CacheItemWithSize",
      "range": {
        "startLine": 1457,
        "startChar": 28,
        "endLine": 1457,
        "endChar": 36
      },
      "revId": "5d432012683df372efb18c8a6adc8bca2161ba73",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6abf0292_9f0f7ff3",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/dfs/DfsPackFile.java",
        "patchSetId": 1
      },
      "lineNbr": 1457,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2024-04-10T17:41:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bde4ced0_569f9ef8",
      "range": {
        "startLine": 1457,
        "startChar": 28,
        "endLine": 1457,
        "endChar": 36
      },
      "revId": "5d432012683df372efb18c8a6adc8bca2161ba73",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}