{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f71f399b_73c565b0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 45
      },
      "lineNbr": 42,
      "author": {
        "id": 1022030
      },
      "writtenOn": "2025-05-29T21:58:56Z",
      "side": 1,
      "message": "I don\u0027t think they\u0027ll wait. Won\u0027t they fail with a LOCK_FAILURE? There could be retries done based on that result, but that\u0027s not the same as waiting.",
      "range": {
        "startLine": 42,
        "startChar": 64,
        "endLine": 42,
        "endChar": 68
      },
      "revId": "1c72895097f290b1fdea87bb4b62fb3517e5f14f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f55d487_7f3c47e7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 45
      },
      "lineNbr": 42,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-29T22:03:25Z",
      "side": 1,
      "message": "Doesn\u0027t the `inProcessPackedRefsLock.lock();` wait for the lock to be available?\nAccording to [4] the ReentrantLock would wait for the lock to be available.\n\nAlso in my tests I\u0027ve noticed the wait, not a lock failure.\n\n[4] https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/ReentrantLock.html#lock--",
      "parentUuid": "f71f399b_73c565b0",
      "range": {
        "startLine": 42,
        "startChar": 64,
        "endLine": 42,
        "endChar": 68
      },
      "revId": "1c72895097f290b1fdea87bb4b62fb3517e5f14f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3dfcb44a_19586605",
        "filename": "/COMMIT_MSG",
        "patchSetId": 45
      },
      "lineNbr": 42,
      "author": {
        "id": 1022030
      },
      "writtenOn": "2025-05-29T22:06:02Z",
      "side": 1,
      "message": "\u003e Doesn\u0027t the `inProcessPackedRefsLock.lock();` wait for the lock to be available?\n\nThat assumes the ref packing is done 1) by JGit and 2) in the same JVM process. I agree that in that case, the inProcess lock will wait. For all other cases, I think you get a `LOCK_FAILURE`.",
      "parentUuid": "1f55d487_7f3c47e7",
      "range": {
        "startLine": 42,
        "startChar": 64,
        "endLine": 42,
        "endChar": 68
      },
      "revId": "1c72895097f290b1fdea87bb4b62fb3517e5f14f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "953c72b7_6467744d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 45
      },
      "lineNbr": 42,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-29T22:09:19Z",
      "side": 1,
      "message": "\u003e \u003e Doesn\u0027t the `inProcessPackedRefsLock.lock();` wait for the lock to be available?\n\u003e \n\u003e That assumes the ref packing is done 1) by JGit and 2) in the same JVM process. \n\nYes, that\u0027s the Gerrit Code Review use-case, where the incoming traffic is served by the same JVM in different threads. Before this change, a loop that is creating changes and adding patch-sets on a large repo wasn\u0027t blocking tags deletion. After this change, the tag deletions will wait until the changes refs repacking is done, even if they are totally unrelated.\n\n\u003e I agree that in that case, the inProcess lock will wait.\n\nüëç\n\n\u003e For all other cases, I think you get a `LOCK_FAILURE`.\n\nüëç",
      "parentUuid": "3dfcb44a_19586605",
      "range": {
        "startLine": 42,
        "startChar": 64,
        "endLine": 42,
        "endChar": 68
      },
      "revId": "1c72895097f290b1fdea87bb4b62fb3517e5f14f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "289c6162_a468ce44",
        "filename": "/COMMIT_MSG",
        "patchSetId": 45
      },
      "lineNbr": 42,
      "author": {
        "id": 1022030
      },
      "writtenOn": "2025-05-29T22:11:37Z",
      "side": 1,
      "message": "\u003e \u003e \u003e Doesn\u0027t the `inProcessPackedRefsLock.lock();` wait for the lock to be available?\n\u003e \u003e \n\u003e \u003e That assumes the ref packing is done 1) by JGit and 2) in the same JVM process. \n\u003e \n\u003e Yes, that\u0027s the Gerrit Code Review use-case, where the incoming traffic is served by the same JVM in different threads. Before this change, a loop that is creating changes and adding patch-sets on a large repo wasn\u0027t blocking tags deletion. After this change, the tag deletions will wait until the changes refs repacking is done, even if they are totally unrelated.\n\nüëç",
      "parentUuid": "953c72b7_6467744d",
      "range": {
        "startLine": 42,
        "startChar": 64,
        "endLine": 42,
        "endChar": 68
      },
      "revId": "1c72895097f290b1fdea87bb4b62fb3517e5f14f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ],
  "submitRequirementResults": []
}