{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5d487ebc_74987459",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-09-10T18:19:38Z",
      "side": 1,
      "message": "@ifrade@google.com @matthias.sohn@sap.com if you don\u0027t have any objects, I\u0027ll +2 this change and merge tomorrow. Otherwise, I\u0027d be happy to address any concerns and amend the change accordingly. Thanks for your feedback!",
      "revId": "5d0b7491a9b70a9d05845149c2ae30ff6b6a1cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f02f977_92963302",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-09-10T18:49:07Z",
      "side": 1,
      "message": "My main concern is that this fix can potentially introduce other problems and we don\u0027t have even a basic awareness about it. Last thing we want is to break all unshallows that have been working well so far.\n\nAny chance to keep this as a patch downstream until proved?\n\nA strong precondition to touch anything in un/shallowing is to cover it with reasonable tests (eg unshallowing in linear history, on a merge, just before a merge...).",
      "revId": "5d0b7491a9b70a9d05845149c2ae30ff6b6a1cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afc2b77d_2942ef83",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-09-10T20:07:26Z",
      "side": 1,
      "message": "\u003e My main concern is that this fix can potentially introduce other problems and we don\u0027t have even a basic awareness about it. Last thing we want is to break all unshallows that have been working well so far.\n\nThe `unshallow` worked _by mistake_ until now, because the code was stopping the navigation as the `unshallow` request wasn\u0027t there.\n\n\u003e Any chance to keep this as a patch downstream until proved?\n\nTo which branch would you suggest to move it?\n\n\u003e A strong precondition to touch anything in un/shallowing is to cover it with reasonable tests (eg unshallowing in linear history, on a merge, just before a merge...).\n\nUnshallowing has zero tests, so my test is going to be the very first one.\nI am happy to review any further changes to add more test coverage. I am always in favour of testing.\n\nSee the introduction of the unshallow in https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1320 and try to look for any class that ends with the `Test` suffix.\n\nIf you look at the code of `TopoSortGenerator` and `BoundaryGenerator` you\u0027ll notice many paths that won\u0027t work with unshallow. I believe by writing those tests you\u0027ll find out *many more* things that do not work rather than work.\n\nDo you have in mind a case where `TopoSortGenerator` and `BoundaryGenerator` where working in the `unshallow` case, even without the code for it, and would now break because they aren\u0027t used?\n\nBear in mind that this isn\u0027t the *final solution* but the first step to the solution.\n\nMy plan is:\n\n1. Disable the `TopoSortGenerator` and `BoundaryGenerator` as they break the `unshallow`\n2. Move the `unshallow` flag to a top-level RevFlag\n3. Introduce the `unshallow` management in `BoundaryGenerator` for supporting thin requests\n4. Introduce the `unshallow` management in `TopSortGenerator`\n\nThe 1. can also be cherry-picked to older branches.\nThe 2. 3. and 4. will only stay on master.\n\nDo you have any objections to the above plan? Feel free to also join the effort and help out in implementing 2. 3. and 4.\n\n**NOTE**: I will, of course, include tests in every change proposed for review.",
      "parentUuid": "2f02f977_92963302",
      "revId": "5d0b7491a9b70a9d05845149c2ae30ff6b6a1cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7274dfb_ed5a65b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-09-10T21:36:32Z",
      "side": 1,
      "message": "@ifrade@google.com see the extra tests requested in https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1221776/2. Feel free to add more cases as well, I\u0027d be happy to review them.",
      "parentUuid": "afc2b77d_2942ef83",
      "revId": "5d0b7491a9b70a9d05845149c2ae30ff6b6a1cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54d5b145_1a2a4fd7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-09-13T06:46:01Z",
      "side": 1,
      "message": "I\u0027ve replied and addressed all comments, including adding regression tests in an additional change in the chain.\n\nAnything else?",
      "parentUuid": "5d487ebc_74987459",
      "revId": "5d0b7491a9b70a9d05845149c2ae30ff6b6a1cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2753326e_fc7a09d0",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 11
      },
      "lineNbr": 2054,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-09-10T18:49:07Z",
      "side": 1,
      "message": "I am not sure this would break something else. For example, what happens with unshallow requests when \"thin\" is true? will the commits in the boundary be included?",
      "revId": "5d0b7491a9b70a9d05845149c2ae30ff6b6a1cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99861e3a_4be1a3a9",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/pack/PackWriter.java",
        "patchSetId": 11
      },
      "lineNbr": 2054,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-09-10T19:56:56Z",
      "side": 1,
      "message": "\u003e I am not sure this would break something else. For example, what happens with unshallow requests when \"thin\" is true? will the commits in the boundary be included?\n\nCorrect, and the `thin` never worked for the `unshallow` requests because the BoundaryGenerator was never adapted to support the `unshallow` requests.\nIt isn\u0027t technically a regression, because it never worked.",
      "parentUuid": "2753326e_fc7a09d0",
      "revId": "5d0b7491a9b70a9d05845149c2ae30ff6b6a1cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}