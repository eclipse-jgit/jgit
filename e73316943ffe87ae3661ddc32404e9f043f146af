{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "481e4186_884ea43c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1015244
      },
      "writtenOn": "2025-01-23T14:09:18Z",
      "side": 1,
      "message": "@matthias.sohn@sap.com I believe this issue I am working on is somewhat related [1]\n\nWhen having a highly concurrent load (r/w) against a Gerrit on reftable with external GC processes scheduled, we found that `BlockSource` endup pointing to stale reftable resources.\n\nThe plan is check explicitly before attempting a read and then handle the exception appropriately (i.e. triggering a refresh/reload, similarly to what you do here).\n\n[1] https://eclipse.gerrithub.io/c/eclipse-jgit/jgit/+/1206693",
      "revId": "e73316943ffe87ae3661ddc32404e9f043f146af",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "518f9f36_0ba8baf8",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/FileReftableDatabase.java",
        "patchSetId": 5
      },
      "lineNbr": 191,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-01-23T13:37:40Z",
      "side": 1,
      "message": "I\u0027m not sure this is enough: the ref-table on disk may change after L191 during the execution of L192, and we may be returning the wrong outdated values or making an exception.\n\nI believe the correct structure should be a while/loop where:\n1. The reloadIfNecessary() should return a timestamp (or snapshot) S1\n2. We execute the body between L192 and L196\n3. We re-run reloadIfNecessary() and get the new timestamp (or snapshot) S2\n4. whilst S2 \u003c\u003e S1, we execute the loop again",
      "range": {
        "startLine": 191,
        "startChar": 2,
        "endLine": 191,
        "endChar": 21
      },
      "revId": "e73316943ffe87ae3661ddc32404e9f043f146af",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c7fe6c6_7b3c9eb1",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/FileReftableDatabase.java",
        "patchSetId": 5
      },
      "lineNbr": 191,
      "author": {
        "id": 1038403
      },
      "writtenOn": "2025-01-24T18:18:50Z",
      "side": 1,
      "message": "I would say that looping should only happen on exceptions (when a result cannot be read), not because the files(ref) have changed after line 191. While it is true, that an out-of-date result may be returned, that is true no matter how much you loop, even once the files appear to no longer change (they can always change again after your check). What matters is not that the latest result is always returned (that is impossible), but that the result returned was accurate at least for a moment in time after the method call started. Therefore, I think it is wrong to be rechecking timestamps at the end unless we are trying to determine that a detected error condition (such as a caught exception) might have been caused by a change.",
      "parentUuid": "518f9f36_0ba8baf8",
      "range": {
        "startLine": 191,
        "startChar": 2,
        "endLine": 191,
        "endChar": 21
      },
      "revId": "e73316943ffe87ae3661ddc32404e9f043f146af",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}