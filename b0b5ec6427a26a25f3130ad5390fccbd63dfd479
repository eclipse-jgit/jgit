{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dcb25027_5030dc16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1541
      },
      "writtenOn": "2023-01-05T00:37:56Z",
      "side": 1,
      "message": "I don\u0027t know if Matthias/JGit-Maintainers are still maintaining 5.13 or if everyone needs to move to 6.x (and Java 11). Do you need this on 5.13? I think all non-EOL Gerrit versions are 6.x now.",
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b087e6c6_4adff8ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-01-05T00:50:33Z",
      "side": 1,
      "message": "I believe stable-5.13 is still supported and Matthias accepts fixes here.\n@Matthias?",
      "parentUuid": "dcb25027_5030dc16",
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03100243_8bd7748a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/Pack.java",
        "patchSetId": 7
      },
      "lineNbr": 144,
      "author": {
        "id": 1541
      },
      "writtenOn": "2023-01-05T00:37:56Z",
      "side": 1,
      "message": "I missed this earlier, but I think you want to use FileSnapshot.MISSING_FILE when bitmapIdxFile is null. It makes the logic below simpler too.\n\nHere:\n\n PackFileSnapshot bitmapFileSnapshot \u003d bitmapIdxFile \u003d\u003d null : FileSnapshot.MISSING_FILE ? FileSnapshot.save(bitmapIdxFile);\n\nAnd then in isBitmapModified() you can do:\n\n if (bitmapFile !\u003d null) {\n   return bitmapFileSnapshot.isModified(bitmapFile);\n }\n return !bitmapFileSnapshot.equals(FileSnapshot.MISSING_FILE);",
      "range": {
        "startLine": 144,
        "startChar": 23,
        "endLine": 144,
        "endChar": 86
      },
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80a93534_765f28ae",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/Pack.java",
        "patchSetId": 7
      },
      "lineNbr": 144,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-01-05T18:32:01Z",
      "side": 1,
      "message": "I refactored the code with your suggestion from comment below:\n\u003e if (bitmapFile \u003d\u003d null) {\n\u003e   return bitmapFileSnapshot.isPresent();\n\u003e }",
      "parentUuid": "03100243_8bd7748a",
      "range": {
        "startLine": 144,
        "startChar": 23,
        "endLine": 144,
        "endChar": 86
      },
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8053ac63_9f3afa25",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/Pack.java",
        "patchSetId": 7
      },
      "lineNbr": 144,
      "author": {
        "id": 1541
      },
      "writtenOn": "2023-01-05T19:12:27Z",
      "side": 1,
      "message": "But that\u0027s not using FileSnapshot.MISSING_FILE, which I think is the more JGit-appropriate thing to do vs an Optional. It also means you don\u0027t have confusing variables where fileSnapshot is a FileSnapshot but bitmapFileSnapshot is an Optional\u003cFileSnapshot\u003e.",
      "parentUuid": "80a93534_765f28ae",
      "range": {
        "startLine": 144,
        "startChar": 23,
        "endLine": 144,
        "endChar": 86
      },
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "118f4947_b32eab6f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/Pack.java",
        "patchSetId": 7
      },
      "lineNbr": 144,
      "author": {
        "id": 1541
      },
      "writtenOn": "2023-01-06T21:12:43Z",
      "side": 1,
      "message": "And thinking about this more, I think there\u0027s an even better trade to make for more simplicity. If we skip passing in the bitmapIdxFile to the constructor, we can have FileSnapshot do more work for us and encapsulate more in Pack:\n\n Pack(File packFile) {\n   this.packFile \u003d new PackFile(packFile);\n   this.bitmapIdxFile \u003d packFile.create(BITMAP);\n   this.bitmapFileSnapshot \u003d FileSnapshot.save(bitmapIdxFile); // handles non-existent file for us\n }\n\nAnd then you wouldn\u0027t ever pass a bitmap file to isBitmapModified() either since a missing file isn\u0027t considered modified when compared to another missing file (I\u0027ll push the test I wrote confirming that as soon as I get a chance).\n\n boolean isBitmapModified() {\n   return bitmapFileSnapshot.isModified(bitmapIdxFile);\n }\n\nThe downsides to this approach are that 1) we\u0027re rechecking existence of the bitmapIdxFile when trying to save the file snapshot and 2) we\u0027ll need to fix the first line of getBitmapIndex() that assumes bitmapIdxFile is null when it doesn\u0027t exist and the 2 lines that set it to null. One of those getBitmapIndex() lines doesn\u0027t equate to MISSING_FILE though (it\u0027s more like bitmapIdxInvalid\u003dtrue).\n\nSo I think it would be better on the stable branch to minimize the change and keep the null assumption. That should just mean modifying the solution above slightly:\n\n Pack(File packFile) {\n   this.packFile \u003d new PackFile(packFile);\n   this.bitmapIdxFile \u003d packFile.create(BITMAP);\n   this.bitmapFileSnapshot \u003d FileSnapshot.save(bitmapIdxFile);\n   if (bitmapFileSnapshot.equals(FileSnapshot.MISSING_FILE)) {\n     this.bitmapIdxFile \u003d null;\n   }\n }\n\n boolean isBitmapModified() {\n   return bitmapFileSnapshot.isModified(packFile.create(BITMAP));\n }",
      "parentUuid": "8053ac63_9f3afa25",
      "range": {
        "startLine": 144,
        "startChar": 23,
        "endLine": 144,
        "endChar": 86
      },
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e402cee_77d69925",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/Pack.java",
        "patchSetId": 7
      },
      "lineNbr": 360,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-01-04T23:57:08Z",
      "side": 1,
      "message": "Can be rewritten as:\n```\nif (bitmapFile \u003d\u003d null) {\n   return bitmapFileSnapshot.isPresent();\n }\n```",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 360,
        "endChar": 3
      },
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72b021e5_522fe76b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/Pack.java",
        "patchSetId": 7
      },
      "lineNbr": 360,
      "author": {
        "id": 1541
      },
      "writtenOn": "2023-01-05T00:37:56Z",
      "side": 1,
      "message": "(Ignore if you go with the comment above) This is probably simpler as:\n\n if (bitmapFile \u003d\u003d null) {\n   return bitmapFileSnapshot.isPresent();\n }",
      "range": {
        "startLine": 355,
        "startChar": 2,
        "endLine": 360,
        "endChar": 3
      },
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdbb0b5c_c6022f00",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/Pack.java",
        "patchSetId": 7
      },
      "lineNbr": 360,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-01-05T18:32:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e402cee_77d69925",
      "range": {
        "startLine": 355,
        "startChar": 0,
        "endLine": 360,
        "endChar": 3
      },
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7fa2f02_c125f80f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/Pack.java",
        "patchSetId": 7
      },
      "lineNbr": 360,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-01-05T18:32:01Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "72b021e5_522fe76b",
      "range": {
        "startLine": 355,
        "startChar": 2,
        "endLine": 360,
        "endChar": 3
      },
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1081d13_fa6e053a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackDirectory.java",
        "patchSetId": 7
      },
      "lineNbr": 441,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-01-04T23:57:08Z",
      "side": 1,
      "message": "We should add a comment, specifying why we do not reuse the Pack even if it is just the bitmap being modified but not the Pack itself.",
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4f486e3_d87a1ce2",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackDirectory.java",
        "patchSetId": 7
      },
      "lineNbr": 441,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-01-05T18:32:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1081d13_fa6e053a",
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fd5684c_bb909ee4",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackDirectory.java",
        "patchSetId": 7
      },
      "lineNbr": 463,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-01-05T00:32:47Z",
      "side": 1,
      "message": "I believe the performance hit is here when we reload a Pack when we don\u0027t need to. We are triggering the Pack.close() which runs the following: \n\n```\n\tpublic void close() {\n\t\tWindowCache.purge(this);\n\t\tsynchronized (this) {\n\t\t\tloadedIdx \u003d null;\n\t\t\treverseIdx \u003d null;\n\t\t}\n\t}\n```\n\nIf the packfile was substantial (GBs of data), we purge the entire JGit cache (WindowCache) that was loaded and we create a temporary hiccup to Gerrit.\n\nThat hiccup would have not happened before this change, hence the performance regression introduced.\n\nThe follow-up change I8de58485dc would restore the normal behaviour by keeping the Pack and its associated WindowCache segments in memory.",
      "range": {
        "startLine": 460,
        "startChar": 0,
        "endLine": 463,
        "endChar": 3
      },
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7020a4d_91a93b3e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackDirectory.java",
        "patchSetId": 7
      },
      "lineNbr": 463,
      "author": {
        "id": 1541
      },
      "writtenOn": "2023-01-05T00:42:36Z",
      "side": 1,
      "message": "\u003e I believe the performance hit is here when we reload a Pack when we don\u0027t need to. We are triggering the Pack.close() which runs the following: \n\u003e \n\u003e ```\n\u003e \tpublic void close() {\n\u003e \t\tWindowCache.purge(this);\n\u003e \t\tsynchronized (this) {\n\u003e \t\t\tloadedIdx \u003d null;\n\u003e \t\t\treverseIdx \u003d null;\n\u003e \t\t}\n\u003e \t}\n\u003e ```\n\u003e \n\u003e If the packfile was substantial (GBs of data), we purge the entire JGit cache (WindowCache) that was loaded and we create a temporary hiccup to Gerrit.\n\nIt doesn\u0027t purge the entire cache, only the data for this pack. I do agree that the work to reload that data is unnecessarily and potentially a significant performance impact for Gerrit. However, how often are you expecting that the .bitmap file will change when the .pack file doesn\u0027t? That seems like an uncommon scenario that we wouldn\u0027t optimize for.",
      "parentUuid": "2fd5684c_bb909ee4",
      "range": {
        "startLine": 460,
        "startChar": 0,
        "endLine": 463,
        "endChar": 3
      },
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a83e6310_4cd94bfa",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackDirectory.java",
        "patchSetId": 7
      },
      "lineNbr": 463,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-01-05T00:50:33Z",
      "side": 1,
      "message": "\u003e \u003e I believe the performance hit is here when we reload a Pack when we don\u0027t need to. We are triggering the Pack.close() which runs the following: \n\u003e \u003e \n\u003e \u003e ```\n\u003e \u003e \tpublic void close() {\n\u003e \u003e \t\tWindowCache.purge(this);\n\u003e \u003e \t\tsynchronized (this) {\n\u003e \u003e \t\t\tloadedIdx \u003d null;\n\u003e \u003e \t\t\treverseIdx \u003d null;\n\u003e \u003e \t\t}\n\u003e \u003e \t}\n\u003e \u003e ```\n\u003e \u003e \n\u003e \u003e If the packfile was substantial (GBs of data), we purge the entire JGit cache (WindowCache) that was loaded and we create a temporary hiccup to Gerrit.\n\u003e \n\u003e It doesn\u0027t purge the entire cache, only the data for this pack.\n\nYes, correct. Also it applies ONLY if the packfile was substantial (GBs of data), otherwise is negligible.\n\n\u003e I do agree that the work to reload that data is unnecessarily and potentially a significant performance impact for Gerrit.\n\nCorrect, and before this fix it was not performed: it is technically a performance regression.\n\n\u003e However, how often are you expecting that the .bitmap file will change when the .pack file doesn\u0027t? \n\nDuring the racy-reads period, which may lasts a few seconds. For very busy servers, this may kick a race between the incoming clones and the eviction of the packfile in the JGit cache, which may in turn trigger some consecutive JVM GCs for a few seconds.\n\n\u003e That seems like an uncommon scenario that we wouldn\u0027t optimize for.\n\nIt depends on how busy the server is, how big is the repo and how unlucky you are.\nIt is not an optimisation but rather a performance regression that is temporarily introduced by this change.\n\nHowever, it is addressed by the follow-up, which is fine by me.",
      "parentUuid": "d7020a4d_91a93b3e",
      "range": {
        "startLine": 460,
        "startChar": 0,
        "endLine": 463,
        "endChar": 3
      },
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad0bd81d_7681db20",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackDirectory.java",
        "patchSetId": 7
      },
      "lineNbr": 463,
      "author": {
        "id": 1541
      },
      "writtenOn": "2023-01-05T19:12:27Z",
      "side": 1,
      "message": "\u003e \u003e I do agree that the work to reload that data is unnecessarily and potentially a significant performance impact for Gerrit.\n\u003e \n\u003e Correct, and before this fix it was not performed: it is technically a performance regression.\n\nI don\u0027t buy the claim that because we have a bug that results in skipping work that fixing the bug so that it does the new work is a regression.\n\n\u003e \n\u003e \u003e However, how often are you expecting that the .bitmap file will change when the .pack file doesn\u0027t? \n\u003e \n\u003e During the racy-reads period, which may lasts a few seconds. For very busy servers, this may kick a race between the incoming clones and the eviction of the packfile in the JGit cache, which may in turn trigger some consecutive JVM GCs for a few seconds.\n\nI\u0027m not following the sequence of events that would trigger this, but we can discuss in the commit message where it\u0027s documented now.",
      "parentUuid": "a83e6310_4cd94bfa",
      "range": {
        "startLine": 460,
        "startChar": 0,
        "endLine": 463,
        "endChar": 3
      },
      "revId": "b0b5ec6427a26a25f3130ad5390fccbd63dfd479",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}