{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8c180b24_33e3aa2b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 37
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-16T10:15:13Z",
      "side": 1,
      "message": "The double-read removal is too dangerous IMHO, please review the command and provide performance data with the two reads compared to the stable-6.10 version.\n\nAlso, I\u0027ve summarised the status of the issue jgit-152 to have a wider discussion also on other options.\n\nLastly, I\u0027d like to see the performance impact of this change when deleting tags with a *partial concurrent pack-refs* of some refs not involved in the delete itself and publish the results as part of the commit message.",
      "revId": "774e45ec784a055bbeb344a885c08b86d8e80ce7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "328bf3d2_b8c2dd08",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 37
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-19T13:38:49Z",
      "side": 1,
      "message": "I have analysed the performance of this locking compared to the baseline of stable-6.10: unfortunately, it introduces a new locking on `packed-refs` when deleting a ref that isn\u0027t involved in a concurrent processing of refs repacking.\n\nExample:\n- Before this change, a repacking of two `refs/heads/foo` and `refs/heads/bar` into `packed-refs` could be concurrent with the deletion of `refs/tags/mytag`\n- After this change, the deletion of `refs/tags/mytag` would wait for the repacking to finish *even if* it doesn\u0027t need to wait at all, as his ref may not be included in the `packed-refs` processing at all.\n\nSee the full data on: https://github.com/eclipse-jgit/jgit/issues/152#issuecomment-2888875342",
      "revId": "774e45ec784a055bbeb344a885c08b86d8e80ce7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce7cdc1b_d247cac3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 37
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-20T11:35:51Z",
      "side": 1,
      "message": "Added my suggestion on how to fix the implementation as well.",
      "revId": "774e45ec784a055bbeb344a885c08b86d8e80ce7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ad9bb55_7af175f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 37
      },
      "lineNbr": 0,
      "author": {
        "id": 1020677
      },
      "writtenOn": "2025-05-29T09:33:34Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "328bf3d2_b8c2dd08",
      "revId": "774e45ec784a055bbeb344a885c08b86d8e80ce7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "557cf075_f66b48cf",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 37
      },
      "lineNbr": 687,
      "author": {
        "id": 1022030
      },
      "writtenOn": "2025-05-16T00:22:06Z",
      "side": 1,
      "message": "Why are you removing the intentional use of `refreshPackedRefs()`? Using that method matches the behavior from C git where it [forces a re-read of packed-refs](https://github.com/git/git/blob/master/refs/packed-backend.c#L1256) once it has the lock.",
      "range": {
        "startLine": 687,
        "startChar": 27,
        "endLine": 687,
        "endChar": 43
      },
      "revId": "774e45ec784a055bbeb344a885c08b86d8e80ce7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a389cccc_3a09aa8d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 37
      },
      "lineNbr": 687,
      "author": {
        "id": 1020677
      },
      "writtenOn": "2025-05-29T09:32:20Z",
      "side": 1,
      "message": "Reinstated.",
      "parentUuid": "557cf075_f66b48cf",
      "range": {
        "startLine": 687,
        "startChar": 27,
        "endLine": 687,
        "endChar": 43
      },
      "revId": "774e45ec784a055bbeb344a885c08b86d8e80ce7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f944f289_a1813b91",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 37
      },
      "lineNbr": 714,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-20T11:35:51Z",
      "side": 1,
      "message": "We *must* ensure that:\n\n- When rewriting the `packed-refs` file we do not rely on in-memory caching or NFS caching, with the risk of loading the file twice. It cannot be worse than what it was before, as we already had a double-read.\n\n- The `packed-refs` file remains locked *until* the loose ref deletion is complete, otherwise the concurrency issue may happen during the execution of lines L701-L714\n\n```suggestion\n\t\tinProcessPackedRefsLock.lock();\n\t\ttry {\n\t\t\tLockFile lck \u003d lockPackedRefsOrThrow();\n\t\t\ttry {\n\t\t\t\t// Write the packed-refs file using an atomic update. We might\n\t\t\t\t// wind up reading it twice, before and after checking if the\n\t\t\t\t// ref to delete is included or not, to ensure\n\t\t\t\t// we don\u0027t rely on a PackedRefList that is a result of in-memory\n\t\t\t\t// or NFS caching.\n\t\t\t\tPackedRefList packed \u003d getPackedRefs();\n\t\t\t\tif (packed.contains(name)) {\n\t\t\t\t\tpacked \u003d refreshPackedRefs();\n\t\t\t\t\tint idx \u003d packed.find(name);\n\t\t\t\t\tif (0 \u003c\u003d idx) {\n\t\t\t\t\t\tcommitPackedRefs(lck, packed.remove(idx), packed, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tRefList\u003cLooseRef\u003e curLoose, newLoose;\n\t\t\t\tdo {\n\t\t\t\t\tcurLoose \u003d looseRefs.get();\n\t\t\t\t\tint idx \u003d curLoose.find(name);\n\t\t\t\t\tif (idx \u003c 0)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tnewLoose \u003d curLoose.remove(idx);\n\t\t\t\t} while (!looseRefs.compareAndSet(curLoose, newLoose));\n\n\t\t\t\tint levels \u003d levelsIn(name) - 2;\n\t\t\t\tdelete(logFor(name), levels);\n\t\t\t\tif (dst.getStorage().isLoose()) {\n\t\t\t\t\tdeleteAndUnlock(fileFor(name), levels, update);\n\t\t\t\t}\n\n\t\t\t} finally {\n\t\t\t\tlck.unlock();\n\t\t\t}\n\t\t} finally {\n\t\t\tinProcessPackedRefsLock.unlock();\n\t\t}\n```",
      "range": {
        "startLine": 680,
        "startChar": 0,
        "endLine": 714,
        "endChar": 3
      },
      "revId": "774e45ec784a055bbeb344a885c08b86d8e80ce7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03a5adaa_eaae5f87",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 37
      },
      "lineNbr": 714,
      "author": {
        "id": 1022030
      },
      "writtenOn": "2025-05-20T12:39:07Z",
      "side": 1,
      "message": "I think I have a change with nearly this same code, but the Eclipse ECA is failing because of my github username change so I can\u0027t push it ðŸ˜ž\n\nI did update the comments too though.\n```suggestion\n\t\t// Get and keep the packed-refs lock while updating packed-refs and\n\t\t// removing any loose ref\n\t\tinProcessPackedRefsLock.lock();\n\t\ttry {\n\t\t\tLockFile lck \u003d lockPackedRefsOrThrow();\n\t\t\ttry {\n\t\t\t\tPackedRefList packed \u003d getPackedRefs();\n\t\t\t\tif (packed.contains(name)) {\n\t\t\t\t\t// Force update our packed-refs snapshot before writing\n\t\t\t\t\tint idx \u003d packed.find(name);\n\t\t\t\t\tif (0 \u003c\u003d idx) {\n\t\t\t\t\t\tcommitPackedRefs(lck, packed.remove(idx), packed, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tRefList\u003cLooseRef\u003e curLoose, newLoose;\n\t\t\t\tdo {\n\t\t\t\t\tcurLoose \u003d looseRefs.get();\n\t\t\t\t\tint idx \u003d curLoose.find(name);\n                                        if (idx \u003c 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tnewLoose \u003d curLoose.remove(idx);\n\t\t\t\t} while (!looseRefs.compareAndSet(curLoose, newLoose));\n\n\t\t\t\tint levels \u003d levelsIn(name) - 2;\n\t\t\t\tdelete(logFor(name), levels);\n\t\t\t\tif (dst.getStorage().isLoose()) {\n\t\t\t\t\tdeleteAndUnlock(fileFor(name), levels, update);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tlck.unlock();\n\t\t\t}\n\t\t} finally {\n\t\t\tinProcessPackedRefsLock.unlock();\n\t\t}\n```",
      "parentUuid": "f944f289_a1813b91",
      "range": {
        "startLine": 680,
        "startChar": 0,
        "endLine": 714,
        "endChar": 3
      },
      "revId": "774e45ec784a055bbeb344a885c08b86d8e80ce7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8db6354d_0f5f30c5",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 37
      },
      "lineNbr": 714,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2025-05-20T12:47:07Z",
      "side": 1,
      "message": "Open https://accounts.eclipse.org/users/\u003cyour eclipse userid\u003e/edit and set the new github account name there. This should fix the problem.",
      "parentUuid": "03a5adaa_eaae5f87",
      "range": {
        "startLine": 680,
        "startChar": 0,
        "endLine": 714,
        "endChar": 3
      },
      "revId": "774e45ec784a055bbeb344a885c08b86d8e80ce7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cf201bf_4b693c6f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 37
      },
      "lineNbr": 714,
      "author": {
        "id": 1022030
      },
      "writtenOn": "2025-05-28T16:53:21Z",
      "side": 1,
      "message": "\u003e Open https://accounts.eclipse.org/users/\u003cyour eclipse userid\u003e/edit and set the new github account name there. This should fix the problem.\n\nYeah, I have https://gitlab.eclipse.org/eclipsefdn/it/websites/accounts.eclipse.org/-/issues/206 open now to try to get it fixed...\n\nOh and I realized my suggested code above isn\u0027t quite what I had locally, sorry. The tabs wouldn\u0027t copy/paste correctly. There\u0027s at least a missing `packed \u003d refreshPackedRefs();` that should be on the line below the comment `// Force update our packed-refs snapshot before writing`.",
      "parentUuid": "8db6354d_0f5f30c5",
      "range": {
        "startLine": 680,
        "startChar": 0,
        "endLine": 714,
        "endChar": 3
      },
      "revId": "774e45ec784a055bbeb344a885c08b86d8e80ce7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a599c77_aea6417c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 37
      },
      "lineNbr": 714,
      "author": {
        "id": 1020677
      },
      "writtenOn": "2025-05-29T09:32:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6cf201bf_4b693c6f",
      "range": {
        "startLine": 680,
        "startChar": 0,
        "endLine": 714,
        "endChar": 3
      },
      "revId": "774e45ec784a055bbeb344a885c08b86d8e80ce7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}