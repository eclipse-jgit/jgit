{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fab74328_e2f42c06",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 98905
      },
      "writtenOn": "2023-03-14T11:54:40Z",
      "side": 1,
      "message": "but in case of !inCore, the IO exception (eg. file is not there) are actually also forms of \"the patch does not apply\", and would require user action, to restore the state of the checkout to something that the patch expects. \n\nIs this change really necessary for Gerrit to not generate 500 ? you could just catch the current exception and translate to \"patch does not apply\"? \n\nMaybe there are places where a blanket IOException should be left to propagate.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 16,
        "endChar": 36
      },
      "revId": "38e968275deb08b27d352a6b54c76720f025669b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6805326_326b9e33",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 307467
      },
      "writtenOn": "2023-03-17T08:01:28Z",
      "side": 1,
      "message": "In the current state, Gerrit can only distinguish between conflict exceptions and other `PatchApplyException`s by matching against the text message.\n\n`PatchApplyException` is also thrown for most other errors, including filesystem issues, so I wouldn\u0027t like to treat all of those as 400s in Gerrit.\n\nUnwrapping some of the `IOException`s meaning the exception protocol of this class will change  - i.e. existing callers might have to modify their exception handling. I tried to avoid that with this change by making `PatchFormatException` a subtype of `PatchApplyException`.\n\nIf preserving the protocol is not important - so yes, I assume we can unwrap some exceptions, though it\u0027s hard for me to tell where the limit between the cases is, and I\u0027m not sure if there\u0027s a limit that covers all cases. For example, you mentioned that \"file is not there\" can be either a config issue or an end-user issue, so which category should it fall under? (ideally, I think it should be \"fileNotFound\", but classifying all the exceptions of this class is out of scope here IMO).",
      "parentUuid": "fab74328_e2f42c06",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 16,
        "endChar": 36
      },
      "revId": "38e968275deb08b27d352a6b54c76720f025669b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0066bed_4ada21b2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 98905
      },
      "writtenOn": "2023-03-23T10:59:24Z",
      "side": 1,
      "message": "\u003e that covers all cases. For example, you mentioned that \"file is not there\" can be either a config  issue or an end-user issue, so which category should it fall under? (ideally, I think it should be \"fileNotFound\", but classifying all the exceptions of this class is out of scope here IMO).\n\nthe coding here is a bit messy.  A lot of the IOExceptions are actually not really I/O exceptions. For example \n\n```\n...\npublic static void createNewFile(File f) throws IOException {\n\t\tif (!f.createNewFile())\n\t\t\tthrow new IOException(MessageFormat.format(\n\t\t\t\t\tJGitText.get().createNewFileFailed, f));\n\t}\n\t\n...\n\ntry {\nFileUtils.mkdirs(f.getParentFile(), true);\t\t\t\t\t\t\tFileUtils.createNewFile(f);\n} catch (IOException e) {\nthrow new PatchApplyException(MessageFormat.format(\n\t\t\t\t\t\tJGitText.get().createNewFileFailed, f), e);\n}\n```\n\n\nthis could have been \n\n```\n  if (! ((f.getParent().mkdirs() || f.getParent().isDir()) \u0026\u0026 f.createNewFile()))\n    throw .. \n```",
      "parentUuid": "f6805326_326b9e33",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 16,
        "endChar": 36
      },
      "revId": "38e968275deb08b27d352a6b54c76720f025669b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a95dbf7_21c3bad8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 307467
      },
      "writtenOn": "2023-03-27T14:58:54Z",
      "side": 1,
      "message": "Done. The spaghetti code mostly went away once I removed the wrapping (the example case included).",
      "parentUuid": "b0066bed_4ada21b2",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 16,
        "endChar": 36
      },
      "revId": "38e968275deb08b27d352a6b54c76720f025669b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da0aa314_110cf971",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 98905
      },
      "writtenOn": "2023-03-27T15:18:13Z",
      "side": 1,
      "message": "hurray!\ncan you work some of the discussion with Matthias into the commit message, so people understand why we did this?",
      "parentUuid": "4a95dbf7_21c3bad8",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 16,
        "endChar": 36
      },
      "revId": "38e968275deb08b27d352a6b54c76720f025669b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5b34c93_4a557560",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 307467
      },
      "writtenOn": "2023-03-28T09:51:39Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "da0aa314_110cf971",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 16,
        "endChar": 36
      },
      "revId": "38e968275deb08b27d352a6b54c76720f025669b",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}