{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "09c852bf_68d99f4b",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/api/blame/BlameGeneratorTest.java",
        "patchSetId": 9
      },
      "lineNbr": 38,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "nit: I would move the refactoring into another CL since this CL is already very long to review.",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84eed690_42648a5d",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/api/blame/BlameGeneratorTest.java",
        "patchSetId": 9
      },
      "lineNbr": 38,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09c852bf_68d99f4b",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4abf9460_503cfdf5",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/api/blame/BlameGeneratorTest.java",
        "patchSetId": 9
      },
      "lineNbr": 295,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "new ArrayList\u003c\u003e(3); not 4",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67727e7c_92953259",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/api/blame/BlameGeneratorTest.java",
        "patchSetId": 9
      },
      "lineNbr": 295,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4abf9460_503cfdf5",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03022e39_5c834bef",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/api/blame/BlameGeneratorTest.java",
        "patchSetId": 9
      },
      "lineNbr": 296,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "C2 only added the \"fourth\" line relative to C1.\n\nSo the file state of c2 should be c1 covering L0 to L3, and c2 covering L3 to L4.\n\nThese setup should be \n\n```\nc2Regions.add(new CacheRegion(FILE, c1, author, 1, 3));\nc2Regions.add(new CacheRegion(FILE, c2, author, 3, 4));\n```",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b798bb05_7c96b1bc",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/api/blame/BlameGeneratorTest.java",
        "patchSetId": 9
      },
      "lineNbr": 296,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "Done. Thanks, good catch. The test was still passing because the first line was correctly blamed.",
      "parentUuid": "03022e39_5c834bef",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54eacb49_cb25991b",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/api/blame/BlameGeneratorTest.java",
        "patchSetId": 9
      },
      "lineNbr": 328,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "since the test set up the cache with the state of a single commit, let\u0027s make sure cache hit is indeed by a candidate containing said commit, c2 in this case. \n\nWe should double check this for every test.",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7524de62_5ad8b5a1",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/api/blame/BlameGeneratorTest.java",
        "patchSetId": 9
      },
      "lineNbr": 328,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "Don\u0027t follow. What other cache hit could it be?\n\nThe final results are correct, if the generator would be querying the wrong candidate, results would be off.",
      "parentUuid": "54eacb49_cb25991b",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "097f50d4_3ebf5c98",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/api/blame/BlameGeneratorTest.java",
        "patchSetId": 9
      },
      "lineNbr": 328,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-13T22:10:29Z",
      "side": 1,
      "message": "this is more of a nit. \n\nIf we treat the blame generator impl and the cache impl as black boxes, and our test is only adding c2\u0027s state into the cache, then the only cache hit that should happen is by a candidate with c2. For additional test coverage, we should add another test that add the state of c1 and c2 into the cache, then always assert the cache hit came from c2.",
      "parentUuid": "7524de62_5ad8b5a1",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ff61a60_37f49cb5",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/api/blame/BlameGeneratorTest.java",
        "patchSetId": 9
      },
      "lineNbr": 328,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-14T21:44:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "097f50d4_3ebf5c98",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ac25beb_79425fd6",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/api/blame/BlameGeneratorTest.java",
        "patchSetId": 9
      },
      "lineNbr": 369,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "A few more tests to consider:\n\n1. cache the state of an old commit but a newer commit override the whole file, so the cache should never hit the old commit since the line remaining would be 0 before getting to the old commit.\n2. add a test with multiple silo\u0027d unblamed regions, then use the each into its own BlameRegionMerger logic to break each unblamed regions into smaller outregions, preferably showing whether it\u0027s possible to have multiple \"newCandidates\" with the same commit.",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c7c625e_8e6a4573",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/api/blame/BlameGeneratorTest.java",
        "patchSetId": 9
      },
      "lineNbr": 369,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "#1 Done\n\n#2 That is in BlameRegionMergerTest (it got lost in the change split but is coming back in next patchset).",
      "parentUuid": "2ac25beb_79425fd6",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41b4a4a5_1aadd01f",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/blame/BlameRegionMergerTest.java",
        "patchSetId": 9
      },
      "lineNbr": 30,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "can you add anther test that checks for commits blamed for multiple non-continuous sections resulting in multiple candidates with the same commit? \n\ne.g. we cache the following state: C1 modified L0-L12 AND L23-L31, C2 modified L12-L15 AND L18-L23. The unblamed regions are L0-L15 and L18-L31, then the there should be 4 candidates, C1-\u003eC2-\u003eC2-\u003eC1.",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b83cb44_8a3c8136",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/blame/BlameRegionMergerTest.java",
        "patchSetId": 9
      },
      "lineNbr": 30,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "41b4a4a5_1aadd01f",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3de8cdfd_468bc30f",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/blame/BlameRegionMergerTest.java",
        "patchSetId": 9
      },
      "lineNbr": 30,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-13T22:10:29Z",
      "side": 1,
      "message": "\"blame_overTwoBlamedRegions\" is close to what I am describing but not quite; it\u0027s testing one unblamed region (L8-L13) assigning to two candidates with different commits. \n\nWould you mind adding a test that has two unblamed region assigned to the two candidates with the same commit?",
      "parentUuid": "5b83cb44_8a3c8136",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34003e80_231b89db",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/blame/BlameRegionMergerTest.java",
        "patchSetId": 9
      },
      "lineNbr": 30,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-14T21:44:44Z",
      "side": 1,
      "message": "blame_fromCandidate_twiceCandidateInOutput",
      "parentUuid": "3de8cdfd_468bc30f",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9356802d_00acf898",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/blame/BlameRegionMergerTest.java",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "outdated comment?",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d66cab9_bc2d381e",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/blame/BlameRegionMergerTest.java",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9356802d_00acf898",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eab1915b_aa7d71da",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameGenerator.java",
        "patchSetId": 9
      },
      "lineNbr": 1190,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "a bit confusing of a paragraph. For first time reader of the BlameGenerator file, the linked list aspect of the candidate queue can be hard to understand. \n\nI think you meant \"The generator could signal it\u0027s done without exhausting all candidates if there is no more remaining lines or the last visited candidate is found in the cache.\n\nmaybe add another paragraph on this is also a metric for \"# of CacheMiss\" if the cache is present.",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d579a544_f111b3ab",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameGenerator.java",
        "patchSetId": 9
      },
      "lineNbr": 1190,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eab1915b_aa7d71da",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ff5b988_9fe79d78",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameGenerator.java",
        "patchSetId": 9
      },
      "lineNbr": 1190,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-13T22:10:29Z",
      "side": 1,
      "message": "Ah, sorry, \"candidateVisited\" is not always # of cacheMiss, since you would always have to visit at least 1 candidate before checking the cache. \n\nIts relationship to # of cacheMiss actually depends on whether the cache is present/hit; if no cache or cache never hit, `candidateVisited \u003d\u003d cacheMiss`, else if there is a cache hit, `candidateVisited \u003d\u003d cacheMiss -1`.\n\nLet\u0027s make another stat just for `cacheMiss` and leave the `candidateVisited` as it is. If cachedBlame \u003d\u003d null || fullyBlamed \u003d\u003d null, increment cacheMiss.",
      "parentUuid": "d579a544_f111b3ab",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7456134_a6e77276",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameGenerator.java",
        "patchSetId": 9
      },
      "lineNbr": 1190,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-14T21:44:44Z",
      "side": 1,
      "message": "I\u0027ll remove the reference to cache misses. We can add it when neede. These stats are not wrong and help with the tests.",
      "parentUuid": "6ff5b988_9fe79d78",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "445d2c22_c0f93dfb",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 47,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "nit: would be easier to understand if you can state that the regionList of the input candidate are the regions that have yet been blamed.",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1db4a0c3_530e79ab",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 47,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "Rephrased this from \"regions to blame\" to \"unblamed regions\".",
      "parentUuid": "445d2c22_c0f93dfb",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd54c50c_990549e3",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "Under the default blame logic, usually an outCandidate could have multiple outRegion as its regionList, i.e. the default blame generator behaves by blaming as many unblamed region as possible onto each candidate/commit during its iteration cycle. \n\nThis logic here inverts this relationship to one unblamed region could be blame into multiple candidates, i wonder if we will see multiple \"newCandidates\" sharing the same commit with this approach; perhaps it\u0027s fine to have multiple \"newCandidates\" with the same commit since the end result look the same to the users.",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "480e2fec_f19a96ef",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "all region merging logic reside in the Candidate class, by convention, we should put these merging logic and overlap logic in the Candidate class as well.",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6bee216f_3dfd14ff",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "Yes, this logic could have different Candidate instances pointing to the same commit. \n\nWe could go though the list and merge consecutive candidates with same commit, but the generator is going to put the candidate list in outCandidate and emit region by region, so it is irrelevant.\n\nIn other words,\n (candidate 1, region 1) (candidate 1, region 2)\nand\n (candidate 1, [region 1, region 2])\n \nproduce the same results in generator.next()",
      "parentUuid": "cd54c50c_990549e3",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "429039d2_086df0d5",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "Candidate already has the merging of regions with editlists, so another set of merging operations would only confuse things.\n\nWe could add to Candidate:\n\n```\n+       Candidate takeBlame(RevWalk revPool, List\u003cCacheRegion\u003e cacheRegions) {\n+               BlameRegionMerger merger \u003d new BlameRegionMerger(sourceRepository, revPool,\n+                               cacheRegions);\n+               return merger.mergeCandidate(this);\n+       }\n```\n\nbut it doesn\u0027t improve the encapsulation of any of the classes involved.",
      "parentUuid": "480e2fec_f19a96ef",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d8757d5_05b37e64",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-13T22:10:29Z",
      "side": 1,
      "message": "this is more of a nitpick, but I think consolidating the merging region logic into Candidate class is much preferred because we can maintain the current relationship between BlameGenerator, Region, and Candidate; i.e. BG is responsible for setting up the iteration, Region as a POJO is responsible for the result format, Candidate is responsible for merging/dividing/linking regions.  \n\nI think it\u0027s fine that we put BlameRegionMerger into Candidate as you suggested, and I also think we should move the editlist merging logic into its class into its own \"merger\" class in another refactoring would make the candidate class easier to read.",
      "parentUuid": "429039d2_086df0d5",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29f1939e_196067f3",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-14T21:44:44Z",
      "side": 1,
      "message": "ACK. We can refactor this later.",
      "parentUuid": "2d8757d5_05b37e64",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b0cc919_2fcdaf9e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-18T17:55:00Z",
      "side": 1,
      "message": "why wait to refactor it into the Candidate class later?\n\nthis is the CL that introduces the BlameRegionMerger class, we should not be introducing tech debt when introducing new classes. Putting the BlameRegionMerger initiation into the candidate class should be fairly easy. We can add another \"merger\" class for the editList merging logic in a later CL.",
      "parentUuid": "29f1939e_196067f3",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f63d94b0_d64af79a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 70,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "is this possible to happen? IIRC the input Region data is based on the file state of the current candidate, so are the cachedRegion data. I don\u0027t see how overlaps can ever be empty unless the cachedRegion data is somehow corrupted.",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce7d7497_4d9cbbd6",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 70,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "Correct. That is why it throws an IllegalStateException.\n\nGiven that the cache is writter/parsed somewhere else, is still worth to assert this.",
      "parentUuid": "f63d94b0_d64af79a",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a926348_2ab8e7ea",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 70,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-13T22:10:29Z",
      "side": 1,
      "message": "can you add a test to assert this exception?",
      "parentUuid": "ce7d7497_4d9cbbd6",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32ab4b8e_70a80864",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 70,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-14T21:44:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a926348_2ab8e7ea",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8978258e_bc2e0e45",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "all Candidates created within the blame generator have the repo field populated, let\u0027s not break that convention here. We want to continue supports for callers that rely on that field from the default implementation.",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6a643bb_ad03aa9d",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8978258e_bc2e0e45",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30317965_33d501f1",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 119,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "nit, to make this section easier to understand:\n\nmake \"blameEnd - blamedStart\" into the line before, like \"length \u003d blameEnd - blamedStart\", then add a comment \"the length of ownership by candidate within this region.\"",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ab907cf_ddd87793",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/BlameRegionMerger.java",
        "patchSetId": 9
      },
      "lineNbr": 119,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "Extracted length to a variable.\n\nThe comment seems unnecessary, when we are setting a variable \"length\" to a parameter \"len\" in something called Region.",
      "parentUuid": "30317965_33d501f1",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cbba382_70ccd7b9",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 1,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "We could break this class into its own CL to make this CL smaller.",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e28523a_ae674863",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 1,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9cbba382_70ccd7b9",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d32131b_02fcf78c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 18,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "why not just extend the Region class?",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70b54b75_d2321db1",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 18,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "This class came from gitiles. We want to keep them compatible, to reuse the caches we already have.",
      "parentUuid": "5d32131b_02fcf78c",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "331bb98e_11fe5af0",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 18,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-13T22:10:29Z",
      "side": 1,
      "message": "nit: This part of my concern about introducing cache related merging into jgit. IIRC, Gitiles should be dependent on Jgit, it\u0027s not clean to move a Gitiles\u0027 class into jgit for compatibility reason.  \n\nI would much prefer Gitiles owns these CacheRegion objects and the merging logic associated. i.e. let the blame generator be the source of truth for blamed regions as it is, but let the caller (i.e. Gitiles) decide on what they want to do with their cached data vs the generated data. The only thing BlameGenerator has to know from the interface is \"whether I can stop at this commit\". \n\nIf we really do want to move these CacheRegion and merge logic into jgit, then we should refactor Gitiles to use them directly since I assume Gitiles already relies heavily on most jgit objects.   \n\nIn terms of most ideal approach, I would do what @mthai@google.com suggested, which is make the interface of the blame generator and the interface of Gitiles more abstract, so anyone using either or both (jgit/gitiles) as dependencies could own any intermediate logic without worrying about producing future circular dependencies. This approach would also make it easier to move away from jgit or from Gitiles.\n\nif free to take this comment as a nitpick, but code hygiene is a good topic to discuss whenever we think about moving class from a downstream dependency (e.g. Gitiles) to an its upstream dependency (e.g. jgit).",
      "parentUuid": "70b54b75_d2321db1",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33374f39_00bd90b5",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 18,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-14T21:44:44Z",
      "side": 1,
      "message": "ACK. We will go with this approach, see how it plays with gitiles and adapt.",
      "parentUuid": "331bb98e_11fe5af0",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00739603_f6d709c6",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 25,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "why do we need to store \"sourceCommit\" and \"sourceAuthor\" info in a region object? These should be part of the candidate class. \n\nIs it because you need them on the side of generating the cache, because the cache is only stored by region not by candidate? If you know the commit SHA, then you could always parse the author from the SHA, no?",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68eb1dd6_0c6a4028",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 25,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "We are trying to reuse the caches from gitiles, and this is the class serialized over there.\n\nAs you mentioned, it has few oddities but we want to keep it compatible. \n\nWe could also define a new class and translate it when reading the cache, although it sound like adding more failure steps.\n\nThis is now in its own change, lets continue the comments there.",
      "parentUuid": "00739603_f6d709c6",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aabf8f2d_3289e477",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "is there a particular implementation reason that you only exposing the start setter?",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dad9f2ed_c958ea02",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "http://google3/third_party/java_src/gitiles/java/com/google/gitiles/blame/BlameServlet.java?rcl\u003d726552537\u0026l\u003d128\n\nGitiles uses it to move the regions from 0-based to 1-based index",
      "parentUuid": "aabf8f2d_3289e477",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efdb7439_2ad1a9d7",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 89,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "recalculate the count if start gets set?",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f901e4c_7f868fd4",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 89,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "setStart is used to \"shift\" the region, so the count (length) is the same.",
      "parentUuid": "efdb7439_2ad1a9d7",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b8f6b2c_7fd8b135",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 121,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "why only comparing the start line here? shouldn\u0027t a region object to be same if and only if the commit, the author, the start, and the end to be all be the same?",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fef65ef1_aa117acf",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 121,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "That would be for #equals(), compareTo is to sort them and for that the start of the region is enough (we want them in \"file order\").",
      "parentUuid": "1b8f6b2c_7fd8b135",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "203346c2_1cc8f5a2",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 125,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-02-12T21:30:07Z",
      "side": 1,
      "message": "this toString seems to imply to have a lot of unmentioned implementation details on how this CacheRegion would be used by gitiles; without reading other files in this CL, I assume the \"unblamed region\" is for CacheRegion objects with null fields, frankly it\u0027s not clear to me why we need to support them without knowing the need from the gitiles side.\n\nMaybe add some description about the need to support both unblamed region and region with valid values?",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3267e31f_e1d9789f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/blame/cache/CacheRegion.java",
        "patchSetId": 9
      },
      "lineNbr": 125,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-02-13T20:03:22Z",
      "side": 1,
      "message": "Added comment on the class javadoc about the nullness of the fields.",
      "parentUuid": "203346c2_1cc8f5a2",
      "revId": "d3291337272383bd6187bf51dc52409cbfad2cd4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}