{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7dfa231d_3b14b57e",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/ReflogWriterTest.java",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 241433
      },
      "writtenOn": "2022-05-04T14:06:11Z",
      "side": 1,
      "message": "We should probably filter the opposite case as well. I don\u0027t see any test doing it.",
      "revId": "76d1107fb5f451e02f36b03b8a9d47c0a7d5f803",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3db83fef_37f8a33b",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/ReflogWriterTest.java",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 97483
      },
      "writtenOn": "2022-05-04T14:12:04Z",
      "side": 1,
      "message": "True, let me add it.",
      "parentUuid": "7dfa231d_3b14b57e",
      "revId": "76d1107fb5f451e02f36b03b8a9d47c0a7d5f803",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8503ced4_9e418fa6",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/internal/storage/file/ReflogWriterTest.java",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 97483
      },
      "writtenOn": "2022-05-04T18:23:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3db83fef_37f8a33b",
      "revId": "76d1107fb5f451e02f36b03b8a9d47c0a7d5f803",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70ad1145_c88fcdab",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ReflogWriter.java",
        "patchSetId": 3
      },
      "lineNbr": 218,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-05-04T16:45:59Z",
      "side": 1,
      "message": "Not sure ReflogWriter is the right place to decide for which refs we want reflogs.\nJGit is a library and if the caller set forceWrite \u003d true we should probably do what he said.\n\nGit does not create reflogs in bare repos but Gerrit, hosting bare repos, does.\n\nreturn early if it\u0027s a remote tracking branch to avoid indenting the complete implementation:\n\n if (refName.startsWith(R_REMOTES)) {\n     return this;\n }",
      "revId": "76d1107fb5f451e02f36b03b8a9d47c0a7d5f803",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "532c89bd_1e2e4342",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ReflogWriter.java",
        "patchSetId": 3
      },
      "lineNbr": 218,
      "author": {
        "id": 97483
      },
      "writtenOn": "2022-05-04T18:11:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70ad1145_c88fcdab",
      "revId": "76d1107fb5f451e02f36b03b8a9d47c0a7d5f803",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66d3a4fe_3d1bb50f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ReflogWriter.java",
        "patchSetId": 3
      },
      "lineNbr": 218,
      "author": {
        "id": 97483
      },
      "writtenOn": "2022-05-04T18:25:13Z",
      "side": 1,
      "message": "\u003e Not sure ReflogWriter is the right place to decide for which refs we want reflogs.\n\u003e JGit is a library and if the caller set forceWrite \u003d true we should probably do what he said.\n\nTrue, but is there really a use-case where JGit needs to track the logs of all remote refs?\n\n\u003e Git does not create reflogs in bare repos but Gerrit, hosting bare repos, does.\n\nGerrit does not use remote refs on bare repos AFAIK.",
      "parentUuid": "532c89bd_1e2e4342",
      "revId": "76d1107fb5f451e02f36b03b8a9d47c0a7d5f803",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "626c8d15_46239b20",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ReflogWriter.java",
        "patchSetId": 3
      },
      "lineNbr": 218,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-05-05T13:37:13Z",
      "side": 1,
      "message": "ReflogWriter is a low level class which knows how to persist reflogs to the filesystem. Applications using JGit to work on git repositories may want to apply different policies on which refs to create reflogs. Hence I think we should not completely prohibit writing reflogs for remote tracking branches.\n\nI dug a little deeper into the implementation and found the following:\n\nReflogWriter#shouldAutoCreateLog decides for which refs reflog files are created automatically based on the configured value of option core.logAllRefUpdates [1] which is also supported by cgit.\n\nReflogWriter#log writes a reflog message to the corresponding reflog file\n- if the reflog file already exists, also see the comment [2] in Gerrit\n- if ReflogWriter#shouldAutoCreateLog auto-creates the corresponding reflog file\n- or if the forceWrite flag is set to true by the application\n\nThe intention of RefUpdate#setForceRefLog [3] is to enable applications to change the default behaviour on which refs reflogs should be written on a per-update basis.\n\nHow did you set core.logAllRefUpdates when testing this with git/jgit ?\n\nAFAICS the only gap in the current implementation to enable fully relying on reflogs for implementing audit logs for refs is a way to archive reflogs when their ref is deleted. Currently the reflog is deleted when its corresponding ref is deleted. AFAIR there were discussions on the git list how this could be implemented. Not sure if cgit implemented such an archiving solution.\n\n[1] https://git-scm.com/docs/git-config#Documentation/git-config.txt-corelogAllRefUpdates\n[2] https://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/server/git/LocalDiskRepositoryManager.java#210\n[3] https://git.eclipse.org/r/c/jgit/jgit/+/102396",
      "parentUuid": "66d3a4fe_3d1bb50f",
      "revId": "76d1107fb5f451e02f36b03b8a9d47c0a7d5f803",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a624cb4_85e79167",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ReflogWriter.java",
        "patchSetId": 3
      },
      "lineNbr": 218,
      "author": {
        "id": 97483
      },
      "writtenOn": "2022-05-05T14:13:09Z",
      "side": 1,
      "message": "\u003e ReflogWriter is a low level class which knows how to persist reflogs to the filesystem. Applications using JGit to work on git repositories may want to apply different policies on which refs to create reflogs. Hence I think we should not completely prohibit writing reflogs for remote tracking branches.\n\nAre you aware of anyone using this functionality?\nIt is specific to JGit as Git doesn\u0027t do it AFAIK.\n\n\u003e I dug a little deeper into the implementation and found the following:\n\u003e \n\u003e ReflogWriter#shouldAutoCreateLog decides for which refs reflog files are created automatically based on the configured value of option core.logAllRefUpdates [1] which is also supported by cgit.\n\u003e \n\u003e ReflogWriter#log writes a reflog message to the corresponding reflog file\n\u003e - if the reflog file already exists, also see the comment [2] in Gerrit\n\u003e - if ReflogWriter#shouldAutoCreateLog auto-creates the corresponding reflog file\n\u003e - or if the forceWrite flag is set to true by the application\n\u003e \n\u003e The intention of RefUpdate#setForceRefLog [3] is to enable applications to change the default behaviour on which refs reflogs should be written on a per-update basis.\n\u003e \n\u003e How did you set core.logAllRefUpdates when testing this with git/jgit ?\n\nRunning on defaults, I did not set anything.\n\n\u003e AFAICS the only gap in the current implementation to enable fully relying on reflogs for implementing audit logs for refs is a way to archive reflogs when their ref is deleted. Currently the reflog is deleted when its corresponding ref is deleted. AFAIR there were discussions on the git list how this could be implemented. Not sure if cgit implemented such an archiving solution.\n\nDo you see a use-case where the client should be able to recover a remote-tracking ref deleted on the server?\nIs a performance degradation (and filesystem overload of millions of inodes) of hundreds of times slower clone worth the benefit, or should this be an exceptional situation confirmed on purpose?\n\n\u003e [1] https://git-scm.com/docs/git-config#Documentation/git-config.txt-corelogAllRefUpdates\n\u003e [2] https://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/server/git/LocalDiskRepositoryManager.java#210\n\u003e [3] https://git.eclipse.org/r/c/jgit/jgit/+/102396\n\nThanks for the refs, I\u0027ll have a look.",
      "parentUuid": "626c8d15_46239b20",
      "revId": "76d1107fb5f451e02f36b03b8a9d47c0a7d5f803",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dbf6428_61d79684",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ReflogWriter.java",
        "patchSetId": 3
      },
      "lineNbr": 218,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-05-05T14:59:51Z",
      "side": 1,
      "message": "I don\u0027t know which applications using jgit might want to write reflogs for remote tracking branches. Must be an application using non-bare repos since bare repos typically don\u0027t have remote tracking branches.\n\nI think it could make sense for some use case to enable writing reflogs for remote tracking branches. E.g. some application may want an audit log for updates of remote tracking branches to track when they got updated.\n\nI think jgit should implement the semantics of core.logAllRefUpdates as defined in [1] unless this documentation is stale and cgit changed that for a good reason. \nIt says:\n\n\"If this configuration variable is set to true, missing \"$GIT_DIR/logs/\u003cref\u003e\" file is automatically created for branch heads (i.e. under refs/heads/), remote refs (i.e. under refs/remotes/), note refs (i.e. under refs/notes/), and the symbolic ref HEAD.\"\n...\n\"This value is true by default in a repository that has a working directory associated with it, and false by default in a bare repository.\"\n\nReading this it seems the behavior you observed matches this definition. I didn\u0027t check yet if cgit behaves according to this definition, if not this should be discussed on the git list.\n\nThe forceWrite flag was introduced to support some use case in Gerrit where it wants to decide on a single RefUpdate level that a reflog entry should be written unconditionally. I think we should not break this flag\u0027s semantics for any ref. I.e. if it is true the reflog should be written in any case.\n\nWhat\u0027s a use case for a repository with millions of branches someone wants to fully clone to a non-bare repository ? Does it really need all branches in the non-bare clone ? The repositories I saw so far had sometimes thousands but not millions.",
      "parentUuid": "2a624cb4_85e79167",
      "revId": "76d1107fb5f451e02f36b03b8a9d47c0a7d5f803",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52b77c59_32161667",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/ReflogWriter.java",
        "patchSetId": 3
      },
      "lineNbr": 218,
      "author": {
        "id": 97483
      },
      "writtenOn": "2022-05-05T15:26:58Z",
      "side": 1,
      "message": "\u003e I don\u0027t know which applications using jgit might want to write reflogs for remote tracking branches. Must be an application using non-bare repos since bare repos typically don\u0027t have remote tracking branches.\n\u003e \n\u003e I think it could make sense for some use case to enable writing reflogs for remote tracking branches. E.g. some application may want an audit log for updates of remote tracking branches to track when they got updated.\n\u003e \n\u003e I think jgit should implement the semantics of core.logAllRefUpdates as defined in [1] unless this documentation is stale and cgit changed that for a good reason. \n\u003e It says:\n\u003e \n\u003e \"If this configuration variable is set to true, missing \"$GIT_DIR/logs/\u003cref\u003e\" file is automatically created for branch heads (i.e. under refs/heads/), remote refs (i.e. under refs/remotes/), note refs (i.e. under refs/notes/), and the symbolic ref HEAD.\"\n\u003e ...\n\u003e \"This value is true by default in a repository that has a working directory associated with it, and false by default in a bare repository.\"\n\nI know, however, git behaves differently for a git clone. Even if I set core.logAllRefUpdates to always, when I clone a repository with 2.8M refs, I get:\n\n```\n$ git branch -r | wc -l\n2800058\n\n$ git branch -r | wc -l\n1\n\n$find .git/logs -type f | wc -l\n3\n```\n\n\u003e Reading this it seems the behavior you observed matches this definition. I didn\u0027t check yet if cgit behaves according to this definition, if not this should be discussed on the git list.\n\nI believe the interpretation of what\u0027s written is different in jgit and cgit.\nI do see some .git/logs/refs/remotes/* in my local Gerrit workspace/.git/logs, but they are not all created during clones.\n\n\u003e The forceWrite flag was introduced to support some use case in Gerrit where it wants to decide on a single RefUpdate level that a reflog entry should be written unconditionally. I think we should not break this flag\u0027s semantics for any ref. I.e. if it is true the reflog should be written in any case.\n\nThat\u0027s not my case and yes, if set we should honour it.\n\n\u003e What\u0027s a use case for a repository with millions of branches someone wants to fully clone to a non-bare repository ? Does it really need all branches in the non-bare clone ? The repositories I saw so far had sometimes thousands but not millions.\n\nThe clone is for 1 single branch, but JGit creates the $GIT_DIR/logs/ for *ALL* remote refs, even if they are not cloned or checked out.",
      "parentUuid": "7dbf6428_61d79684",
      "revId": "76d1107fb5f451e02f36b03b8a9d47c0a7d5f803",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}