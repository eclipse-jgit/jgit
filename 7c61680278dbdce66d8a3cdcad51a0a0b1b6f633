{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "787e0e93_0933944e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1541
      },
      "writtenOn": "2022-12-15T04:38:36Z",
      "side": 1,
      "message": "@Matthias, could you take a look and provide your feedback please?",
      "revId": "7c61680278dbdce66d8a3cdcad51a0a0b1b6f633",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "236bb6e6_402bd61b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 350,
      "author": {
        "id": 1541
      },
      "writtenOn": "2023-01-11T05:12:20Z",
      "side": 1,
      "message": "Is this going to erroneously fire when the set of excludes changed but the refs didn\u0027t actually change?",
      "range": {
        "startLine": 350,
        "startChar": 2,
        "endLine": 350,
        "endChar": 20
      },
      "revId": "7c61680278dbdce66d8a3cdcad51a0a0b1b6f633",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd57cdbd_8ab3d006",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 350,
      "author": {
        "id": 307638
      },
      "writtenOn": "2023-01-16T09:50:18Z",
      "side": 1,
      "message": "I\u0027m afraid yes. But this issue is present today as well when we pass in a different prefix. Do you think we can solve it independent from this change?",
      "parentUuid": "236bb6e6_402bd61b",
      "range": {
        "startLine": 350,
        "startChar": 2,
        "endLine": 350,
        "endChar": 20
      },
      "revId": "7c61680278dbdce66d8a3cdcad51a0a0b1b6f633",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "daea7105_8e87708e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 350,
      "author": {
        "id": 1541
      },
      "writtenOn": "2023-01-17T15:32:19Z",
      "side": 1,
      "message": "If it\u0027s an existing issue, yes. Do you know if it\u0027s already tracked in the bug tracker? If not, we should create a test case showing the problem and an issue for it (with a link to the change with the test case).",
      "parentUuid": "cd57cdbd_8ab3d006",
      "range": {
        "startLine": 350,
        "startChar": 2,
        "endLine": 350,
        "endChar": 20
      },
      "revId": "7c61680278dbdce66d8a3cdcad51a0a0b1b6f633",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ba6b21a_f6ebf154",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 350,
      "author": {
        "id": 307638
      },
      "writtenOn": "2023-01-17T15:34:15Z",
      "side": 1,
      "message": "Ack. I\u0027ll check the existing bugs and create one if not present.",
      "parentUuid": "daea7105_8e87708e",
      "range": {
        "startLine": 350,
        "startChar": 2,
        "endLine": 350,
        "endChar": 20
      },
      "revId": "7c61680278dbdce66d8a3cdcad51a0a0b1b6f633",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c406c80c_7a8fd4f0",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 371,
      "author": {
        "id": 5082
      },
      "writtenOn": "2023-01-11T01:11:47Z",
      "side": 1,
      "message": "Do this on line 340 when you get the packed refs to be more consistent with the loose ref approach (and to make it easier to pass that exclusion list down to getPackedRefs() someday)?",
      "range": {
        "startLine": 371,
        "startChar": 28,
        "endLine": 371,
        "endChar": 52
      },
      "revId": "7c61680278dbdce66d8a3cdcad51a0a0b1b6f633",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88eb7878_4bdd1925",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 371,
      "author": {
        "id": 1541
      },
      "writtenOn": "2023-01-11T05:12:20Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "c406c80c_7a8fd4f0",
      "range": {
        "startLine": 371,
        "startChar": 28,
        "endLine": 371,
        "endChar": 52
      },
      "revId": "7c61680278dbdce66d8a3cdcad51a0a0b1b6f633",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52114389_c97ec598",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 371,
      "author": {
        "id": 307638
      },
      "writtenOn": "2023-01-16T09:50:18Z",
      "side": 1,
      "message": "Right, I intentionally did this way. The reason is, we want to resolve the symbolic-refs, for which we need the full packed-refs list.\n\nFor example, when we exclude all branches, like getRefsByPrefixWithExclusions(RefDatabase.ALL, Lists.of(\"refs/heads/\")). When a symbolic-ref HEAD is pointing to a branch in packed-ref, then the symbolic-ref will not be resolved if we don\u0027t have full packed-ref list.\n\nWhile resolving a symbolic-ref, we do the following (the logic is more than what I said, but this the logic in a nut shell),\n1. Look into already scanned loose refs. returns from here if found\n2. Scan the ref, returns from here if found\n3. Look into packed refs list and return if found\n\nHope this explains it. Good question. Thanks.",
      "parentUuid": "88eb7878_4bdd1925",
      "range": {
        "startLine": 371,
        "startChar": 28,
        "endLine": 371,
        "endChar": 52
      },
      "revId": "7c61680278dbdce66d8a3cdcad51a0a0b1b6f633",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8007ba59_6a2b8f03",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 391,
      "author": {
        "id": 5082
      },
      "writtenOn": "2023-01-11T01:11:47Z",
      "side": 1,
      "message": "Use Immutable instead of copying which is expensive?",
      "revId": "7c61680278dbdce66d8a3cdcad51a0a0b1b6f633",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99f31299_b65bf70c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 391,
      "author": {
        "id": 1541
      },
      "writtenOn": "2023-01-11T05:12:20Z",
      "side": 1,
      "message": "Yeah, using Collections.unmodifiableList() [1] would be better and matches what the other implementors of this method do, my mistake.\n\n[1] https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Collections.html#unmodifiableList(java.util.List)",
      "parentUuid": "8007ba59_6a2b8f03",
      "revId": "7c61680278dbdce66d8a3cdcad51a0a0b1b6f633",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8450e4c_5ef81da5",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 6
      },
      "lineNbr": 391,
      "author": {
        "id": 307638
      },
      "writtenOn": "2023-01-16T09:50:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99f31299_b65bf70c",
      "revId": "7c61680278dbdce66d8a3cdcad51a0a0b1b6f633",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}