{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "699f6a9e_f0873e36",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-01-20T20:45:28Z",
      "side": 1,
      "message": "@Ivan @David @Matthias any further feedback?",
      "revId": "c8a1b28aa8d4a154a6b601ff806a79186254232e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b02da0ab_17af9a94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-01-23T16:09:27Z",
      "side": 1,
      "message": "Do you have measurements for some repositories (preferably public so I can try to reproduce) showing performance improvements ? What are the stats of these repos ?\n\nI tried with a mirror clone of a huge internal repository having 20m commits, 2.3m refs, 1k branches and 1.2k tags and couldn\u0027t find a significant difference in performance of both running jgit gc (around 78min) and cloning from that repo after the gc. I cloned (`--bare` but not `--mirror`) on the same machine via file:// protocol, clones took around 3min.\nSize of the bitmap index with this change for this repo is 167MB, with the predecessor change 176MB.",
      "parentUuid": "699f6a9e_f0873e36",
      "revId": "c8a1b28aa8d4a154a6b601ff806a79186254232e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4eea630d_d8fa57e3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-01-29T23:44:34Z",
      "side": 1,
      "message": "\u003e Do you have measurements for some repositories (preferably public so I can try to reproduce) showing performance improvements ? What are the stats of these repos ?\n\u003e \n\u003e I tried with a mirror clone of a huge internal repository having 20m commits, 2.3m refs, 1k branches and 1.2k tags and couldn\u0027t find a significant difference in performance of both running jgit gc (around 78min) and cloning from that repo after the gc. I cloned (`--bare` but not `--mirror`) on the same machine via file:// protocol, clones took around 3min.\n\u003e Size of the bitmap index with this change for this repo is 167MB, with the predecessor change 176MB.\n\nHow many of the 1.2k tags were annotated?\n\nI\u0027ve added some metrics to the commit message of the performance improvement I\u0027ve measured with and without this change.",
      "parentUuid": "b02da0ab_17af9a94",
      "revId": "c8a1b28aa8d4a154a6b601ff806a79186254232e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89c73ac9_62e16474",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-01-30T09:56:53Z",
      "side": 1,
      "message": "in the repository I tested with only 3 are lightweight tags, the other 1216 are annotated tags",
      "parentUuid": "4eea630d_d8fa57e3",
      "revId": "c8a1b28aa8d4a154a6b601ff806a79186254232e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afd43692_304ceb92",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-01-30T10:26:02Z",
      "side": 1,
      "message": "I believe the bitmap can still keep up with 1216 additional annotated tags, but not in my case with 88k annotated tags.",
      "parentUuid": "89c73ac9_62e16474",
      "revId": "c8a1b28aa8d4a154a6b601ff806a79186254232e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "396143c7_9d34bdfa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-01-30T17:23:23Z",
      "side": 1,
      "message": "I tested again with another huge repository, it has 20m refs, 27m objects, 8k annotated tags.\n\nWhen using this patch creating the bitmap index took 1:23min, without this patch 4:24min. Though total time for jgit gc was 31:15min with this patch and 23:07min without this patch.\n\nI added timing information to the progress monitor and it turned out that the difference is in counting phase for non-heads objects which took 21:55min with this patch and 10:39min without this patch.\n\nHere the configuration I used for these tests:\n\nJava options passed to jgit cli via environment variable `java_args`:\n $ time java_args\u003d\"-Xmx32g -XX:+UseParallelGC\" jgit gc\n\ngit config set in ~/.gitconfig:\n\nincreasing jgit cache helped quite a bit\n core.packedGitLimit \u003d 1g\n\nalso increasing these packing options helped:\n pack.deltaCacheLimit \u003d 65535\n pack.deltaCacheSize \u003d 1g\n\nWhich Java and git configuration did you use in your tests ?",
      "parentUuid": "afd43692_304ceb92",
      "revId": "c8a1b28aa8d4a154a6b601ff806a79186254232e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87180b80_0de76198",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-01-31T15:25:27Z",
      "side": 1,
      "message": "ok, now I understand why timing given in my last comment looked so upside down.\nRunning gc itself also benefits from an existing bitmap index and its content.\n\nI did another round of tests where I first deleted the bitmap index, then run gc and run gc again where it benefits from the bitmap index created in the first run.\nI did that with and without this patch and here are the results:\n\nWithout this patch:\n\n1. run, no bitmap index available for jgit gc\n\n $ time java_args\u003d\"-Xmx32g -XX:+UseParallelGC\" jgit gc\n Pack refs:              100% (2005665/2005665) [0.051s]\n Counting objects:       8743892 [55.709s]\n Finding sources:        100% (8743892/8743892) [30.235s]\n Getting sizes:          100% (1777531/1777531) [2.938s]\n Writing objects:        100% (8743892/8743892) [1:27.686m]\n Selecting commits:      616301 [4.630s]\n Selecting commits:      100% (616301/616301) [15.633s]\n Building bitmaps:       100% (8908/8908) [5:03.022m]\n Counting objects:       26983761 [13:21.511m]\n Finding sources:        100% (26983761/26983761) [49.113s]\n Getting sizes:          100% (2255625/2255625) [2.849s]\n Writing objects:        100% (26983761/26983761) [2:48.035m]\n Prune loose objects also found in pack files: 100% (3/3) [0.000s]\n Prune loose, unreferenced objects: 100% (3/3) [0.000s]\n\n real\t26m32.767s\n user\t25m15.270s\n sys\t2m53.616s\n\n2. run, using bitmap index from previous run\n\n $ time java_args\u003d\"-Xmx32g -XX:+UseParallelGC\" jgit gc\n Pack refs:              100% (2005665/2005665) [0.049s]\n Counting objects:       8743892 [55.334s]\n Finding sources:        100% (8743892/8743892) [31.467s]\n Getting sizes:          100% (1777531/1777531) [2.906s]\n Writing objects:        100% (8743892/8743892) [1:29.360m]\n Selecting commits:      50130 [1.193s]\n Selecting commits:      100% (50130/50130) [1.520s]\n Building bitmaps:       100% (8897/8897) [33:46.534m]\n Counting objects:       26983761 [13:13.325m]\n Finding sources:        100% (26983761/26983761) [49.583s]\n Getting sizes:          100% (2255625/2255625) [2.730s]\n Writing objects:        100% (26983761/26983761) [2:57.012m]\n Prune loose objects also found in pack files: 100% (3/3) [0.000s]\n Prune loose, unreferenced objects: 100% (3/3) [0.000s]\n\n real\t55m2.050s\n user\t54m14.827s\n sys\t3m3.969s\n\nInterestingly the bitmap index created without your patch slows down running another gc by more than a factor of 2\n\nWith this patch:\n\n1. run, no bitmap index available for jgit gc\n\n $ time java_args\u003d\"-Xmx32g -XX:+UseParallelGC\" jgit gc\n Pack refs:              100% (2005665/2005665) [0.049s]\n Counting objects:       8743892 [54.129s]\n Finding sources:        100% (8743892/8743892) [32.999s]\n Getting sizes:          100% (1777531/1777531) [2.032s]\n Writing objects:        100% (8743892/8743892) [1:30.843m]\n Selecting commits:      616269 [4.176s]\n Selecting commits:      100% (616269/616269) [16.106s]\n Building bitmaps:       100% (1987/1987) [3:04.195m]\n Counting objects:       26983761 [20:01.611m]\n Finding sources:        100% (26983761/26983761) [53.714s]\n Getting sizes:          100% (2255625/2255625) [3.426s]\n Writing objects:        100% (26983761/26983761) [2:54.481m]\n Prune loose objects also found in pack files: 100% (3/3) [0.000s]\n Prune loose, unreferenced objects: 100% (3/3) [0.000s]\n\n real\t31m28.703s\n user\t29m1.518s\n sys\t3m3.728s\n\nThe first gc was a bit slower than without your patch. Computing the bitmap index is faster since it has to traverse less of the overall version graph. Counting objects reachable from non-heads is slower, not sure why.\n\n2. run, using bitmap index from previous run\n\n $ time java_args\u003d\"-Xmx32g -XX:+UseParallelGC\" jgit gc\n Pack refs:              100% (2005665/2005665) [0.047s]\n Counting objects:       8743892 [56.365s]\n Finding sources:        100% (8743892/8743892) [29.802s]\n Getting sizes:          100% (1777531/1777531) [2.938s]\n Writing objects:        100% (8743892/8743892) [1:31.495m]\n Selecting commits:      50098 [0.842s]\n Selecting commits:      100% (50098/50098) [1.241s]\n Building bitmaps:       100% (1976/1976) [1:26.572m]\n Counting objects:       26983761 [11:04.738m]\n Finding sources:        100% (26983761/26983761) [50.086s]\n Getting sizes:          100% (2255625/2255625) [2.675s]\n Writing objects:        100% (26983761/26983761) [2:48.654m]\n Prune loose objects also found in pack files: 100% (3/3) [0.000s]\n Prune loose, unreferenced objects: 100% (3/3) [0.000s]\n\n real\t20m26.318s\n user\t19m3.091s\n sys\t2m50.885s",
      "parentUuid": "396143c7_9d34bdfa",
      "revId": "c8a1b28aa8d4a154a6b601ff806a79186254232e",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}