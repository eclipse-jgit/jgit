{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "51e09961_b6ba1e67",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-01-20T00:33:16Z",
      "side": 1,
      "message": "I thought of this sorting as a simpler affair, a method that receives a long[] of values (or a List\u003cPacketObjectInfo\u003e) and returns an int[] of \"sorted positions\".\n\nThe Comparator\u003cInteger\u003e will need to box the \"int\" creating (reusing?) instances of Integer that has a creation/GC cost.\n\nNot sure how expensive that is, but would rather avoid it. \n\nI still added few comments on the current code.\n\n",
      "revId": "50c7f0abae8674b11767cea39953f74a3c0b300f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9af76d7f_73a74aff",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackReverseIndexWriterV1.java",
        "patchSetId": 21
      },
      "lineNbr": 44,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-01-20T00:33:16Z",
      "side": 1,
      "message": "Nit: Put in the javadoc that they are expected in SHA1 order and make the variable name shorter (objs, allObjs, objsById, objsBySHA1... sounds reasonable to me).\n\n\"indexPositionsInOffsetOrder\": maybe \"posByOffset\" is OK, or if you are strict with the full words \"positionsByOffset\".",
      "range": {
        "startLine": 44,
        "startChar": 36,
        "endLine": 44,
        "endChar": 64
      },
      "revId": "50c7f0abae8674b11767cea39953f74a3c0b300f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d67dc0c_66598e28",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackReverseIndexWriterV1.java",
        "patchSetId": 21
      },
      "lineNbr": 44,
      "author": {
        "id": 307629
      },
      "writtenOn": "2023-01-20T18:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9af76d7f_73a74aff",
      "range": {
        "startLine": 44,
        "startChar": 36,
        "endLine": 44,
        "endChar": 64
      },
      "revId": "50c7f0abae8674b11767cea39953f74a3c0b300f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "434e73e0_09cbebd3",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/IntList.java",
        "patchSetId": 21
      },
      "lineNbr": 42,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-01-20T00:33:16Z",
      "side": 1,
      "message": "This is a public class in a \"non internal\" package, so it needs the @since annotation in the new public methods \n\n(Releases: https://wiki.eclipse.org/JGit/New_and_Noteworthy)",
      "revId": "50c7f0abae8674b11767cea39953f74a3c0b300f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77439ad3_0fc439f0",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/IntList.java",
        "patchSetId": 21
      },
      "lineNbr": 42,
      "author": {
        "id": 307629
      },
      "writtenOn": "2023-01-20T18:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "434e73e0_09cbebd3",
      "revId": "50c7f0abae8674b11767cea39953f74a3c0b300f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "705ea7a1_4351d32b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/IntList.java",
        "patchSetId": 21
      },
      "lineNbr": 44,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-01-20T00:33:16Z",
      "side": 1,
      "message": "nit: The convention in java (thinking e.g. List interface or Arrays methods) the start is always inclusive and the end exclusive. Mention it in the javadoc but not in the parameter names.",
      "revId": "50c7f0abae8674b11767cea39953f74a3c0b300f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8375673b_f318f27b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/IntList.java",
        "patchSetId": 21
      },
      "lineNbr": 44,
      "author": {
        "id": 307629
      },
      "writtenOn": "2023-01-20T18:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "705ea7a1_4351d32b",
      "revId": "50c7f0abae8674b11767cea39953f74a3c0b300f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47e6d9b7_21ccc9df",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/IntList.java",
        "patchSetId": 21
      },
      "lineNbr": 49,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-01-20T00:33:16Z",
      "side": 1,
      "message": "Maybe a constructor method would be clearer in this case:\npublic static IntList filledWithRange(int start, int end) {...}\n\n\nA constructor with 1 int and another with 2 ints look like \"telescopic constructors\" but they are not.\n\nAlso from effective java: \"One advantage of static factory methods is that, unlike constructors, they have names.\"\n\nActually, if we are going to use it only from 0..n, we could consider a filledWithPosition(int max) constructor...",
      "revId": "50c7f0abae8674b11767cea39953f74a3c0b300f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d3f5447_cd8423b2",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/IntList.java",
        "patchSetId": 21
      },
      "lineNbr": 49,
      "author": {
        "id": 307629
      },
      "writtenOn": "2023-01-20T18:23:58Z",
      "side": 1,
      "message": "Changed to `filledWithRange`. It\u0027s more generalized/reusable than `filledWithPosition`.",
      "parentUuid": "47e6d9b7_21ccc9df",
      "revId": "50c7f0abae8674b11767cea39953f74a3c0b300f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e6e3351_c0700116",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/IntList.java",
        "patchSetId": 21
      },
      "lineNbr": 153,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-01-20T00:33:16Z",
      "side": 1,
      "message": "No need of the \"usingComparator\". #sort(Comparator\u003cInteger\u003e) says the same with fewer words.",
      "revId": "50c7f0abae8674b11767cea39953f74a3c0b300f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "290cf75f_134faa8f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/IntList.java",
        "patchSetId": 21
      },
      "lineNbr": 153,
      "author": {
        "id": 307629
      },
      "writtenOn": "2023-01-20T18:23:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8e6e3351_c0700116",
      "revId": "50c7f0abae8674b11767cea39953f74a3c0b300f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "125cd2d4_806ee83b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/IntList.java",
        "patchSetId": 21
      },
      "lineNbr": 170,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-01-20T00:33:16Z",
      "side": 1,
      "message": "I suspect this will box the values from int to Integer, creating/freeing a lot of objects in memory during the sorting...",
      "range": {
        "startLine": 170,
        "startChar": 44,
        "endLine": 170,
        "endChar": 54
      },
      "revId": "50c7f0abae8674b11767cea39953f74a3c0b300f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "373fadb4_f18eb65a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/IntList.java",
        "patchSetId": 21
      },
      "lineNbr": 170,
      "author": {
        "id": 307629
      },
      "writtenOn": "2023-01-20T18:23:58Z",
      "side": 1,
      "message": "Let\u0027s meet to discuss this and the top-level comment",
      "parentUuid": "125cd2d4_806ee83b",
      "range": {
        "startLine": 170,
        "startChar": 44,
        "endLine": 170,
        "endChar": 54
      },
      "revId": "50c7f0abae8674b11767cea39953f74a3c0b300f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52803ed9_0bc279f4",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/util/IntList.java",
        "patchSetId": 21
      },
      "lineNbr": 170,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-01-24T18:18:02Z",
      "side": 1,
      "message": "Recap of our discussion: casting to Integer (or Long or a boxed type) potentially creates many obj instances that are unnecessary for this comparison. Those introduce memory consumption and a cost creating/gc-ing them. On the other hand, the cost is not accurately measured and avoiding it hurts readability.\n\nOriginally I was suggesting to tweak the quicksort to do the comparisons over the values, which is tailor-made code for this use-case. \n\nMaybe we could get both, readability and performance, defining our own interface to compare (e.g. UnboxedIntComparator { int compare(int a, int b); }\" that doesn\u0027t need the unboxing?",
      "parentUuid": "373fadb4_f18eb65a",
      "range": {
        "startLine": 170,
        "startChar": 44,
        "endLine": 170,
        "endChar": 54
      },
      "revId": "50c7f0abae8674b11767cea39953f74a3c0b300f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}