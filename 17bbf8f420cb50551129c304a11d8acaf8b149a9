{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "82d3d077_64a558f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1037863
      },
      "writtenOn": "2024-04-12T20:22:12Z",
      "side": 1,
      "message": "@xingkhuang thank you for your review. I updated the commit message based on your comments.",
      "revId": "17bbf8f420cb50551129c304a11d8acaf8b149a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b897e62_22b41d95",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1037863
      },
      "writtenOn": "2024-04-12T20:50:31Z",
      "side": 1,
      "message": "The only change between the first successful CI run and the second failing CI run was only in the commit message. So I suspect a flaky test setup.\nIs there a way to request another run?",
      "revId": "17bbf8f420cb50551129c304a11d8acaf8b149a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35340e31_cfcfe014",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2024-04-12T21:16:34Z",
      "side": 1,
      "message": "im not very familiar with RFC 2396, but i wonder if there\u0027s a library that already tracks these reserved characters, instead of having us hard coding them.",
      "revId": "17bbf8f420cb50551129c304a11d8acaf8b149a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60578535_1e2e03fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1037863
      },
      "writtenOn": "2024-04-17T18:33:29Z",
      "side": 1,
      "message": "I don\u0027t think it is worth to add a dependency to not store this range. The amount of data is minimal and handling an additional dependency will raise questions about collisions when integrated into larger works and how to handle updates of that dependency.",
      "parentUuid": "35340e31_cfcfe014",
      "revId": "17bbf8f420cb50551129c304a11d8acaf8b149a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dbd396d_c4b7adeb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2024-04-26T19:39:04Z",
      "side": 1,
      "message": "What\u0027s the motivation for this change ?\n\nLooking at the can of worms between RFC 2396 vs RFC 3986 [1] I am not sure why we should do this.\n\n[1] https://cr.openjdk.org/~dfuchs/writeups/updating-uri/",
      "revId": "17bbf8f420cb50551129c304a11d8acaf8b149a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "817c8e1f_6dcfbf73",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1037863
      },
      "writtenOn": "2024-04-26T21:02:01Z",
      "side": 1,
      "message": "The motiviation is that jgit iself makes use of `java.net.URL` in `org.eclipse.jgit.transport.TransportHttp.toURL(URIish)`. The problem can be reduced to this:\n\n```\npublic class URIIshTest {\n    public static void main(String[] args) throws Exception {\n        URIish uriish \u003d new URIish(\"https://test.demo/hallo.git\");\n        uriish \u003d uriish.setUser(\"dummy\\\\user\");\n        Transport.open(uriish);\n    }\n}\n```\n\nresulting in:\n\n```\nException in thread \"main\" org.eclipse.jgit.errors.NotSupportedException: Invalid URL https://dummy\\user@test.demo/hallo.git\n\tat org.eclipse.jgit.transport.TransportHttp.setURI(TransportHttp.java:322)\n\tat org.eclipse.jgit.transport.TransportHttp.\u003cinit\u003e(TransportHttp.java:336)\n\tat org.eclipse.jgit.transport.TransportHttp$1.open(TransportHttp.java:204)\n\tat org.eclipse.jgit.transport.Transport.open(Transport.java:560)\n\tat URIIshTest.main(URIIshTest.java:40)\nCaused by: java.net.MalformedURLException: Illegal character found in user-info: \u0027\\\u0027\n\tat java.base/java.net.URL.\u003cinit\u003e(URL.java:806)\n\tat java.base/java.net.URL.\u003cinit\u003e(URL.java:654)\n\tat java.base/java.net.URL.\u003cinit\u003e(URL.java:590)\n\tat org.eclipse.jgit.transport.TransportHttp.toURL(TransportHttp.java:304)\n\tat org.eclipse.jgit.transport.TransportHttp.setURI(TransportHttp.java:319)\n\t... 4 more\nCaused by: java.lang.IllegalArgumentException: Illegal character found in user-info: \u0027\\\u0027\n\tat java.base/java.net.URLStreamHandler.setURL(URLStreamHandler.java:527)\n\tat java.base/java.net.URLStreamHandler.parseURL(URLStreamHandler.java:326)\n\tat java.base/java.net.URL.\u003cinit\u003e(URL.java:801)\n\t... 8 more\n```\n\nThat is observed with 6.9.0.202403050737-r",
      "parentUuid": "4dbd396d_c4b7adeb",
      "revId": "17bbf8f420cb50551129c304a11d8acaf8b149a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a80543e8_5292a82c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/URIish.java",
        "patchSetId": 2
      },
      "lineNbr": 283,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2024-04-12T21:16:34Z",
      "side": 1,
      "message": "why not just keep the old convention of `reserved`? i.e. changing the current line of reserved to match, \n\n```\n  reserved      \u003d \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"\u0026\" | \"\u003d\" | \"+\" |\n                      \"$\" | \",\"\n```\n\n\n\nis there a need to consider all characters outside the ASCII range as reserved as well?",
      "revId": "17bbf8f420cb50551129c304a11d8acaf8b149a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e44e2d6_c0de45ac",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/URIish.java",
        "patchSetId": 2
      },
      "lineNbr": 283,
      "author": {
        "id": 1037863
      },
      "writtenOn": "2024-04-17T18:33:29Z",
      "side": 1,
      "message": "`reserved` and `unreserved` are constructions in the BNF grammer for RFC 2396 URLs used in different contexts.\n\n`reserved` is only used in the `query` and `fragment` parts of hierarchical URLs and opaque URLs.\n\n`unreserved` is referenced in hierarchical URL at various places.\n\n`URIish#escape` will only hit the modified path if it is called with `escapeReservedChars` set to `true`. That is only the case for the `username` and `password` parts.",
      "parentUuid": "a80543e8_5292a82c",
      "revId": "17bbf8f420cb50551129c304a11d8acaf8b149a9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}