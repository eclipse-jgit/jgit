{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "477a3006_bc5f4ccf",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/FollowFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 72,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-03-03T17:57:18Z",
      "side": 1,
      "message": "nit: duplicated javadoc",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65f2f389_e5bf368c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/FollowFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 72,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-03-03T20:49:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "477a3006_bc5f4ccf",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09029d8c_9b7bdfe7",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 33,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-03-03T17:57:18Z",
      "side": 1,
      "message": "nit: \"as\", no capital letter here",
      "range": {
        "startLine": 33,
        "startChar": 3,
        "endLine": 33,
        "endChar": 5
      },
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2279256_b79c2a52",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 33,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-03-03T20:49:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09029d8c_9b7bdfe7",
      "range": {
        "startLine": 33,
        "startChar": 3,
        "endLine": 33,
        "endChar": 5
      },
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c68ba014_523b2a9e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-03-03T17:57:18Z",
      "side": 1,
      "message": "Could we call this \"ChangedPathFilter\"? Then we know what it does and it also hints that it tries to use the bloom filters straight from the name.",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bbb2d18_a8deb48b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-03-03T20:49:13Z",
      "side": 1,
      "message": "\"ChangedPathFilter\" is already in used as a POJO class under the `org.eclipse.jgit.internal.storage.commitgraph` package. It\u0027s a field under the RevCommit class. \n\nMaking this TreeFilter under the treewalk package the same name as the current \"ChangedPathFilter\" field under the RevCommitCG responsible for BF check is rather confusing to read imo. \n\nLike every other TreeFilter impl, the intended usage is always shown under the \"include\" method, i.e. path.include \u0026\u0026 any_diff.include. The sole use of this \"PathAnyDiffFilter\" in a TreeWalk without TreeRevFilter DOES NOT imply the use of Bloom Filters.",
      "parentUuid": "c68ba014_523b2a9e",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4f75281_2e0c28c4",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-03-04T17:12:45Z",
      "side": 1,
      "message": "Maybe ChangePathTreeFilter then?",
      "parentUuid": "5bbb2d18_a8deb48b",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e79f5bc9_1b3ab3ee",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-03-04T18:19:12Z",
      "side": 1,
      "message": "Done. Renamed it to `ChangePathTreeFilter`.",
      "parentUuid": "b4f75281_2e0c28c4",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a13b6ab7_edc478f6",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-03-03T17:57:18Z",
      "side": 1,
      "message": "nit: any reason these are not private or protected?",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be32615b_1840e3ea",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-03-03T20:49:13Z",
      "side": 1,
      "message": "made private.",
      "parentUuid": "a13b6ab7_edc478f6",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f36017da_594052bc",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 68,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-03-03T17:57:18Z",
      "side": 1,
      "message": "I added StringUtils#trim [1] so we can use it here.\n\n[1] https://gerrithub.io/c/eclipse-jgit/jgit/+/1209322",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7d037cd_d4c009f4",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 68,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-03-03T20:49:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f36017da_594052bc",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87a2ac7d_97d05ab2",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 101,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-03-03T17:57:18Z",
      "side": 1,
      "message": "Is there any other use to this flag than signaling the feature has been used? It looks like all invocations do:\n\n```\nx \u003d shouldTreeWalk(commit, revwalk);\nfilterUsed \u003d flag is set\nif (flag is set) \n   unset flag\n```\n\nBesides the convoluted API, somebody in the future could use shouldTreeWalk, forget to remove the flag, or consider it harmless, and cause havoc somewhere else.\n\nIf this is for our bookkeeping, maybe the caller could just do something like: \n```\nx \u003d shouldTreeWalk(commit, revwalk);\nfilterUsed \u003d commit.getChangedPathFilter(revwalk) !\u003d null; \n```\n\nThe bloom filters should be already in memory, so this is not doing extra work  and it is less error prone. It is ugly, but if it is only for our own counting, is a worthy tradeoff.",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83613fba_24499a47",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 101,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-03-03T20:49:13Z",
      "side": 1,
      "message": "yep, this is purely for accounting so we have correct metrics on whether CPF is used within a commit.\n\nhowever `filterUsed \u003d commit.getChangedPathFilter(revwalk) !\u003d null; ` is not sufficient because the existence of CPF DOES NOT imply its usage. \n\nThere are other use cases not covered under this CL on \"existence of CPF DOES NOT imply its usage\". You can see the full use cases under https://gerrithub.io/c/eclipse-jgit/jgit/+/1203632.\n\n1. TreeRevFilter accepts any form of TreeFilter, but only PathAnyDiffFilter serves CPF when CPF is present. \n2. root commits don\u0027t serve BF, even if BF is present. \n3. merge commits have additional flag on whether to serve BF, even if BF is present. \n\nI do think that if we REMOVE the merge commit serving flag, we could keep the  bookkeeping logic strictly in TreeRevFilter and follow the pattern you suggest here, this would solve problem #2 and #3. Something like this in TreeRevFilter. For problem #1, we could make a boolean in TreeFilter like \"serveCpf\", then only have PathAnyDiffFilter with this boolean as true. The end result would be something like\n\n```\nx \u003d shouldTreeWalk(commit, revwalk);\nfilterUsed \u003d false;\ntf.serveChangedPathFilter()\n\t\t\t\t\u0026\u0026 c.getChangedPathFilter(walker) !\u003d null \u0026\u0026 c.getParentCount() \u003e 0;\n```",
      "parentUuid": "87a2ac7d_97d05ab2",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8c91390_191941f9",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 101,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-03-04T17:12:45Z",
      "side": 1,
      "message": "Maybe we can pass a \"Context\"/\"Monitor\"/\"Stats\" object to shouldTreeWalk?\n\nx \u003d shouldTreeWalk(commit, revwalk, ctx);\n\nThen we can get ctx.cpfUsed and maybe some other stats? (merge and so on?). We can reuse the same ctx instance between calls and copy the value to the stats immediately. If no stats are needed, we pass null and there is no cost.",
      "parentUuid": "83613fba_24499a47",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea6e92ff_6eae6399",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 101,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-03-04T18:19:12Z",
      "side": 1,
      "message": "\u003eMaybe we can pass a \"Context\"/\"Monitor\"/\"Stats\" object to shouldTreeWalk?\n\nPassing a monitor is rather unconventional for a RevFilter class, the highest abstraction level we tend to do so is on the RevWalk level, but RevFilter level is at least two levels below RevWalk, with the \"generator\" level in between. For the scope of this CL, I don\u0027t think it\u0027s worth the effort of plumbing the monitor field from RevWalk. \n\n\u003eThen we can get ctx.cpfUsed and maybe some other stats? (merge and so on?). \n\nI assume you would like me to bring the RevFilterStats class of the next patch, https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1192799/20, into this patch? We could do that, but `shouldTreeWalk` alone isn\u0027t enough to determine whether to increment the stats. `shouldTreeWalk` only tells us `ctx.cpfUsed`, but in the event of BF returning true, we still might need the treeWalk logic within `treeRevFilter` to determine whether it\u0027s \"truePositive\" or \"falsePositive\". \n\n\nI also just realize this comment is from Patchset12, which is before the latest patchset having\n```\nboolean changedPathFilterUsed \u003d tf.serveChangedPathFilter()\n\t\t\t\t\t\u0026\u0026 c.getChangedPathFilter(walker) !\u003d null;\n```\nas suggested by you eariler.",
      "parentUuid": "a8c91390_191941f9",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea197c80_6f5333f8",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 101,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-03-04T19:48:22Z",
      "side": 1,
      "message": "\u003e Passing a monitor is rather unconventional for a RevFilter class, the highest abstraction level we tend to do so is on the RevWalk level\n\nI shouldn\u0027t have used the \"Monitor\" name (and definitely wasn\u0027t thinking in RevWalk or the other JGit ProgressMonitors). I meant just passing an object to store the value.\n\nAs I undestand this change the problem is that this function needs to return two booleans: if it shouldTreeWalk and if it really used the changedPathFilter to say so.\n\nSome options:\n1. Return an record with two fields (expensive to instantiate per call)\n2. Return a mutable object (the revfilter returns always the same instance, just populating values)\n3. Return boolean and pass an object as parameter to record the actual use of CPF\n4. Return boolean and add a Consumer\u003cBoolean\u003e parameter to inform the result\n(maybe there are more)\n\nActually #2 sounds even better than the #3 I suggested above.",
      "parentUuid": "ea6e92ff_6eae6399",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eea37cc4_183eb9bf",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 101,
      "author": {
        "id": 1037694
      },
      "writtenOn": "2025-03-04T23:10:02Z",
      "side": 1,
      "message": "Thanks for the options. #1 is an expensive option for each \"include()\" call. #4 is similar to #3, #4 has a callback, #3 has a mutable data container. Also, for #2, I think you meant \"TreeFilter returns always the same instance\".\n\n#2 sounds similar to the existing FollowFilter RenameCallback pattern, which is conventional in the context of TreeRevFilter; but here is the challenge of #2. FollowFilter benefits from this pattern because it is always meant to be the top level TreeFilter within TreeRevFilter. This pattern wouldn\u0027t work well if the FollowFilter is part of combinator TreeFilter. \n\nImo, the original `CHANGED_PATHS_FILTER_APPLIED` revFlag from eariler patchset is the best solution here; it\u0027s a conventional solution for jgit to use the `RevWalk.TEMP_MARK` for tracking states within the different abstraction levels of RevWalk. It\u0027s cheap since it\u0027s just a bit that we set and unset, and it\u0027s easily assessible within `shouldTreeWalk`. You can see the same pattern with `RevWalk.TREE_REV_FILTER_APPLIED`, `RevWalk.UNINTERESTING`, `RevWalk.PARSED`; they are meant to track work done across different abstraction level.\n\nanyway, I made a new atomicBoolean for `changedPathFilterUsed` and propagated into the TreeFilter with a runnable callback. I think this is similar to your #4 idea 😊.",
      "parentUuid": "ea197c80_6f5333f8",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d538fb46_83cf9835",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/treewalk/filter/PathAnyDiffFilter.java",
        "patchSetId": 12
      },
      "lineNbr": 101,
      "author": {
        "id": 1020855
      },
      "writtenOn": "2025-03-05T19:08:23Z",
      "side": 1,
      "message": "Yes, this patchset is close to #4. Still we can make it cheaper passing around an object (#3).\n\nIf we define a: \n```                                                                                        \n+       public static final class MutableBoolean {                                                           \n+               private boolean value;                                                                 \n+                                                                                                      \n+               public boolean booleanValue() {\n+                       return value;\n+               }\n+\n+               void orValue(boolean v) {\n+                       value \u003d value || v;\n+               }\n+\n+               public void reset(){\n+                       value \u003d false;\n+               }\n+       }\n```\n\nThen the TreeRevFilter keeps an instance in the class, calls #reset() and pass it to the TreeFilter on include.\n\nMutableBoolean being an \"or\" makes trivial to pass it through the And/Or combinators, because the condition \"have changed path filters been used\" is always an OR.\n\nI drafted this in https://review.gerrithub.io/c/eclipse-jgit/jgit/+/1210552",
      "parentUuid": "eea37cc4_183eb9bf",
      "revId": "c0e48832cc25aabe9f1e764b3ef2e404ba1f7daa",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}