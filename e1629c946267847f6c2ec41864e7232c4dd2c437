{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8c74b6ea_d957d4c3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-03-03T22:12:33Z",
      "side": 1,
      "message": "nit: missing blank line before footers\n\nI don\u0027t understand exception handling in this class. \n- What\u0027s the purpose of wrapping IOException as PatchApplyException ? \n- Why do some private methods throw this wrapper exception ?\n- Which error conditions warrant a specific exception, which don\u0027t and why ?",
      "revId": "e1629c946267847f6c2ec41864e7232c4dd2c437",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e45aff50_6c46cf1e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 307467
      },
      "writtenOn": "2023-03-08T10:14:13Z",
      "side": 1,
      "message": "Please note that this logic was extracted from `ApplyCommand` at [1]. I can answer based on my understanding of the logic, but it might not be the reasoning which led the original author(s).\n\n\u003e What\u0027s the purpose of wrapping IOException as PatchApplyException ?\nIOException are thrown for a lot of different places, and they are often not intuitive. Wrapping them in another exception with a dedicated message makes the debugging more intuitive IMO.\n\n\u003e Why do some private methods throw this wrapper exception ?\nThey use context variables which are not available outside, e.g. `hh` in `applyText()`.\n\n\u003e Which error conditions warrant a specific exception, which don\u0027t and why ?\nOriginally, this class was throwing either PatchFormatException for badly formatted patches, or PatchApplyException for any other error.\nWe now have the need to split conflict-related exceptions out of the general PatchApplyException, so we can reflect that to the caller. I\u0027ve updated the change description to include the motivation.\n\n[1] https://git.eclipse.org/r/plugins/gitiles/jgit/jgit/+/acde6c8f5b538f900cfede9035584fd2ed654154https://git.eclipse.org/r/plugins/gitiles/jgit/jgit/+/acde6c8f5b538f900cfede9035584fd2ed654154",
      "parentUuid": "8c74b6ea_d957d4c3",
      "revId": "e1629c946267847f6c2ec41864e7232c4dd2c437",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61c95402_8f8380a1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 98905
      },
      "writtenOn": "2023-03-20T18:06:28Z",
      "side": 1,
      "message": "I had some time to look more into this. The code comes from ApplyCommand, which is a GitCommand subclass. As GitCommand#call() can only throw GitAPIException, all (IO)Exceptions had to be wrapped in a GitAPIException, and PatchApplyException was the exception chosen for this.\n\nThe logic was extracted into jgit.patch.PatchApplier, but we didn\u0027t look closely at how this would affect the exception hierarchy, which I think was an error. It\u0027s not subject to the expectation \n\n```\n * Superclass of all exceptions thrown by the API classes in\n * {@code org.eclipse.jgit.api}\n```\n\nAs a programmatic API  PatchApplier it would be appropriate that PatchApplier throws (ie. propagates) IOException. jgit.patch.Patch#parse also throws IOException, like much of the rest of JGit. \n\nI guess my suggestion is to:\n\n1. stop wrapping exceptions in PatchApplier, have it propagate IOExceptions\n2. have a custom exception for \"patch does not apply\" and maybe \"patch does not parse.\" Perhaps there is no need for exceptions even, if you add the information as extra fields in PatchApplier#Result.\n3. inside ApplyCommand, wrap PatchApplier exceptions in a PatchApplyException.\n\nThis means that we would break backward compat for PatchApplier. I guess that\u0027s probably OK because it is a new class, and maybe shouldn\u0027t be generally used but I\u0027m not sure what JGit custom is here.\n\nMatthias?\n\nWhile we sort this out, Gerrit can catch PatchApplyException for the moment to avoid exposing conflicts as status 500 (which hurt our SLOs).",
      "parentUuid": "e45aff50_6c46cf1e",
      "revId": "e1629c946267847f6c2ec41864e7232c4dd2c437",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5f45f44_a55ecd5d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-03-23T10:00:06Z",
      "side": 1,
      "message": "This plan sounds good to me, PatchApplier was introduced in 6.4.0. \n\nI think it\u0027s ok to introduce a minor breakage to rectify this error which happened when PatchApplier was extracted by changing declared exceptions on a low level class. I guess this class is not widely used.",
      "parentUuid": "61c95402_8f8380a1",
      "revId": "e1629c946267847f6c2ec41864e7232c4dd2c437",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eddf8459_dd60d210",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 98905
      },
      "writtenOn": "2023-03-23T10:42:03Z",
      "side": 1,
      "message": "SGTM.\n\nFWIW, when we\u0027re at it, PatchApplier#applyPatch() should probably take a Patch instance (have the caller do Patch#parse). That also avoids having to (un)wrap parse errors to communicate a format error.",
      "parentUuid": "b5f45f44_a55ecd5d",
      "revId": "e1629c946267847f6c2ec41864e7232c4dd2c437",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d094583_62edcfc0",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/errors/PatchConflictException.java",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-03-03T22:12:33Z",
      "side": 1,
      "message": "This is a new class hence this should be 2023 and it looks like you are working for Google not IBM",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 38
      },
      "revId": "e1629c946267847f6c2ec41864e7232c4dd2c437",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53129694_0f630fef",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/errors/PatchConflictException.java",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 307467
      },
      "writtenOn": "2023-03-08T10:14:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d094583_62edcfc0",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 38
      },
      "revId": "e1629c946267847f6c2ec41864e7232c4dd2c437",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d3f59d0_9ad607fa",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/errors/PatchConflictException.java",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-03-03T22:12:33Z",
      "side": 1,
      "message": "we are heading for 6.6 now",
      "range": {
        "startLine": 15,
        "startChar": 3,
        "endLine": 15,
        "endChar": 13
      },
      "revId": "e1629c946267847f6c2ec41864e7232c4dd2c437",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6506de0f_dfeb4fd6",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/api/errors/PatchConflictException.java",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 307467
      },
      "writtenOn": "2023-03-08T10:14:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d3f59d0_9ad607fa",
      "range": {
        "startLine": 15,
        "startChar": 3,
        "endLine": 15,
        "endChar": 13
      },
      "revId": "e1629c946267847f6c2ec41864e7232c4dd2c437",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5095bd89_9eed4c7b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/patch/PatchApplier.java",
        "patchSetId": 1
      },
      "lineNbr": 664,
      "author": {
        "id": 98905
      },
      "writtenOn": "2023-03-07T09:38:38Z",
      "side": 1,
      "message": "isn\u0027t this a conflict too?",
      "range": {
        "startLine": 664,
        "startChar": 13,
        "endLine": 664,
        "endChar": 32
      },
      "revId": "e1629c946267847f6c2ec41864e7232c4dd2c437",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6250f9dc_ae82015e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/patch/PatchApplier.java",
        "patchSetId": 1
      },
      "lineNbr": 664,
      "author": {
        "id": 307467
      },
      "writtenOn": "2023-03-08T10:14:13Z",
      "side": 1,
      "message": "Done.\nAlso for `!fh.getNewId().toObjectId().equals(dce.getObjectId())`.",
      "parentUuid": "5095bd89_9eed4c7b",
      "range": {
        "startLine": 664,
        "startChar": 13,
        "endLine": 664,
        "endChar": 32
      },
      "revId": "e1629c946267847f6c2ec41864e7232c4dd2c437",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}