{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "79a2b32d_e15409e5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 36
      },
      "lineNbr": 42,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-01-19T11:00:29Z",
      "side": 1,
      "message": "I believe there must be some issue with the benchmark: how can be quicker with 10k refs than 50 refs? ðŸ˜®\n\n- 10k refs \u003d\u003e score 44\n- 50 refs \u003d\u003e score 50",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 66
      },
      "revId": "b4c66104fb7502f133989291a4a5595f965771d3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29773eb0_a775bdb0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 36
      },
      "lineNbr": 42,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-01-19T12:21:53Z",
      "side": 1,
      "message": "I believe I misread the benchmark test, after talking with Marcin, my understanding from @matthias.sohn@sap.com \u0027s adaptation of the benchmark is the following:\n\n- For 10 seconds the test keeps on adding elements to the queue\n- Each addition takes around 50 ns\n- During the tests, we will add 200M elements to the queue\n- The queue is resized to avoid exploding\n\nThat\u0027s why the score is similar for 10k refs and 50 refs, which makes total sense.\n\nThat isn\u0027t exactly the scenario that @quic_nasserg@quicinc.com wanted to make sure that we don\u0027t have regressions. I believe his point was to make sure that with a large repo (e.g. 500k commits), creating a RevWalk and navigating to 5 commits is comparable or faster.\n\nHere we are testing the time for one addition repeated 200M times on *the same queue*, which is a valid but different scenario.\n\n@maczech@gmail.com can you upload your original version of the benchmark on a separate change and run it with @quic_nasserg@quicinc.com \u0027s numbers?",
      "parentUuid": "79a2b32d_e15409e5",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 66
      },
      "revId": "b4c66104fb7502f133989291a4a5595f965771d3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c338c3d_228acac5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 36
      },
      "lineNbr": 42,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-01-19T12:23:04Z",
      "side": 1,
      "message": "Sorry, I realised I wrote `refs` but I meant `commits`, apologies for the confusion.",
      "parentUuid": "29773eb0_a775bdb0",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 66
      },
      "revId": "b4c66104fb7502f133989291a4a5595f965771d3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13c0d93f_4e49a6ee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 36
      },
      "lineNbr": 42,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2024-01-19T13:27:20Z",
      "side": 1,
      "message": "I think you misread my benchmark.\n\nthe setup method\n- generates a list of n commits\n- adds 9/10 n commits to the queue\n\nthen the benchmark method\n- adds 1/10 n commits to the queue\n\non each invocation of the benchmark method\n- check if the queue contains n commits (filled up to 100% of n)\n- when the queue reached 100% of n then remove 10% of the commits\n\nThe resulting score gives the avg time it took to add another commit to the queue with queue size between 90-100% of n.\n\nThe benchmark results for the priority queue can be fitted with a linear function.\nThis might be due to the fact that commits are added randomly to the queue.\n\nAnother factor is that timestamp are stored in git with a resolution of 1 second.\nThis has the effect that for low n all commit timestamps are identical since they were generated in \u003c1 second. That means sorting by timestamp is a no-op.\n\nThe benchmark results for DateRevQueue cannot be well fitted by a single 2nd order polynom. I guess the reason is that buildIndex() is run every 1000 commits. I.e. for small n this is never called while for large n it\u0027s dominating the time needed to add commits. I could confirm that by profiling the benchmark using JFR.\n\nFitting results for DateRevQueue \n\nfrom 5 up to 1000 commits yields\n```\nt \u003d 0,0425 * n + 16.7  RÂ²\u003d0,998\n```\nfrom 1000 to 500000 commits\n```\nt \u003d 2,86E-08 nÂ² + 4,34E-03 * n + 283  RÂ²\u003d1,000\n```",
      "parentUuid": "5c338c3d_228acac5",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 66
      },
      "revId": "b4c66104fb7502f133989291a4a5595f965771d3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45ce9612_0825004c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 36
      },
      "lineNbr": 42,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-01-19T13:36:14Z",
      "side": 1,
      "message": "\u003e I think you misread my benchmark.\n\nYes, indeed. Thanks for clarifying. I then believe this benchmark is fine for the purpose of this change and I\u0027ll resolve this comment.\n\nMaybe @maczech@gmail.com can upload a different change with the benchmark for @quic_nasserg@quicinc.com \u0027s use-case.",
      "parentUuid": "13c0d93f_4e49a6ee",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 66
      },
      "revId": "b4c66104fb7502f133989291a4a5595f965771d3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a356e6bf_2cebed01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 36
      },
      "lineNbr": 0,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2024-01-19T12:50:59Z",
      "side": 1,
      "message": "CI job succeeded: https://ci.eclipse.org/jgit/job/stable/job/jgit.gerrit-pipeline.java11/971/",
      "revId": "b4c66104fb7502f133989291a4a5595f965771d3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}