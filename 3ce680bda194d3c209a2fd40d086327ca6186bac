{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2dc5c044_8c94d668",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1541
      },
      "writtenOn": "2023-01-03T18:03:06Z",
      "side": 1,
      "message": "I think we should support and prefer Change I00da88e4cc as the performant alternative to this approach unless there\u0027s a known NFS client that it doesn\u0027t work for.",
      "range": {
        "startLine": 9,
        "startChar": 11,
        "endLine": 10,
        "endChar": 26
      },
      "revId": "3ce680bda194d3c209a2fd40d086327ca6186bac",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16f921c3_24c5290a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-01-07T21:34:16Z",
      "side": 1,
      "message": "I believe it also apply alongside Change I00da88e4cc: within the filesystem resolution, JGit will re-read the packed-refs anyway to prevent racy reads.\n\nThis change would reduce by 90% the time to reload the packed-refs during that window.",
      "parentUuid": "2dc5c044_8c94d668",
      "range": {
        "startLine": 9,
        "startChar": 11,
        "endLine": 10,
        "endChar": 26
      },
      "revId": "3ce680bda194d3c209a2fd40d086327ca6186bac",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd5c2ab6_91da0b3e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1541
      },
      "writtenOn": "2023-01-07T22:24:52Z",
      "side": 1,
      "message": "\u003e I believe it also apply alongside Change I00da88e4cc: within the filesystem resolution, JGit will re-read the packed-refs anyway to prevent racy reads.\n\nOk, so for example, my 3.5 test server has this in ~/.config/jgit/config:\n\n [filesystem \"Oracle Corporation|11.0.12|nfs-server:/nfs/path/to/repos\"]\n \ttimestampResolution \u003d 4000 nanoseconds\n \tminRacyThreshold \u003d 0 nanoseconds\n\nThen given that, IIUC for 10,000 nanoseconds (multiplier of 2.5) after the packed-refs file was modified, FileSnapshot.isModified(\"/nfs/path/to/repos/...\") will return true?\n\nWhat kind of values do you have for filesystem.timestampResolution and filesystem.minRacyThreshold that you\u0027re concerned about this? Maybe I\u0027m being naive, but I don\u0027t think a 10 microsecond window of re-read risk is significant. I found another test host we have where the timestampResolution is 13000 nanoseconds, so that\u0027s a 32.5 microsecond window (still small in my opinion). Your timings below clearly show that the work to read the packed-refs file will take much longer (1000x+?) than that resolution. Are you worried multiple threads are going to start reading the file in that time?",
      "parentUuid": "16f921c3_24c5290a",
      "range": {
        "startLine": 9,
        "startChar": 11,
        "endLine": 10,
        "endChar": 26
      },
      "revId": "3ce680bda194d3c209a2fd40d086327ca6186bac",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9797b06_40178921",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-01-07T22:48:21Z",
      "side": 1,
      "message": "\u003e \u003e I believe it also apply alongside Change I00da88e4cc: within the filesystem resolution, JGit will re-read the packed-refs anyway to prevent racy reads.\n\u003e \n\u003e Ok, so for example, my 3.5 test server has this in ~/.config/jgit/config:\n\u003e \n\u003e  [filesystem \"Oracle Corporation|11.0.12|nfs-server:/nfs/path/to/repos\"]\n\u003e  \ttimestampResolution \u003d 4000 nanoseconds\n\u003e  \tminRacyThreshold \u003d 0 nanoseconds\n\u003e \n\u003e Then given that, IIUC for 10,000 nanoseconds (multiplier of 2.5) after the packed-refs file was modified, FileSnapshot.isModified(\"/nfs/path/to/repos/...\") will return true?\n\nCorrect.\n\n\u003e What kind of values do you have for filesystem.timestampResolution and filesystem.minRacyThreshold that you\u0027re concerned about this? \n\nAlso, bear in mind that other setups may have filesystems with higher resolution values, see slide 9 [1] of Matthia\u0027s talk at the Gerrit User Summit 2019 in Sunnyvale. If you also combine the matrix with the versions of Java 11 vs. 8, you may come up with a resolution of msec.\n\n\u003e Maybe I\u0027m being naive, but I don\u0027t think a 10 microsecond window of re-read risk is significant. I found another test host we have where the timestampResolution is 13000 nanoseconds, so that\u0027s a 32.5 microsecond window (still small in my opinion). Your timings below clearly show that the work to read the packed-refs file will take much longer (1000x+?) than that resolution. Are you worried multiple threads are going to start reading the file in that time?\n\nThe optimisation introduced by this change may be irrelevant for your setup, which is fair. Other setups may have higher resolutions and unfortunately still based on Java 8 (e.g., Gerrit v2.16.x) and would therefore experience a significant performance improvement with this change thanks to the optimised packed-refs loading that is paid with a price of a higher memory footprint.\n\nThe test also shows that even with immediate re-read of the packed-refs, with this settings the data is not reloaded because of the content byte-by-byte comparison, even during the racy-read. That avoids CPU spikes and increase of latency when the packed-refs is updated and then the racy-read window starts.\n\n[1] https://speakerdeck.com/msohn/racy-jgit-a-short-history-of-time?slide\u003d9\n[2] https://speakerdeck.com/msohn/racy-jgit-a-short-history-of-time?slide\u003d11",
      "parentUuid": "fd5c2ab6_91da0b3e",
      "range": {
        "startLine": 9,
        "startChar": 11,
        "endLine": 10,
        "endChar": 26
      },
      "revId": "3ce680bda194d3c209a2fd40d086327ca6186bac",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a04750df_06832d9e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1541
      },
      "writtenOn": "2023-01-10T23:37:00Z",
      "side": 1,
      "message": "\u003e \u003e What kind of values do you have for filesystem.timestampResolution and filesystem.minRacyThreshold that you\u0027re concerned about this? \n\u003e \n\u003e Also, bear in mind that other setups may have filesystems with higher resolution values, see slide 9 [1] of Matthias\u0027s talk at the Gerrit User Summit 2019 in Sunnyvale. If you also combine the matrix with the versions of Java 11 vs. 8, you may come up with a resolution of msec.\n\nSee below.\n\n\u003e \n\u003e \u003e Maybe I\u0027m being naive, but I don\u0027t think a 10 microsecond window of re-read risk is significant. I found another test host we have where the timestampResolution is 13000 nanoseconds, so that\u0027s a 32.5 microsecond window (still small in my opinion). Your timings below clearly show that the work to read the packed-refs file will take much longer (1000x+?) than that resolution. Are you worried multiple threads are going to start reading the file in that time?\n\u003e \n\u003e The optimisation introduced by this change may be irrelevant for your setup, which is fair. Other setups may have higher resolutions and unfortunately still based on Java 8 (e.g., Gerrit v2.16.x) and would therefore experience a significant performance improvement with this change thanks to the optimised packed-refs loading that is paid with a price of a higher memory footprint.\n\nBut even with msec resolution time, is it \u003e100ms or even \u003e10ms? The benchmark numbers for \"expensive\" reading of packed-refs listed in this commit message are \u003e200ms.\n\nYou didn\u0027t answer my questions about the resolution times for your use case or if you\u0027re worried about multiple threads reading packed-refs concurrently. I think those are important to determining if this change or a different change is needed. Can you try to answer them please?",
      "parentUuid": "f9797b06_40178921",
      "range": {
        "startLine": 9,
        "startChar": 11,
        "endLine": 10,
        "endChar": 26
      },
      "revId": "3ce680bda194d3c209a2fd40d086327ca6186bac",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fdadb59_22aceb9e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 241433
      },
      "writtenOn": "2023-01-02T08:54:46Z",
      "side": 1,
      "message": "nit: `.` not needed",
      "range": {
        "startLine": 18,
        "startChar": 39,
        "endLine": 18,
        "endChar": 40
      },
      "revId": "3ce680bda194d3c209a2fd40d086327ca6186bac",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f202ac0_6daaba9e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-01-07T21:38:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5fdadb59_22aceb9e",
      "range": {
        "startLine": 18,
        "startChar": 39,
        "endLine": 18,
        "endChar": 40
      },
      "revId": "3ce680bda194d3c209a2fd40d086327ca6186bac",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29b60738_7ec7abf3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 88043
      },
      "writtenOn": "2022-12-21T09:12:18Z",
      "side": 1,
      "message": "nit: remove `is`?",
      "range": {
        "startLine": 31,
        "startChar": 54,
        "endLine": 31,
        "endChar": 57
      },
      "revId": "3ce680bda194d3c209a2fd40d086327ca6186bac",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8864e2e_1b64dfa1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-01-07T21:38:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "29b60738_7ec7abf3",
      "range": {
        "startLine": 31,
        "startChar": 54,
        "endLine": 31,
        "endChar": 57
      },
      "revId": "3ce680bda194d3c209a2fd40d086327ca6186bac",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "750334f4_aa0bee19",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 4
      },
      "lineNbr": 1349,
      "author": {
        "id": 88043
      },
      "writtenOn": "2022-12-21T09:12:18Z",
      "side": 1,
      "message": "AFAIU `Arrays.equals` takes care of `null` parameters so maybe it could be skipped?",
      "range": {
        "startLine": 1346,
        "startChar": 3,
        "endLine": 1349,
        "endChar": 41
      },
      "revId": "3ce680bda194d3c209a2fd40d086327ca6186bac",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe278fde_bcec2d98",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 4
      },
      "lineNbr": 1349,
      "author": {
        "id": 241433
      },
      "writtenOn": "2023-01-02T08:54:46Z",
      "side": 1,
      "message": "You could skip one of the checks for `null`, it that what you mean @Jacek? I.e.:\n\n```\nreturn packedRefsBytes !\u003d null\n\t\u0026\u0026 Arrays.equals(packedRefsBytes, cmpPackedRefsBytes);\n\n```\n\nThe above works fine.",
      "parentUuid": "750334f4_aa0bee19",
      "range": {
        "startLine": 1346,
        "startChar": 3,
        "endLine": 1349,
        "endChar": 41
      },
      "revId": "3ce680bda194d3c209a2fd40d086327ca6186bac",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "715a7420_52b93108",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 4
      },
      "lineNbr": 1349,
      "author": {
        "id": 88043
      },
      "writtenOn": "2023-01-02T09:14:37Z",
      "side": 1,
      "message": "AFAIU you could skip both and have:\n```\nreturn Arrays.equals(packedRefsBytes, cmpPackedRefsBytes);\n```\nWDYT?",
      "parentUuid": "fe278fde_bcec2d98",
      "range": {
        "startLine": 1346,
        "startChar": 3,
        "endLine": 1349,
        "endChar": 41
      },
      "revId": "3ce680bda194d3c209a2fd40d086327ca6186bac",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4370ce5b_604092cd",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 4
      },
      "lineNbr": 1349,
      "author": {
        "id": 241433
      },
      "writtenOn": "2023-01-02T09:44:26Z",
      "side": 1,
      "message": "Nope, I don\u0027t think it would work since if both `packedRefsBytes` and `cmpPackedRefsBytes` are `null` we want to return `false`.\n\nThe code you suggested would return `true`.",
      "parentUuid": "715a7420_52b93108",
      "range": {
        "startLine": 1346,
        "startChar": 3,
        "endLine": 1349,
        "endChar": 41
      },
      "revId": "3ce680bda194d3c209a2fd40d086327ca6186bac",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "288714e6_baf59515",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 4
      },
      "lineNbr": 1349,
      "author": {
        "id": 88043
      },
      "writtenOn": "2023-01-02T18:01:30Z",
      "side": 1,
      "message": "yeap, what\u0027s the point in returning new pack if it has anyway `null` content which is the same as current?",
      "parentUuid": "4370ce5b_604092cd",
      "range": {
        "startLine": 1346,
        "startChar": 3,
        "endLine": 1349,
        "endChar": 41
      },
      "revId": "3ce680bda194d3c209a2fd40d086327ca6186bac",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30b604e1_1b2e8c17",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java",
        "patchSetId": 4
      },
      "lineNbr": 1349,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-01-07T21:37:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "288714e6_baf59515",
      "range": {
        "startLine": 1346,
        "startChar": 3,
        "endLine": 1349,
        "endChar": 41
      },
      "revId": "3ce680bda194d3c209a2fd40d086327ca6186bac",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}