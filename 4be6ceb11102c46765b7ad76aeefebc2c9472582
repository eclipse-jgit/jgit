{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "49ccf70e_dbd19479",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 27,
      "author": {
        "id": 1018954
      },
      "writtenOn": "2025-02-26T10:33:46Z",
      "side": 1,
      "message": "For my understanding: what is the purpose of the automatic reload and, specifically, how does this protect from lost ref updates?",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 27,
        "endChar": 40
      },
      "revId": "4be6ceb11102c46765b7ad76aeefebc2c9472582",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "778d2d7b_a1102490",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 27,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2025-02-26T10:52:12Z",
      "side": 1,
      "message": "To allow applications using JGit (e.g. EGit, see jgit-102) to use the RefDatabase API in the same way for RefDirectory and FileReftableDatabase. RefDirectory always had auto-refresh behavior and cannot support consistent read across resolution of multiple refs in multiple calls to the RefDatabase API whereas FileReftableDatabase does support that. \n\nWithout auto-refresh support in FileReftableDatabase applications have to explicitly refresh refs they read earlier from reftables in order to recognize ref updates, they don\u0027t need to do that when using RefDirectory.\n\nThe protection from lost ref updates is unrelated to the implementation of auto-refresh (see the tests).",
      "parentUuid": "49ccf70e_dbd19479",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 27,
        "endChar": 40
      },
      "revId": "4be6ceb11102c46765b7ad76aeefebc2c9472582",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3033ea94_dd637537",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 27,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-02-26T11:21:49Z",
      "side": 1,
      "message": "\u003e To allow applications using JGit (e.g. EGit, see jgit-102) to use the RefDatabase API in the same way for RefDirectory and FileReftableDatabase. RefDirectory always had auto-refresh behavior and cannot support consistent read across resolution of multiple refs in multiple calls to the RefDatabase API whereas FileReftableDatabase \ndoes support that. \n\nMy personal point of view (arguable, of course) is that the problem is real, but the solution should be implemented in the repository cache rather than in the ref lookup.\n\nIf you start reading from ref-table, you must (according to specs at https://git-scm.com/docs/reftable#_readers):\n\n1. Start your \"snapshot\" read and the associated list of ref-tables\n2. Read your refs (potentially more than one)\n3. Close your \"snapshot\" when you\u0027re done\n\nThe above allows for achieving:\n\na. Consistency: the data read corresponds to the same time of the snapshot at 1.\nb. Speed: you do not have to access the filesystem to checks for reloads at every lookup\nc. Safety against raciness: should any of the data change from point 1, and the update, you get notified of a lock failure and start your transaction again\n\nThere is auto-refresh in the specifications of ref-table, so that would bring a new functionality that has no mention so far anywhere. I agree that it would align the ref-table with the same behavior of packed-refs, but the question is: do we really need it after all?\n\nIf yes, why not just using packed-refs then? I wouldn\u0027t be happy to make ref-table code so complex and slow as packed-refs after all :-)\n\nRef-table is going to be supported side-by-side with packed-refs, I don\u0027t see the packed-refs support to disappear anytime soon.\n\n\u003e Without auto-refresh support in FileReftableDatabase applications have to explicitly refresh refs they read earlier from reftables in order to recognize ref updates\n\nThat\u0027s because of a problem in the RepositoryCache: I believe we should release the ref-table \"snapshot\" as soon as the repository is handed back to the cache, whilst today we keep the \"snapshot\" active indefinitely, that\u0027s a bug IMHO.\n\n\u003e they don\u0027t need to do that when using RefDirectory.\n\nYes, but RefDirectory doesn\u0027t support consistency, speed, and update safety.",
      "parentUuid": "778d2d7b_a1102490",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 27,
        "endChar": 40
      },
      "revId": "4be6ceb11102c46765b7ad76aeefebc2c9472582",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d57da00_36616b4a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 27,
      "author": {
        "id": 1022030
      },
      "writtenOn": "2025-02-26T16:05:19Z",
      "side": 1,
      "message": "\u003e RefDirectory always had auto-refresh behavior and cannot support consistent read across resolution of multiple refs in multiple calls to the RefDatabase API\n\nI haven\u0027t followed this entire discussion or delved into the reftable specs much, but I wanted to point out that while RefDirectory doesn\u0027t support a consistent read, the [SnapshottingRefDirectory](https://github.com/eclipse-jgit/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/SnapshottingRefDirectory.java) does. I mostly point that out because it\u0027s not the RepositoryCache, so I don\u0027t think we should be pushing a ref snapshot concept into that class.",
      "parentUuid": "3033ea94_dd637537",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 27,
        "endChar": 40
      },
      "revId": "4be6ceb11102c46765b7ad76aeefebc2c9472582",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccf5e299_722f71ec",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 27,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2025-02-26T16:48:17Z",
      "side": 1,
      "message": "Many application like e.g. EGit don\u0027t have a need for consistent reads of multiple refs, with this change they can use the same code that works for RefDirectory also on repos configured to use reftables. Gerrit will probably opt to not use this auto-refresh which is still the default with this change.\n\nClosing the Repository just to refresh the reftable stack seems unnecessary to me and has other side effects. With this change you can instead call `#refresh` to reload the reftable stack if it changed which is much faster than closing and reopening both the repo and ref database.",
      "parentUuid": "6d57da00_36616b4a",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 27,
        "endChar": 40
      },
      "revId": "4be6ceb11102c46765b7ad76aeefebc2c9472582",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}