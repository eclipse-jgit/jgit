{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6f11e026_b2152a26",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 9,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-10-18T21:01:29Z",
      "side": 1,
      "message": "Describe the current situation in present tense.\n\nAlso, this says \"before the change the default was...\" like it has changed now, but now the default is the same. We just have a new flag to do something else.\n\nAnother way to word this could be:\n```\nWith the useNegotiationTip flag (introduced in change 738dacb), the client sends to the server only the tips of the wanted refs for the negotiation. Some wanted refs may not exist in the client (yet) and our implementation ignores them. So when only non-existing refs are wanted, jgit doesn\u0027t send any tips and the server understands it is a full clone.\n```\n\nThen the solution is:\n```\nIn useNegotiationTip, send ALL_HEADS if none of the wanted refs exists locally.\n```",
      "revId": "f3068256edfead273cc1e5c459282f94214318b6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e0f974d_f3fe6fb0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 9,
      "author": {
        "id": 227701
      },
      "writtenOn": "2023-10-19T20:40:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6f11e026_b2152a26",
      "revId": "f3068256edfead273cc1e5c459282f94214318b6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3075ab50_df7dc340",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 13,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-10-18T21:01:29Z",
      "side": 1,
      "message": "Why only ALL_HEADS? Could this produce wrong results? Can you explain this decision?",
      "range": {
        "startLine": 13,
        "startChar": 125,
        "endLine": 13,
        "endChar": 133
      },
      "revId": "f3068256edfead273cc1e5c459282f94214318b6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18f9eaab_433591ad",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 13,
      "author": {
        "id": 227701
      },
      "writtenOn": "2023-10-19T20:40:28Z",
      "side": 1,
      "message": "This only limits negotiation under all heads if the ref client is looking for is not available with the client (i.e. is a new branch). This excludes refs/tags, refs/config, etc unless client specifically requests them or does a full clone.",
      "parentUuid": "3075ab50_df7dc340",
      "range": {
        "startLine": 13,
        "startChar": 125,
        "endLine": 13,
        "endChar": 133
      },
      "revId": "f3068256edfead273cc1e5c459282f94214318b6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "136333d6_22915ace",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 13,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-10-19T21:19:14Z",
      "side": 1,
      "message": "Yes, you are explaining what it does. But *why* only ALL_HEADS?\n\nWhen in the future somebody looks at this and wonders why only all_heads and not e.g. all_refs... can you explain why do you choose this value?",
      "parentUuid": "18f9eaab_433591ad",
      "range": {
        "startLine": 13,
        "startChar": 125,
        "endLine": 13,
        "endChar": 133
      },
      "revId": "f3068256edfead273cc1e5c459282f94214318b6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30955b6e_8687796e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 227701
      },
      "writtenOn": "2023-10-18T18:03:37Z",
      "side": 1,
      "message": "trigger build",
      "revId": "f3068256edfead273cc1e5c459282f94214318b6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08f5428f_81e8e90b",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/BasePackFetchConnection.java",
        "patchSetId": 21
      },
      "lineNbr": 736,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-10-18T20:27:37Z",
      "side": 1,
      "message": "return directly here, no need to assign to var.",
      "revId": "f3068256edfead273cc1e5c459282f94214318b6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d8e5fc7_dc83e219",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/BasePackFetchConnection.java",
        "patchSetId": 21
      },
      "lineNbr": 736,
      "author": {
        "id": 227701
      },
      "writtenOn": "2023-10-18T21:06:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08f5428f_81e8e90b",
      "revId": "f3068256edfead273cc1e5c459282f94214318b6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ea7cc60_0760e533",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/BasePackFetchConnection.java",
        "patchSetId": 21
      },
      "lineNbr": 737,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-10-18T20:27:37Z",
      "side": 1,
      "message": "Put this objectId extraction in its own function (ObjectId getRefObjectId(Ref))\n\nSo here you can do .filter(r -\u003e getRefOjectId(r) !\u003d null)\n\nand in markReachableRefTips: refsToMark.map(r -\u003e getRefObjectId(r)).filter(Objects::nonNull).forEach(oid -\u003e markReachable(oid)).",
      "revId": "f3068256edfead273cc1e5c459282f94214318b6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cbc1c829_570ad596",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/BasePackFetchConnection.java",
        "patchSetId": 21
      },
      "lineNbr": 737,
      "author": {
        "id": 227701
      },
      "writtenOn": "2023-10-18T21:06:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1ea7cc60_0760e533",
      "revId": "f3068256edfead273cc1e5c459282f94214318b6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7619b9fa_e84512bc",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/BasePackFetchConnection.java",
        "patchSetId": 21
      },
      "lineNbr": 737,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-10-19T18:44:08Z",
      "side": 1,
      "message": "\u003e So here you can do .filter(r -\u003e getRefOjectId(r) !\u003d null)\n\nYou removed this filter and it is needed, otherwise what happens if none of the refs in wantRefMap have objectId?\n\nAlso, why no test have failed? Is there any way to cover this filtering?",
      "parentUuid": "cbc1c829_570ad596",
      "revId": "f3068256edfead273cc1e5c459282f94214318b6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4b19c29_623a4784",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/BasePackFetchConnection.java",
        "patchSetId": 21
      },
      "lineNbr": 737,
      "author": {
        "id": 227701
      },
      "writtenOn": "2023-10-19T18:56:56Z",
      "side": 1,
      "message": "I don\u0027t know a case when a ref does not point to an object id nor is an annotated tag? I\u0027ll add the filter here just incase but exclude any test changes",
      "parentUuid": "7619b9fa_e84512bc",
      "revId": "f3068256edfead273cc1e5c459282f94214318b6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5961c429_4192c90f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/BasePackFetchConnection.java",
        "patchSetId": 21
      },
      "lineNbr": 758,
      "author": {
        "id": 201156
      },
      "writtenOn": "2023-10-18T20:27:37Z",
      "side": 1,
      "message": "Is this IOException really thrown?",
      "range": {
        "startLine": 758,
        "startChar": 10,
        "endLine": 758,
        "endChar": 21
      },
      "revId": "f3068256edfead273cc1e5c459282f94214318b6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0868a975_f228d36c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/transport/BasePackFetchConnection.java",
        "patchSetId": 21
      },
      "lineNbr": 758,
      "author": {
        "id": 227701
      },
      "writtenOn": "2023-10-18T21:06:45Z",
      "side": 1,
      "message": "No - removed",
      "parentUuid": "5961c429_4192c90f",
      "range": {
        "startLine": 758,
        "startChar": 10,
        "endLine": 758,
        "endChar": 21
      },
      "revId": "f3068256edfead273cc1e5c459282f94214318b6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}