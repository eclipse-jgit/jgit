{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "85f23f4d_cecf02f6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1684
      },
      "writtenOn": "2022-11-15T06:53:45Z",
      "side": 1,
      "message": "Can a benchmark for this be added?",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 23,
        "endChar": 36
      },
      "revId": "96e53940b49af8c05f29ab1e0a1eb2c21c596247",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba3a6d27_dfa4e715",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 5082
      },
      "writtenOn": "2022-04-12T22:17:41Z",
      "side": 1,
      "message": "This is a neat discovery, and these numbers are shocking. It should not take longer to process a very simple file than it does to read the data from NFS, if it does, it signals that something in the code is problematic. Can you figure out what is taking so long? Is it calculating the sha1 (something that it seems like we should not need to do)? I suspect that we don\u0027t actually want to waste memory storing the contents of a file twice as this change does, as this does not scale well for bigger files.",
      "revId": "96e53940b49af8c05f29ab1e0a1eb2c21c596247",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b89b940a_d8bdcb36",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 97483
      },
      "writtenOn": "2022-04-21T08:01:16Z",
      "side": 1,
      "message": "\u003e This is a neat discovery, and these numbers are shocking. It should not take longer to process a very simple file than it does to read the data from NFS, if it does, it signals that something in the code is problematic.\n\nYes, exactly. I was also shocked when I saw that reading a 30M file from a local high-perf SSD was taking *hundreds of millisecs* !!!\n\n\u003e Can you figure out what is taking so long? Is it calculating the sha1 (something that it seems like we should not need to do)?\n\nIt\u0027s both, but I can measure how much they contributed to the overall 90% bottleneck.\n\n\u003e I suspect that we don\u0027t actually want to waste memory storing the contents of a file twice as this change does, as this does not scale well for bigger files.\n\nWell, we already waste a lot of space because the caching logic of packed-refs isn\u0027t very advanced: we store the *whole* content in memory in millions of Java objects, which is bad. I agree we should look at options to save memory regardless, any idea?",
      "parentUuid": "ba3a6d27_dfa4e715",
      "revId": "96e53940b49af8c05f29ab1e0a1eb2c21c596247",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd4ce2b3_7f7ecdcb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1684
      },
      "writtenOn": "2022-11-15T06:53:45Z",
      "side": 1,
      "message": "Given these benchmarks of: [1] calculating the SHA1 seems to be the culprit.\n\nWe could add yet another configuration switch and define PackedRefList-Loading-Strategy, and preserve the default (for now) to be SHA1-Comparisson but add new Byte- Comparisson based strategy.\n\n* [1] https://git.eclipse.org/r/c/jgit/jgit/+/196906/",
      "parentUuid": "b89b940a_d8bdcb36",
      "revId": "96e53940b49af8c05f29ab1e0a1eb2c21c596247",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09d59c7e_b8b21e2a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 97483
      },
      "writtenOn": "2022-04-08T15:07:06Z",
      "side": 1,
      "message": "This is intended to be cherry-picked to stable-5.13 and then merged upstream. I\u0027m reporting this on stable-5.1 because I need this also on a Gerrit v2.16, but this isn\u0027t supposed to be merged here.",
      "revId": "96e53940b49af8c05f29ab1e0a1eb2c21c596247",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a0aeb6a_7b53c7c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-11-15T07:58:49Z",
      "side": 1,
      "message": "- Please move this to a newer, maintained stable branch. I don\u0027t have the time to maintain 15 stable branches. By now with the release of Gerrit 3.7 the oldest supported Gerrit release should be 3.5 which uses JGit 6.1. stable-5.13 is also ok if you still need Gerrit 3.4.\n- can you provide evidence about what\u0027s the difference in memory consumption and how long this memory is held ?\n- I guess regarding performance RefTable will beat any improvements based on packed-refs",
      "revId": "96e53940b49af8c05f29ab1e0a1eb2c21c596247",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}