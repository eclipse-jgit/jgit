{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4355f7ce_d07fe324",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 10,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-05-19T19:55:25Z",
      "side": 1,
      "message": "reflogs for all branches including remote tracking branches.",
      "range": {
        "startLine": 10,
        "startChar": 8,
        "endLine": 10,
        "endChar": 65
      },
      "revId": "9ec85bd7762db7ff2b3e8c653fd657c02a289fb9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac8e1fcf_59440f05",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 10,
      "author": {
        "id": 97483
      },
      "writtenOn": "2022-06-09T11:15:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4355f7ce_d07fe324",
      "range": {
        "startLine": 10,
        "startChar": 8,
        "endLine": 10,
        "endChar": 65
      },
      "revId": "9ec85bd7762db7ff2b3e8c653fd657c02a289fb9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2353d2d7_21cee8a4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 12,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-05-19T19:55:25Z",
      "side": 1,
      "message": "I don\u0027t think this is related to how packed refs are implemented",
      "revId": "9ec85bd7762db7ff2b3e8c653fd657c02a289fb9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a7f7f3d_717e57fb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 12,
      "author": {
        "id": 97483
      },
      "writtenOn": "2022-06-09T11:15:44Z",
      "side": 1,
      "message": "Mmm, that\u0027s not what I see in the code though, see the L41 of the commit message.\n\nThe issue I believe is that the C implementation uses the packed-backend implementation that doesn\u0027t create a ref-log, whilst JGit doesn\u0027t have a different implementation and relies on the same code-base used but updating any refs, hence always generates a reflog, even during the clone phase, for all refs, either local or remote.",
      "parentUuid": "2353d2d7_21cee8a4",
      "revId": "9ec85bd7762db7ff2b3e8c653fd657c02a289fb9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebbf6e21_0c9cc373",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 24,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-05-19T19:55:25Z",
      "side": 1,
      "message": "is there any other disadvantage besides the slowdown which is already mentioned in the previous paragraph ?",
      "revId": "9ec85bd7762db7ff2b3e8c653fd657c02a289fb9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5344d560_0c9cb7dc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 24,
      "author": {
        "id": 97483
      },
      "writtenOn": "2022-06-09T11:15:44Z",
      "side": 1,
      "message": "Well, yes: you can run out of inodes on your local filesystem. If I clone 1 branch of a remote repository with 4M refs, I will need 4M inodes when using JGit for doing a clone, which is unexpected isn\u0027t it?\n\nCompanies using mono-repos, have 1 repository for the whole company, which easily translates to millions of refs. However, when you clone the repo of 1 specific branch, you don\u0027t need to have the reflog of all remote refs (millions) that you will never ever care about.\n\nOnly when you *fetch them explicitly* then i twill make sense to create a reflog for them.\n\nDoes that make sense?",
      "parentUuid": "ebbf6e21_0c9cc373",
      "revId": "9ec85bd7762db7ff2b3e8c653fd657c02a289fb9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62cb61c2_c664d9d8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 24,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-06-24T22:41:20Z",
      "side": 1,
      "message": "Clone by default uses a refspec +refs/heads/*:refs/remotes/origin/*. This is an explicit directive to fetch these refs and how to map them to remote tracking refs in the clone.\n\nIf you don\u0027t want all remote refs you can use a custom refspec to only fetch the ones you are interested in.\n\nDon\u0027t know how developers in a repo with millions of branches know which branches are relevant for them. \n\nI guess they don\u0027t clone and checkout the complete repository and not all of its history.",
      "parentUuid": "5344d560_0c9cb7dc",
      "revId": "9ec85bd7762db7ff2b3e8c653fd657c02a289fb9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eda45599_6cc7bc96",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 26,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-05-19T19:55:25Z",
      "side": 1,
      "message": "I think this is irrelevant, the documentation of core.logallrefupdates [1] says that if this option is true reflogs are created for all branches including remote branches, and the default of this option is true. On the first fetch after a clone which updates a remote tracking branch C git also creates the corresponding reflog.\n\n[1] https://git-scm.com/docs/git-config#Documentation/git-config.txt-corelogAllRefUpdates",
      "revId": "9ec85bd7762db7ff2b3e8c653fd657c02a289fb9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb51a784_820dc988",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 26,
      "author": {
        "id": 97483
      },
      "writtenOn": "2022-06-09T11:15:44Z",
      "side": 1,
      "message": "\u003e I think this is irrelevant,\n\nI see your point, but I believe that explaining WHY I am making this change as part of the commit message is relevant to understand the context and the objective of my change.\n\n\u003e \u003ethe documentation of core.logallrefupdates [1] says that if this option is true reflogs are created for all branches including remote branches, and the default of this option is true. On the first fetch after a clone which updates a remote tracking branch C git also creates the corresponding reflog.\n\nJGit creates the reflogs of all remotes even when core.logallrefupdates is set to false. Do you believe we should raise a separate bug for that? Maybe that\u0027s the solution instead of changing the behaviour of the clone?\n\n\u003e [1] https://git-scm.com/docs/git-config#Documentation/git-config.txt-corelogAllRefUpdates",
      "parentUuid": "eda45599_6cc7bc96",
      "revId": "9ec85bd7762db7ff2b3e8c653fd657c02a289fb9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f2776f6_394abece",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-05-19T19:55:25Z",
      "side": 1,
      "message": "I think you misinterpret this comment in the source code of the C implementation, it just says that you cannot store reflogs inside packed-refs, this is a limitation of the storage format and not of its implementation. C git stores reflogs in extra files\n\n refs/logs/\u003chierarchical branch name\u003e\n\nin the same way like jgit does.\n\nC git deliberately does some shortcuts on clone (and only on clone), see [1]:\n\n\"git clone\" uses shortcuts when creating the initial set of\nreferences:\n* It writes them directly to packed-refs.\n* It doesn\u0027t lock the individual references (though it does lock \n  the packed-refs file).\n* It doesn\u0027t check for refname conflicts between two new references \n  or between one new reference and any hypothetical old ones.\n* It doesn\u0027t create reflog entries for the reference creations.\n\nBut it creates a reflog for refs/heads/master which is a local branch and it creates a reflog for refs/remotes/origin/HEAD:\n\n$ cat ./logs/refs/remotes/origin/HEAD\n0000000000000000000000000000000000000000 88d5f51e61f7f90b4f760261f07c95d8dd3d7299 Matthias Sohn \u003cmatthias.sohn@sap.com\u003e 1652988705 +0200\tclone: from https://git.eclipse.org/r/jgit/jgit\n\njgit does not create a reflog for refs/remotes/origin/HEAD (but it should)\n\n\n[1] https://github.com/git/git/commit/58f233ce1ed67bbc31a429fde5c65d5050fdbd7d",
      "revId": "9ec85bd7762db7ff2b3e8c653fd657c02a289fb9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53609fac_7651fe7a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 97483
      },
      "writtenOn": "2022-06-09T11:15:44Z",
      "side": 1,
      "message": "\u003e I think you misinterpret this comment in the source code of the C implementation, it just says that you cannot store reflogs inside packed-refs, this is a limitation of the storage format and not of its implementation. C git stores reflogs in extra files\n\u003e \n\u003e  refs/logs/\u003chierarchical branch name\u003e\n\u003e \n\u003e in the same way like jgit does.\n\nTrue, but it is done explicitly when it makes esne and not as part of the packed-ref.c implementation of the packed-refs. In JGit instead it is part of the implementation of PackedBatchRefUpdate\nhence the divergence of behaviour with the C implementation.\n\nCreating a reflog should be done IMHO explicitly when it is\ndesired and useful, not implicitly as the update process of the\npacked-refs.\n\n\u003e C git deliberately does some shortcuts on clone (and only on clone), see [1]:\n\u003e \n\u003e \"git clone\" uses shortcuts when creating the initial set of\n\u003e references:\n\u003e * It writes them directly to packed-refs.\n\nYes, and that *does not* create the ref logs.\n\n\u003e * It doesn\u0027t lock the individual references (though it does lock \n\u003e   the packed-refs file).\n\nYes, I\u0027ve raised that already. The JGit behaviour of locking the individual refs was causing the local system to run out of file descriptors, but that\u0027s a different discussion :-)\n\n\u003e * It doesn\u0027t check for refname conflicts between two new references \n\u003e   or between one new reference and any hypothetical old ones.\n\u003e * It doesn\u0027t create reflog entries for the reference creations.\n\nCorrect.\n\n\u003e But it creates a reflog for refs/heads/master which is a local branch and it creates a reflog for refs/remotes/origin/HEAD:\n\u003e \n\u003e $ cat ./logs/refs/remotes/origin/HEAD\n\u003e 0000000000000000000000000000000000000000 88d5f51e61f7f90b4f760261f07c95d8dd3d7299 Matthias Sohn \u003cmatthias.sohn@sap.com\u003e 1652988705 +0200\tclone: from https://git.eclipse.org/r/jgit/jgit\n\nYes, that is done *explicitly* and not *implicitly* as part of the update of refs in packed-refs file.\n\n\u003e [1] https://github.com/git/git/commit/58f233ce1ed67bbc31a429fde5c65d5050fdbd7d",
      "parentUuid": "8f2776f6_394abece",
      "revId": "9ec85bd7762db7ff2b3e8c653fd657c02a289fb9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5799fc5_e2c250cb",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CloneCommandTest.java",
        "patchSetId": 12
      },
      "lineNbr": 119,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-05-19T19:55:25Z",
      "side": 1,
      "message": "We need another test demonstrating that a subsequent fetch updating any of the remote tracking branches creates the corresponding reflog which wasn\u0027t created during clone.\n\nAnd we need a test showing that\njgit init\njgit fetch \u003csourceRepoUrl\u003e refs/heads/*:refs/remotes/origin/*\ncreates reflogs for all remote tracking branches like C git does",
      "revId": "9ec85bd7762db7ff2b3e8c653fd657c02a289fb9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2aecb7ef_fb44fca4",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/api/CloneCommandTest.java",
        "patchSetId": 12
      },
      "lineNbr": 119,
      "author": {
        "id": 97483
      },
      "writtenOn": "2022-06-09T14:04:47Z",
      "side": 1,
      "message": "Sure, good idea, but not in the clone command test though, as it isn\u0027t technically a clone. Maybe adding it to FetchCommandTest could be a better place.",
      "parentUuid": "d5799fc5_e2c250cb",
      "revId": "9ec85bd7762db7ff2b3e8c653fd657c02a289fb9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fff03f2_6299ac23",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackedBatchRefUpdate.java",
        "patchSetId": 12
      },
      "lineNbr": 474,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-05-19T19:55:25Z",
      "side": 1,
      "message": "I think this is wrong, the shortcut skipping creation of reflogs for remote tracking branches should only be taken if the ref creation is done during clone. If we happen to update multiple refs via PackedBatchRefUpdate during a fetch we must track the ref updates in their respective reflogs.",
      "revId": "9ec85bd7762db7ff2b3e8c653fd657c02a289fb9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8894afe5_54990c94",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/PackedBatchRefUpdate.java",
        "patchSetId": 12
      },
      "lineNbr": 474,
      "author": {
        "id": 97483
      },
      "writtenOn": "2022-06-09T11:15:44Z",
      "side": 1,
      "message": "I agree, done.",
      "parentUuid": "4fff03f2_6299ac23",
      "revId": "9ec85bd7762db7ff2b3e8c653fd657c02a289fb9",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}