{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0c6eb745_9d968841",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 35
      },
      "lineNbr": 0,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2024-01-18T12:47:30Z",
      "side": 1,
      "message": "the license check failed on a transitive dependency of jmh used in benchmarks\nI updated jmh to 1.37 (version we use on master) to fix this",
      "revId": "3228893c64ee6f469ce0ff2ea4f308a36bc99b71",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cab1ee7e_28233f5f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 35
      },
      "lineNbr": 0,
      "author": {
        "id": 1000671
      },
      "writtenOn": "2024-01-18T13:17:43Z",
      "side": 1,
      "message": "CI verification succeeded, see https://ci.eclipse.org/jgit/job/stable/job/jgit.gerrit-pipeline.java11/962/\n\ndon\u0027t know why it didn\u0027t report results here, maybe that\u0027s because this change was migrated from git.eclipse.org ?",
      "revId": "3228893c64ee6f469ce0ff2ea4f308a36bc99b71",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3cf2c69_4f0414bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 35
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-01-18T15:02:54Z",
      "side": 1,
      "message": "\u003e CI verification succeeded, see https://ci.eclipse.org/jgit/job/stable/job/jgit.gerrit-pipeline.java11/962/\n\u003e \n\u003e don\u0027t know why it didn\u0027t report results here, maybe that\u0027s because this change was migrated from git.eclipse.org ?\n\nI believe this must be a Gerrit bug: I checked the logs and the SSH command to post the feedback was completed as expected. However, I do not see the message appearing here. Will raise an issue on https://issues.gerritcodereview.com.",
      "parentUuid": "cab1ee7e_28233f5f",
      "revId": "3228893c64ee6f469ce0ff2ea4f308a36bc99b71",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22b81a66_ec8faf51",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 35
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-01-18T16:54:33Z",
      "side": 1,
      "message": "@ponch78@gmail.com raised a Gerrit bug for the missed reporting on this change https://issues.gerritcodereview.com/u/0/issues/320946495",
      "parentUuid": "d3cf2c69_4f0414bc",
      "revId": "3228893c64ee6f469ce0ff2ea4f308a36bc99b71",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecdead47_21234d73",
        "filename": "org.eclipse.jgit.benchmarks/src/org/eclipse/jgit/revwalk/DateRevQueueBenchmark.java",
        "patchSetId": 35
      },
      "lineNbr": 47,
      "author": {
        "id": 1022030
      },
      "writtenOn": "2024-01-18T19:51:39Z",
      "side": 1,
      "message": "Does this perform well with smaller values too? I can\u0027t remember the details, but based on the comment on change 24295 it seemed that at least the BucketQueue implementation was slightly slower than the default DateRevQueue when only a few commits were added/removed at a time.\n\ni.e. is this benchmark sufficient to show there won\u0027t be a real world perf regression?",
      "revId": "3228893c64ee6f469ce0ff2ea4f308a36bc99b71",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb5a5d32_d2324e18",
        "filename": "org.eclipse.jgit.benchmarks/src/org/eclipse/jgit/revwalk/DateRevQueueBenchmark.java",
        "patchSetId": 35
      },
      "lineNbr": 47,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-01-18T20:46:13Z",
      "side": 1,
      "message": "\u003e Does this perform well with smaller values too?\n\nWith 1000 commits (a very tiny repository) it performs *slightly* better, 14 nanos better. Overall we are talking about 60-50 nanos.\n\n```\n        1000                true  avgt    5  0,049 ±  0,003  us/op\n        1000               false  avgt    5  0,063 ±  0,001  us/op\n```\n\n\u003e I can\u0027t remember the details, but based on the comment on change 24295 it seemed that at least the BucketQueue implementation was slightly slower than the default DateRevQueue when only a few commits were added/removed at a time.\n\u003e \n\u003e i.e. is this benchmark sufficient to show there won\u0027t be a real world perf regression?\n\nI would say the opposite is true: without this change there is a substantial performance penalty, see the benchmark with 500k commits:\n\n```\n      500000                true  avgt    5  0,139 ±  0,018  us/op\n      500000               false  avgt    5  9,999 ±  0,552  us/op\n```\n\nAlso bear in mind that:\n- Is *enabled* via feature switch (so you can always do A/B testing)\n- Is *false* (disabled) by default, which is a precaution for extra safety\n\nWe had it in staging (18 months) and in prod (10 months) with the feature switch enabled.",
      "parentUuid": "ecdead47_21234d73",
      "revId": "3228893c64ee6f469ce0ff2ea4f308a36bc99b71",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e2ff7cc_f8f66d83",
        "filename": "org.eclipse.jgit.benchmarks/src/org/eclipse/jgit/revwalk/DateRevQueueBenchmark.java",
        "patchSetId": 35
      },
      "lineNbr": 47,
      "author": {
        "id": 1022030
      },
      "writtenOn": "2024-01-18T22:33:27Z",
      "side": 1,
      "message": "\u003e \u003e Does this perform well with smaller values too?\n\u003e \n\u003e With 1000 commits (a very tiny repository) it performs *slightly* better, 14 nanos better. Overall we are talking about 60-50 nanos.\n\nI think you\u0027re assuming too much here. If you look at how DateRevQueue is used (especially by RevWalk) you\u0027ll see that it often only has a few commits added to it and not anywhere close to all the commits in the repo.\n\nDo you know which caller/user of DateRevQueue was taking the longest in your pull-replication issue? Was it RevWalk or was it maybe one of the *Generator classes? Benchmarking some of those callers would be nice since they use DateRevQueue in significantly different ways.\n\n\u003e Also bear in mind that:\n\u003e - Is *enabled* via feature switch (so you can always do A/B testing)\n\u003e - Is *false* (disabled) by default, which is a precaution for extra safety\n\u003e \n\u003e We had it in staging (18 months) and in prod (10 months) with the feature switch enabled.\n\nI understand it\u0027s not the default and I\u0027m not doubting that it fixed the pain point you had. I\u0027m just trying to ensure we have meaningful benchmarks for future changes (such as changing the default).",
      "parentUuid": "eb5a5d32_d2324e18",
      "revId": "3228893c64ee6f469ce0ff2ea4f308a36bc99b71",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}