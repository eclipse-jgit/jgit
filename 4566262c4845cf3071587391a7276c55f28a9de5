{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dd1673d2_c6ba5b6c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1684
      },
      "writtenOn": "2022-06-14T06:13:12Z",
      "side": 1,
      "message": "Can you add some statistics for old/new fetch command performance for big repository to better understand motivation and justification for this change? Also a comparison with C-Git fetch would be nice.",
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bba0b93_f6e33e01",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-06-27T11:48:43Z",
      "side": 1,
      "message": "can you also add statistics regarding memory allocation compared to the old implementation on some large repos ?",
      "parentUuid": "dd1673d2_c6ba5b6c",
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "381bb2d3_6f1f5f48",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-11-16T13:38:09Z",
      "side": 1,
      "message": "I\u0027ve tested both old and new implementation with a modified version of the jmh test. I\u0027ve loaded 850 000 commit to the queue and I\u0027ve checked the heap size.\n\nResults can be found here:\nhttps://drive.google.com/drive/folders/1VgfQ67SdROq1Thm4x6xcENuqSe0PzUIS?usp\u003dsharing",
      "parentUuid": "5bba0b93_f6e33e01",
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b7607f9_9b62a818",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1684
      },
      "writtenOn": "2022-06-14T06:13:12Z",
      "side": 1,
      "message": "I think this is good and non invasive optimization.",
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21c26bbb_5c3f34be",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/revwalk/DateRevPriorityQueueTest.java",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 1684
      },
      "writtenOn": "2022-06-14T06:13:12Z",
      "side": 1,
      "message": "Nit: 2022?",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 26
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa2929d7_e235e327",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/revwalk/DateRevPriorityQueueTest.java",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-11-06T11:19:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "21c26bbb_5c3f34be",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 26
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "699c1bd8_075cc35d",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/revwalk/DateRevPriorityQueueTest.java",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1684
      },
      "writtenOn": "2022-06-14T06:13:12Z",
      "side": 1,
      "message": "Add a comment what is the purpose of this test (benchmark?) and why it\u0027s disabled. JGit has benchmark project. Could it be rather done there?",
      "range": {
        "startLine": 57,
        "startChar": 1,
        "endLine": 58,
        "endChar": 46
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f58e6d5_1f803056",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/revwalk/DateRevPriorityQueueTest.java",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-06-27T11:48:43Z",
      "side": 1,
      "message": "yes, benchmarks should be implemented in the benchmark project and use jmh\n\nlooking forward to see results on synthetic and real large repos like e.g. the linux repo",
      "parentUuid": "699c1bd8_075cc35d",
      "range": {
        "startLine": 57,
        "startChar": 1,
        "endLine": 58,
        "endChar": 46
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a48795e6_674fc7f2",
        "filename": "org.eclipse.jgit.test/tst/org/eclipse/jgit/revwalk/DateRevPriorityQueueTest.java",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-11-07T13:17:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f58e6d5_1f803056",
      "range": {
        "startLine": 57,
        "startChar": 1,
        "endLine": 58,
        "endChar": 46
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df04fd70_7336a724",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/AbstractRevQueue.java",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1684
      },
      "writtenOn": "2022-06-14T06:13:12Z",
      "side": 1,
      "message": "least",
      "range": {
        "startLine": 27,
        "startChar": 42,
        "endLine": 27,
        "endChar": 46
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c572ab2_10c90740",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/AbstractRevQueue.java",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-11-06T11:19:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df04fd70_7336a724",
      "range": {
        "startLine": 27,
        "startChar": 42,
        "endLine": 27,
        "endChar": 46
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a83478bd_fb71397a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/DateRevPriorityQueue.java",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1684
      },
      "writtenOn": "2022-06-14T06:13:12Z",
      "side": 1,
      "message": "Wrong formatting: indentation with 4 spaces instead of tabs. Why JGit doesn\u0027t use google-java-format? There is option for indentation level 4:\n\n  google-java-format-1.7 -help\n  Usage: google-java-format [options] file(s)\n  Options:\n  --aosp, -aosp, -a\n    Use AOSP style instead of Google Style (4-space indentation).\n\nThough, it does not support tabs, I think.",
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2687ae2_c05ea66e",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/DateRevPriorityQueue.java",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-06-27T11:48:43Z",
      "side": 1,
      "message": "JGit always used tabs, we use the Eclipse formatter and if you are using Eclipse for editing the projects are configured to auto-format new/modified code",
      "parentUuid": "a83478bd_fb71397a",
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07ff6154_54452d3c",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/DateRevPriorityQueue.java",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-11-16T13:38:09Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f2687ae2_c05ea66e",
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ccfc41d_34913aaa",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 3
      },
      "lineNbr": 232,
      "author": {
        "id": 1684
      },
      "writtenOn": "2022-06-14T06:13:12Z",
      "side": 1,
      "message": "I see why this method is static. May be extract this method to its own class: RevisionQueueFactory and then rename this method as getInstance(). Similarly, to what Matthias did here: [1].\n\n[1] https://git.eclipse.org/r/c/jgit/jgit/+/193372/9/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/FileWindowReaderFactory.java",
      "range": {
        "startLine": 232,
        "startChar": 1,
        "endLine": 232,
        "endChar": 7
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2747d844_88969b83",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 3
      },
      "lineNbr": 232,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-11-08T15:23:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1ccfc41d_34913aaa",
      "range": {
        "startLine": 232,
        "startChar": 1,
        "endLine": 232,
        "endChar": 7
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1be0f17d_029b58be",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1684
      },
      "writtenOn": "2022-06-14T06:13:12Z",
      "side": 1,
      "message": "Another option (or in addition) would be to use Java System Property. That way we could set container. javaOptions in Gerrit\u0027s \u003cgerrit_site\u003e/etc/gerrit.config file:\n\n  [container]\n\tjavaOptions \u003d \"-Djgit.revision_queue_factory\u003dorg.eclipse.jgit.revwalk.RevisionQueueFactory\"\n\t\nSimilarly to how this works with flogger backend factory:\n\n    [container]\n  \tjavaOptions \u003d \"-Dflogger.backend_factory\u003dcom.google.common.flogger.backend.log4j.Log4jBackendFactory#getInstance\"\n\nYet another option would be to use JGit\u0027s config file and lazily resolve the right revision queue factory.",
      "range": {
        "startLine": 233,
        "startChar": 2,
        "endLine": 233,
        "endChar": 93
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "982dead5_f67a89d4",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 4
      },
      "writtenOn": "2022-06-27T11:48:43Z",
      "side": 1,
      "message": "I would prefer to not introduce a second implementation but directly improve the existing one.",
      "parentUuid": "1be0f17d_029b58be",
      "range": {
        "startLine": 233,
        "startChar": 2,
        "endLine": 233,
        "endChar": 93
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3528b29_76567833",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-10-13T14:17:04Z",
      "side": 1,
      "message": "\u003e Another option (or in addition) would be to use Java System Property. That way we \u003e could set container. javaOptions in Gerrit\u0027s \u003cgerrit_site\u003e/etc/gerrit.config file:\n\nThat\u0027s already implemented in patchset 5\nhttps://git.eclipse.org/r/c/jgit/jgit/+/194140/4..6/org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java#248",
      "parentUuid": "982dead5_f67a89d4",
      "range": {
        "startLine": 233,
        "startChar": 2,
        "endLine": 233,
        "endChar": 93
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ab87803_84cf41d8",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 97483
      },
      "writtenOn": "2023-10-13T16:37:12Z",
      "side": 1,
      "message": "I agree that if we know that the current one is slow, then we should just abandoning and use the new implementation. Are you OK for doing this in a very old branch like stable-5.13?",
      "parentUuid": "c3528b29_76567833",
      "range": {
        "startLine": 233,
        "startChar": 2,
        "endLine": 233,
        "endChar": 93
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a345ef18_25725b39",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 4
      },
      "writtenOn": "2023-10-14T20:42:43Z",
      "side": 1,
      "message": "I\u0027d prefer to do this on master",
      "parentUuid": "1ab87803_84cf41d8",
      "range": {
        "startLine": 233,
        "startChar": 2,
        "endLine": 233,
        "endChar": 93
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b105dacb_fe3a3a76",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-11-08T15:23:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a345ef18_25725b39",
      "range": {
        "startLine": 233,
        "startChar": 2,
        "endLine": 233,
        "endChar": 93
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e1905d4_41890e4f",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1000177
      },
      "writtenOn": "2023-12-27T07:54:18Z",
      "side": 1,
      "message": "@matthias.sohn@sap.com\n\n\u003e I would prefer to not introduce a second implementation but directly improve the existing one.\n\nMy suggestion had this in mind: to be less disruptive, in changing this basic behavior:\n\n1. Release JGit version X with the old commit queue implementation, but allow to switch to the new priority queue implementation.\n2. Release JGit version X+1 with the new commit queue implementation, but allow to switch to the old implementation per configuration, in emergency case.\n3. Release JGit version X+2 with only new priority queue implementation.\n\nBut if you think, this safety net is not needed, then we could of course avoid this complexity.",
      "parentUuid": "b105dacb_fe3a3a76",
      "range": {
        "startLine": 233,
        "startChar": 2,
        "endLine": 233,
        "endChar": 93
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebef9d62_4fb99ced",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-12-27T22:09:40Z",
      "side": 1,
      "message": "I would agree with @david.ostrovsky@gmail.com \u0027s suggestion, @matthias.sohn@sap.com would you like having a second thought?",
      "parentUuid": "9e1905d4_41890e4f",
      "range": {
        "startLine": 233,
        "startChar": 2,
        "endLine": 233,
        "endChar": 93
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bf3cea4_8e6f90f2",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 1684
      },
      "writtenOn": "2022-06-14T06:13:12Z",
      "side": 1,
      "message": "Can be used in place.",
      "range": {
        "startLine": 361,
        "startChar": 2,
        "endLine": 361,
        "endChar": 38
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ee1b8b8_a68b6283",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 3
      },
      "lineNbr": 361,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-11-06T13:17:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7bf3cea4_8e6f90f2",
      "range": {
        "startLine": 361,
        "startChar": 2,
        "endLine": 361,
        "endChar": 38
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcdc1636_116d6607",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 3
      },
      "lineNbr": 362,
      "author": {
        "id": 1684
      },
      "writtenOn": "2022-06-14T06:13:12Z",
      "side": 1,
      "message": "This is a no-op in case the default instance: DateRevQueue is used. Would it make sense to be more explicit about it? For example we could add: `boolean isAdjustingCapacitySupported()` to those implementations, and guard it here:\n\n  if (queue.isAdjustingCapacitySupported()) {\n      queue.setCapacity(queue.capacity() + list.size());\n  }\n\nAlso the addition is forcing the caller sites to perform calculation. There could be two methods: setCapacity(size) and increaseCapacityBy(size) the former just set the value and the latter would add new capacity value to the current capacity internally.",
      "range": {
        "startLine": 361,
        "startChar": 2,
        "endLine": 362,
        "endChar": 48
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef5d339e_19dd919a",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/RevWalk.java",
        "patchSetId": 3
      },
      "lineNbr": 362,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-11-06T13:17:31Z",
      "side": 1,
      "message": "queue.capacity was always returning 0 and with the new approach suggested by Matthias we have just `ensureCapacity` method",
      "parentUuid": "bcdc1636_116d6607",
      "range": {
        "startLine": 361,
        "startChar": 2,
        "endLine": 362,
        "endChar": 48
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c686794_5123eb66",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/StartGenerator.java",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1684
      },
      "writtenOn": "2022-06-14T06:13:12Z",
      "side": 1,
      "message": "Nit: blank between if and open paren, here and in all other places.",
      "range": {
        "startLine": 98,
        "startChar": 7,
        "endLine": 98,
        "endChar": 10
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01b34261_22afa7d1",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/StartGenerator.java",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-11-06T13:17:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c686794_5123eb66",
      "range": {
        "startLine": 98,
        "startChar": 7,
        "endLine": 98,
        "endChar": 10
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9dbaa5e_a960fc81",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/StartGenerator.java",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 1684
      },
      "writtenOn": "2022-06-14T06:13:12Z",
      "side": 1,
      "message": "DRY: The body of the both if branches is the same, combine the if condition:\n\n  if (q instanceof DateRevQueue || q instanceof DateRevPriorityQueue)",
      "range": {
        "startLine": 99,
        "startChar": 3,
        "endLine": 99,
        "endChar": 29
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0a2b2b9_2e9d3174",
        "filename": "org.eclipse.jgit/src/org/eclipse/jgit/revwalk/StartGenerator.java",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 290522
      },
      "writtenOn": "2023-11-06T13:17:31Z",
      "side": 1,
      "message": "`DateRevPriorityQueue` is implementing `DataRevQueue` so it can be:\n\nif (q instanceof DateRevQueue)",
      "parentUuid": "f9dbaa5e_a960fc81",
      "range": {
        "startLine": 99,
        "startChar": 3,
        "endLine": 99,
        "endChar": 29
      },
      "revId": "4566262c4845cf3071587391a7276c55f28a9de5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}