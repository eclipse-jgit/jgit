{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a2a0968d_e034e9c7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1038403
      },
      "writtenOn": "2025-01-22T00:50:44Z",
      "side": 1,
      "message": "I am also concerned that this approach will potentially slow down reading refs significantly. Refs are the most dynamic data structure in git, and with RefTables they impact the entire repository, so if we don\u0027t have to read an entire table, it might be better. Due to reflogs, the sum of all the data in the tables will tend to grow over time, so this can really get expensive. Even if we consider that most reflogs might be placed in a separate reftable, if a specific ref needs to be accessed in the last table in the stack, I believe this will mean reading all of the refs? That can be very slow on NFS, especially if we have to read more than one file. Reftables was designed to perform much better than a packed-refs file, but theoretically (ignoring compression, and the fact that it is more than one file) this has the potential to bring read performance down to be about the same as packedrefs. :(",
      "range": {
        "startLine": 14,
        "startChar": 29,
        "endLine": 16,
        "endChar": 42
      },
      "revId": "5b16d9e607498909ac60ab3f4d0c88a93e8bf4a1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dc2c73e_84a69cb9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1038600
      },
      "writtenOn": "2025-01-22T05:32:55Z",
      "side": 1,
      "message": "thx you for feedback ðŸ˜Š\nI can share your concerns.\nI see two options.\nFirst, I can try to open the FileInputStream on the first read and close the FileStream via a timer three seconds (or something different) after the last read. But I dont know how long it takes, to open a FileInputStream / FileChannel. In worst case the file have to be open right away after the close. This can be combined with blockwise (8k) read and buffer the readed data to improve. But this increase the complexity of BlockSource.\n\nSecond Option, add a config option to fully read the reftable files, so the user can decide.",
      "parentUuid": "a2a0968d_e034e9c7",
      "range": {
        "startLine": 14,
        "startChar": 29,
        "endLine": 16,
        "endChar": 42
      },
      "revId": "5b16d9e607498909ac60ab3f4d0c88a93e8bf4a1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e607750d_7d7eac4c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1038403
      },
      "writtenOn": "2025-01-22T15:59:18Z",
      "side": 1,
      "message": "I don\u0027t see #1 as a solution. #2 would be fine with me, it would allow the feature to be tested, but it doesn\u0027t really sound like a great solution for the project to expect people to have to set this on windows? Do you have any sort of benchmarks for this change?",
      "parentUuid": "2dc2c73e_84a69cb9",
      "range": {
        "startLine": 14,
        "startChar": 29,
        "endLine": 16,
        "endChar": 42
      },
      "revId": "5b16d9e607498909ac60ab3f4d0c88a93e8bf4a1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbd3aa0c_4d96aa49",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1038600
      },
      "writtenOn": "2025-01-22T17:14:31Z",
      "side": 1,
      "message": "understand.\nAt moment its not a big concern. Only few people moved to reftables and use eclispe egit (or other jgit-tools) parallel to cgit. I think the problem gets bigger, when cgit change the default to reftables or more people uses reftables.\n\nThe best option to avoid is using a WatchKey for tables.list and invalidating (closing) the reftablestack on modification. But I didn\u0027t see any use of WatchKey, so I think its not desirable to use it in jgit. Should I give this a try.\n\nOther ideas are welcome.\n\nSorry, I don\u0027t have any benchmarks at moment. I try to solve jgit-101 because it prevent me to use reftables in an project in which we use jgit and cgit parallel.",
      "parentUuid": "e607750d_7d7eac4c",
      "range": {
        "startLine": 14,
        "startChar": 29,
        "endLine": 16,
        "endChar": 42
      },
      "revId": "5b16d9e607498909ac60ab3f4d0c88a93e8bf4a1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c88a5afb_e5c52b9f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1038403
      },
      "writtenOn": "2025-01-22T17:55:41Z",
      "side": 1,
      "message": "\u003e The best option to avoid is using a WatchKey for tables.list and invalidating (closing) the reftablestack on modification. But I didn\u0027t see any use of WatchKey, so I think its not desirable to use it in jgit.\n\nThis approach would be racy.\n\nI don\u0027t know what the right approach is for windows, it almost seems like git needs an entirely different design on windows, the ability to delete files is an essential design concept in git. \n\nMaybe windows should keep a list of files \"to delete\" and just move on when it can\u0027t delete a file? jgit could have a process that watches files in that list to see that they are no longer open by another program and delete them then?",
      "parentUuid": "cbd3aa0c_4d96aa49",
      "range": {
        "startLine": 14,
        "startChar": 29,
        "endLine": 16,
        "endChar": 42
      },
      "revId": "5b16d9e607498909ac60ab3f4d0c88a93e8bf4a1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35262ae6_db9a9d5d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1038600
      },
      "writtenOn": "2025-01-22T19:09:25Z",
      "side": 1,
      "message": "Yeah. It\u0027s not easy.\nPerhaps, its a bug in cgit. cgit tries to delete reftablesfiles on compactation, but this fails, because jgit hold the lock on windows.\ncgit ask the user to retry:\nUnlink of file \u0027C:/temp/jgit/.git/reftable/0x000000000001-0x000000000007-43471c5d.ref\u0027 failed. Should I try again? (y/n)\nThe should be ignored and the files should deleted on next compactation.\n\ncgit has documented the problem under https://git-scm.com/docs/reftable#_windows, so there are aware of it.\n\nI started a thread in cgit mailing list and wait for response.",
      "parentUuid": "c88a5afb_e5c52b9f",
      "range": {
        "startLine": 14,
        "startChar": 29,
        "endLine": 16,
        "endChar": 42
      },
      "revId": "5b16d9e607498909ac60ab3f4d0c88a93e8bf4a1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df01b0a5_b5ecb20c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1038403
      },
      "writtenOn": "2025-01-22T20:26:12Z",
      "side": 1,
      "message": "Perhaps you can put together a hybrid approach? While reading the entire file can slow down individual lookups, it can then speedup future lookups. An ideal compromise would be able to read the specific ref being looked up only, and then pass the stream/fd to a background thread for completion and return to the caller right away. The background thread could then continue to read the rest of the file and cache it just like what your approach is doing now. That would allow the file to then be closed, it will make future lookups to the same file fast, and it would also ensure fast responses when the file is not cached.",
      "parentUuid": "35262ae6_db9a9d5d",
      "range": {
        "startLine": 14,
        "startChar": 29,
        "endLine": 16,
        "endChar": 42
      },
      "revId": "5b16d9e607498909ac60ab3f4d0c88a93e8bf4a1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}