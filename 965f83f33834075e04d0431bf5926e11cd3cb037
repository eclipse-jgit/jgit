{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "25a5288d_b44ca548",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1021966
      },
      "writtenOn": "2024-02-04T23:52:22Z",
      "side": 1,
      "message": "I don\u0027t think this is good enough. Looking at the code of ResolveMerger.processEntry(), I see more bugs:\n\n* binary delete-modify (OURS deleted, THEIRS modified) conflicts are wrong; they should check out the THEIRS version.\n* delete-modify or modify-delete conflicts should honor the gitattributes. If gitattributes say a file was binary, it is to be treated as binary, and no content merge should be attempted.\n* on a modify-modify conflict on a file marked as binary in .gitattributes, the conflict is entered in the index, but not added to the list of conflicts in the MergeResult.\n\nLooks like processEntry() needs to be improved anyway, and if done correctly, that should give code that doesn\u0027t call updateIndex() at all for binary files.\n\nApart from that, the test could be simplified quite a bit. It\u0027s not necessary to use random bytes; a modify-modify binary conflict could be produced with just two bytes. 0x00, 0x01 in the base, 0x01, 0x00 in the first branch, 0x02, 0x00 in the second branch. It\u0027s not even necessary to create branches, just three commits would suffice. The MergeCommand accepts arbitrary commit IDs, so one can create just three commits like\n```\n  parent     child1\n    o------------o\n     \\\n      ------o\n          child2\n```\nand then merge child1 into child2 or vice versa. I also notice that the first merge in the test is actually merging the child1 branch into the parent branch, which is a fast-forward merge. That\u0027s not needed at all. When you\u0027ve created child2, you could simply merge child1.\n\nFinally, please format the commit message according to the guidelines.[1]\n\n[1] https://github.com/eclipse-egit/egit/wiki/Contributor-Guide#commit-message-guidelines",
      "revId": "965f83f33834075e04d0431bf5926e11cd3cb037",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af22bcfe_abfd740e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1021966
      },
      "writtenOn": "2024-02-04T23:53:21Z",
      "side": 1,
      "message": "Oh, and please make the correction on the current master branch.",
      "revId": "965f83f33834075e04d0431bf5926e11cd3cb037",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c395770d_238e39fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1037690
      },
      "writtenOn": "2024-02-05T11:45:41Z",
      "side": 1,
      "message": "Hi @twolf@apache.org\nWe any how need to call the method updateIndex() in processEntry() even if there is a conflict in a binary file as it will add that particular entry to INDEX file.\n\nRegarding the test case, yes, I should\u0027ve made it simpler. I will work on it",
      "parentUuid": "25a5288d_b44ca548",
      "revId": "965f83f33834075e04d0431bf5926e11cd3cb037",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70ee1bfc_dfd93258",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1037690
      },
      "writtenOn": "2024-02-05T11:45:41Z",
      "side": 1,
      "message": "We any how need to call the method updateIndex() in processEntry() even if there is a conflict in a binary file as it will add that particular entry to INDEX file.\n\nRegarding the test case, yes, I should\u0027ve made it simpler. I will work on it",
      "revId": "965f83f33834075e04d0431bf5926e11cd3cb037",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9cca1e3b_f1035924",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1021966
      },
      "writtenOn": "2024-02-05T13:28:13Z",
      "side": 1,
      "message": "\u003e We any how need to call the method updateIndex()\n\nNot quite. The binary case is more similar to the symlink cases. addConflict() can be called directly instead of updateIndex(), which does all this file handling that was intended for text conflicts.",
      "parentUuid": "70ee1bfc_dfd93258",
      "revId": "965f83f33834075e04d0431bf5926e11cd3cb037",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4139ac39_33cbbc8d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1037690
      },
      "writtenOn": "2024-02-08T15:26:33Z",
      "side": 1,
      "message": "Hi @twolf@apache.org\n\nI understood what has to be done. But I have a concern here\n\nAll the logic for binary modify-modify conflict can be written in contentMerge\u0027s BinaryBlobException catch block. Why is it written separately?",
      "revId": "965f83f33834075e04d0431bf5926e11cd3cb037",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ],
  "submitRequirementResults": []
}